function django2datepicker(e){for(var t={"%":"",y:"yy",Y:"yyyy",m:"mm",d:"dd",H:"hh",I:"hh",M:"ii",p:"aa",S:""},n="",i=0,r=e.length;i<r;i++)e[i]in t?n+=t[e[i]]:n+=e[i];return":"==n.slice(-1)&&(n=n.slice(0,-1)),n}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){var n=(t=t||te).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function i(e){var t=!!e&&"length"in e&&e.length,n=fe.type(e);return"function"!==n&&!fe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function r(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function o(e,t,n){return fe.isFunction(t)?fe.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?fe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?fe.grep(e,function(e){return se.call(t,e)>-1!==n}):Te.test(t)?fe.filter(t,e,n):(t=fe.filter(t,e),fe.grep(e,function(e){return se.call(t,e)>-1!==n&&1===e.nodeType}))}function s(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function a(e){var t={};return fe.each(e.match(Oe)||[],function(e,n){t[n]=!0}),t}function l(e){return e}function c(e){throw e}function u(e,t,n,i){var r;try{e&&fe.isFunction(r=e.promise)?r.call(e).done(t).fail(n):e&&fe.isFunction(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}function d(){te.removeEventListener("DOMContentLoaded",d),e.removeEventListener("load",d),fe.ready()}function h(){this.expando=fe.expando+h.uid++}function p(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:$e.test(e)?JSON.parse(e):e)}function f(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Me,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=p(n)}catch(e){}Le.set(e,t,n)}else n=void 0;return n}function g(e,t,n,i){var r,o=1,s=20,a=i?function(){return i.cur()}:function(){return fe.css(e,t,"")},l=a(),c=n&&n[3]||(fe.cssNumber[t]?"":"px"),u=(fe.cssNumber[t]||"px"!==c&&+l)&&Re.exec(fe.css(e,t));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{o=o||".5",u/=o,fe.style(e,t,u+c)}while(o!==(o=a()/l)&&1!==o&&--s)}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}function m(e){var t,n=e.ownerDocument,i=e.nodeName,r=Ve[i];return r||(t=n.body.appendChild(n.createElement(i)),r=fe.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),Ve[i]=r,r)}function v(e,t){for(var n,i,r=[],o=0,s=e.length;o<s;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=Pe.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&We(i)&&(r[o]=m(i))):"none"!==n&&(r[o]="none",Pe.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&r(e,t)?fe.merge([e],n):n}function b(e,t){for(var n=0,i=e.length;n<i;n++)Pe.set(e[n],"globalEval",!t||Pe.get(t[n],"globalEval"))}function _(e,t,n,i,r){for(var o,s,a,l,c,u,d=t.createDocumentFragment(),h=[],p=0,f=e.length;p<f;p++)if((o=e[p])||0===o)if("object"===fe.type(o))fe.merge(h,o.nodeType?[o]:o);else if(Ye.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=(qe.exec(o)||["",""])[1].toLowerCase(),l=Ke[a]||Ke._default,s.innerHTML=l[1]+fe.htmlPrefilter(o)+l[2],u=l[0];u--;)s=s.lastChild;fe.merge(h,s.childNodes),(s=d.firstChild).textContent=""}else h.push(t.createTextNode(o));for(d.textContent="",p=0;o=h[p++];)if(i&&fe.inArray(o,i)>-1)r&&r.push(o);else if(c=fe.contains(o.ownerDocument,o),s=y(d.appendChild(o),"script"),c&&b(s),n)for(u=0;o=s[u++];)ze.test(o.type||"")&&n.push(o);return d}function w(){return!0}function C(){return!1}function D(){try{return te.activeElement}catch(e){}}function T(e,t,n,i,r,o){var s,a;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(a in t)T(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=C;else if(!r)return e;return 1===o&&(s=r,r=function(e){return fe().off(e),s.apply(this,arguments)},r.guid=s.guid||(s.guid=fe.guid++)),e.each(function(){fe.event.add(this,t,r,i,n)})}function E(e,t){return r(e,"table")&&r(11!==t.nodeType?t:t.firstChild,"tr")?fe(">tbody",e)[0]||e:e}function x(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function S(e){var t=nt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function k(e,t){var n,i,r,o,s,a,l,c;if(1===t.nodeType){if(Pe.hasData(e)&&(o=Pe.access(e),s=Pe.set(t,o),c=o.events)){delete s.handle,s.events={};for(r in c)for(n=0,i=c[r].length;n<i;n++)fe.event.add(t,r,c[r][n])}Le.hasData(e)&&(a=Le.access(e),l=fe.extend({},a),Le.set(t,l))}}function O(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ue.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function A(e,t,i,r){t=re.apply([],t);var o,s,a,l,c,u,d=0,h=e.length,p=h-1,f=t[0],g=fe.isFunction(f);if(g||h>1&&"string"==typeof f&&!he.checkClone&&tt.test(f))return e.each(function(n){var o=e.eq(n);g&&(t[0]=f.call(this,n,o.html())),A(o,t,i,r)});if(h&&(o=_(t,e[0].ownerDocument,!1,e,r),s=o.firstChild,1===o.childNodes.length&&(o=s),s||r)){for(l=(a=fe.map(y(o,"script"),x)).length;d<h;d++)c=o,d!==p&&(c=fe.clone(c,!0,!0),l&&fe.merge(a,y(c,"script"))),i.call(e[d],c,d);if(l)for(u=a[a.length-1].ownerDocument,fe.map(a,S),d=0;d<l;d++)c=a[d],ze.test(c.type||"")&&!Pe.access(c,"globalEval")&&fe.contains(u,c)&&(c.src?fe._evalUrl&&fe._evalUrl(c.src):n(c.textContent.replace(it,""),u))}return e}function I(e,t,n){for(var i,r=t?fe.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||fe.cleanData(y(i)),i.parentNode&&(n&&fe.contains(i.ownerDocument,i)&&b(y(i,"script")),i.parentNode.removeChild(i));return e}function N(e,t,n){var i,r,o,s,a=e.style;return(n=n||st(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||fe.contains(e.ownerDocument,e)||(s=fe.style(e,t)),!he.pixelMarginRight()&&ot.test(s)&&rt.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function H(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function P(e){if(e in ht)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=dt.length;n--;)if((e=dt[n]+t)in ht)return e}function L(e){var t=fe.cssProps[e];return t||(t=fe.cssProps[e]=P(e)||e),t}function $(e,t,n){var i=Re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function M(e,t,n,i,r){var o,s=0;for(o=n===(i?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(s+=fe.css(e,n+je[o],!0,r)),i?("content"===n&&(s-=fe.css(e,"padding"+je[o],!0,r)),"margin"!==n&&(s-=fe.css(e,"border"+je[o]+"Width",!0,r))):(s+=fe.css(e,"padding"+je[o],!0,r),"padding"!==n&&(s+=fe.css(e,"border"+je[o]+"Width",!0,r)));return s}function F(e,t,n){var i,r=st(e),o=N(e,t,r),s="border-box"===fe.css(e,"boxSizing",!1,r);return ot.test(o)?o:(i=s&&(he.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+M(e,t,n||(s?"border":"content"),i,r)+"px")}function R(e,t,n,i,r){return new R.prototype.init(e,t,n,i,r)}function j(){ft&&(!1===te.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(j):e.setTimeout(j,fe.fx.interval),fe.fx.tick())}function W(){return e.setTimeout(function(){pt=void 0}),pt=fe.now()}function B(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)n=je[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function V(e,t,n){for(var i,r=(q.tweeners[t]||[]).concat(q.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function U(e,t){var n,i,r,o,s;for(n in e)if(i=fe.camelCase(n),r=t[i],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=fe.cssHooks[i])&&"expand"in s){o=s.expand(o),delete e[i];for(n in o)n in e||(e[n]=o[n],t[n]=r)}else t[i]=r}function q(e,t,n){var i,r,o=0,s=q.prefilters.length,a=fe.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=pt||W(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(i);return a.notifyWith(e,[c,i,n]),i<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:fe.extend({},t),opts:fe.extend(!0,{specialEasing:{},easing:fe.easing._default},n),originalProperties:t,originalOptions:n,startTime:pt||W(),duration:n.duration,tweens:[],createTween:function(t,n){var i=fe.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(U(u,c.opts.specialEasing);o<s;o++)if(i=q.prefilters[o].call(c,e,u,c.opts))return fe.isFunction(i.stop)&&(fe._queueHooks(c.elem,c.opts.queue).stop=fe.proxy(i.stop,i)),i;return fe.map(u,V,c),fe.isFunction(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),fe.fx.timer(fe.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}function z(e){return(e.match(Oe)||[]).join(" ")}function K(e){return e.getAttribute&&e.getAttribute("class")||""}function Y(e,t,n,i){var r;if(Array.isArray(t))fe.each(t,function(t,r){n||xt.test(e)?i(e,r):Y(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==fe.type(t))i(e,t);else for(r in t)Y(e+"["+r+"]",t[r],n,i)}function G(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(Oe)||[];if(fe.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Q(e,t,n,i){function r(a){var l;return o[a]=!0,fe.each(e[a]||[],function(e,a){var c=a(t,n,i);return"string"!=typeof c||s||o[c]?s?!(l=c):void 0:(t.dataTypes.unshift(c),r(c),!1)}),l}var o={},s=e===Ft;return r(t.dataTypes[0])||!o["*"]&&r("*")}function X(e,t){var n,i,r=fe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&fe.extend(!0,e,i),e}function J(e,t,n){for(var i,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}function Z(e,t,n,i){var r,o,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}var ee=[],te=e.document,ne=Object.getPrototypeOf,ie=ee.slice,re=ee.concat,oe=ee.push,se=ee.indexOf,ae={},le=ae.toString,ce=ae.hasOwnProperty,ue=ce.toString,de=ue.call(Object),he={},pe="3.2.1",fe=function(e,t){return new fe.fn.init(e,t)},ge=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ve=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};fe.fn=fe.prototype={jquery:pe,constructor:fe,length:0,toArray:function(){return ie.call(this)},get:function(e){return null==e?ie.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=fe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return fe.each(this,e)},map:function(e){return this.pushStack(fe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ie.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:oe,sort:ee.sort,splice:ee.splice},fe.extend=fe.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||fe.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],i=e[t],s!==i&&(c&&i&&(fe.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&fe.isPlainObject(n)?n:{},s[t]=fe.extend(c,o,i)):void 0!==i&&(s[t]=i));return s},fe.extend({expando:"jQuery"+(pe+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===fe.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=fe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==le.call(e)||(t=ne(e))&&("function"!=typeof(n=ce.call(t,"constructor")&&t.constructor)||ue.call(n)!==de))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ae[le.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ve,ye)},each:function(e,t){var n,r=0;if(i(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(ge,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?fe.merge(n,"string"==typeof e?[e]:e):oe.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!==s&&i.push(e[r]);return i},map:function(e,t,n){var r,o,s=0,a=[];if(i(e))for(r=e.length;s<r;s++)null!=(o=t(e[s],s,n))&&a.push(o);else for(s in e)null!=(o=t(e[s],s,n))&&a.push(o);return re.apply([],a)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),fe.isFunction(e))return i=ie.call(arguments,2),r=function(){return e.apply(t||this,i.concat(ie.call(arguments)))},r.guid=e.guid=e.guid||fe.guid++,r},now:Date.now,support:he}),"function"==typeof Symbol&&(fe.fn[Symbol.iterator]=ee[Symbol.iterator]),fe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ae["[object "+t+"]"]=t.toLowerCase()});var be=function(e){function t(e,t,n,i){var r,o,s,a,l,u,h,p=t&&t.ownerDocument,f=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return n;if(!i&&((t?t.ownerDocument||t:R)!==I&&A(t),t=t||I,H)){if(11!==f&&(l=ge.exec(e)))if(r=l[1]){if(9===f){if(!(s=t.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(p&&(s=p.getElementById(r))&&M(t,s)&&s.id===r)return n.push(s),n}else{if(l[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((r=l[3])&&_.getElementsByClassName&&t.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(r)),n}if(_.qsa&&!U[e+" "]&&(!P||!P.test(e))){if(1!==f)p=t,h=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(be,_e):t.setAttribute("id",a=F),o=(u=T(e)).length;o--;)u[o]="#"+a+" "+d(u[o]);h=u.join(","),p=me.test(e)&&c(t.parentNode)||t}if(h)try{return Q.apply(n,p.querySelectorAll(h)),n}catch(e){}finally{a===F&&t.removeAttribute("id")}}}return x(e.replace(oe,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[F]=!0,e}function r(e){var t=I.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=t}function s(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function a(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ce(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return i(function(t){return t=+t,i(function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function c(e){return e&&void 0!==e.getElementsByTagName&&e}function u(){}function d(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function h(e,t,n){var i=t.dir,r=t.next,o=r||i,s=n&&"parentNode"===o,a=W++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,l){var c,u,d,h=[j,a];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(d=t[F]||(t[F]={}),u=d[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[o])&&c[0]===j&&c[1]===a)return h[2]=c[2];if(u[o]=h,h[2]=e(t,n,l))return!0}return!1}}function p(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function f(e,n,i){for(var r=0,o=n.length;r<o;r++)t(e,n[r],i);return i}function g(e,t,n,i,r){for(var o,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),c&&t.push(a)));return s}function m(e,t,n,r,o,s){return r&&!r[F]&&(r=m(r)),o&&!o[F]&&(o=m(o,s)),i(function(i,s,a,l){var c,u,d,h=[],p=[],m=s.length,v=i||f(t||"*",a.nodeType?[a]:a,[]),y=!e||!i&&t?v:g(v,h,e,a,l),b=n?o||(i?e:m||r)?[]:s:y;if(n&&n(y,b,a,l),r)for(c=g(b,p),r(c,[],a,l),u=c.length;u--;)(d=c[u])&&(b[p[u]]=!(y[p[u]]=d));if(i){if(o||e){if(o){for(c=[],u=b.length;u--;)(d=b[u])&&c.push(y[u]=d);o(null,b=[],c,l)}for(u=b.length;u--;)(d=b[u])&&(c=o?J(i,d):h[u])>-1&&(i[c]=!(s[c]=d))}}else b=g(b===s?b.splice(m,b.length):b),o?o(null,s,b,l):Q.apply(s,b)})}function v(e){for(var t,n,i,r=e.length,o=w.relative[e[0].type],s=o||w.relative[" "],a=o?1:0,l=h(function(e){return e===t},s,!0),c=h(function(e){return J(t,e)>-1},s,!0),u=[function(e,n,i){var r=!o&&(i||n!==S)||((t=n).nodeType?l(e,n,i):c(e,n,i));return t=null,r}];a<r;a++)if(n=w.relative[e[a].type])u=[h(p(u),n)];else{if((n=w.filter[e[a].type].apply(null,e[a].matches))[F]){for(i=++a;i<r&&!w.relative[e[i].type];i++);return m(a>1&&p(u),a>1&&d(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(oe,"$1"),n,a<i&&v(e.slice(a,i)),i<r&&v(e=e.slice(i)),i<r&&d(e))}u.push(n)}return p(u)}function y(e,n){var r=n.length>0,o=e.length>0,s=function(i,s,a,l,c){var u,d,h,p=0,f="0",m=i&&[],v=[],y=S,b=i||o&&w.find.TAG("*",c),_=j+=null==y?1:Math.random()||.1,C=b.length;for(c&&(S=s===I||s||c);f!==C&&null!=(u=b[f]);f++){if(o&&u){for(d=0,s||u.ownerDocument===I||(A(u),a=!H);h=e[d++];)if(h(u,s||I,a)){l.push(u);break}c&&(j=_)}r&&((u=!h&&u)&&p--,i&&m.push(u))}if(p+=f,r&&f!==p){for(d=0;h=n[d++];)h(m,v,s,a);if(i){if(p>0)for(;f--;)m[f]||v[f]||(v[f]=Y.call(l));v=g(v)}Q.apply(l,v),c&&!i&&v.length>0&&p+n.length>1&&t.uniqueSort(l)}return c&&(j=_,S=y),m};return r?i(s):s}var b,_,w,C,D,T,E,x,S,k,O,A,I,N,H,P,L,$,M,F="sizzle"+1*new Date,R=e.document,j=0,W=0,B=n(),V=n(),U=n(),q=function(e,t){return e===t&&(O=!0),0},z={}.hasOwnProperty,K=[],Y=K.pop,G=K.push,Q=K.push,X=K.slice,J=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ie=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",re=new RegExp(ee+"+","g"),oe=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),se=new RegExp("^"+ee+"*,"+ee+"*"),ae=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ce=new RegExp(ie),ue=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ie),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,fe=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,_e=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},we=function(){A()},Ce=h(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{Q.apply(K=X.call(R.childNodes),R.childNodes),K[R.childNodes.length].nodeType}catch(e){Q={apply:K.length?function(e,t){G.apply(e,X.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}_=t.support={},D=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},A=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:R;return i!==I&&9===i.nodeType&&i.documentElement?(I=i,N=I.documentElement,H=!D(I),R!==I&&(n=I.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",we,!1):n.attachEvent&&n.attachEvent("onunload",we)),_.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),_.getElementsByTagName=r(function(e){return e.appendChild(I.createComment("")),!e.getElementsByTagName("*").length}),_.getElementsByClassName=fe.test(I.getElementsByClassName),_.getById=r(function(e){return N.appendChild(e).id=F,!I.getElementsByName||!I.getElementsByName(F).length}),_.getById?(w.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&H){var n=t.getElementById(e);return n?[n]:[]}}):(w.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&H){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),w.find.TAG=_.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):_.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},w.find.CLASS=_.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&H)return t.getElementsByClassName(e)},L=[],P=[],(_.qsa=fe.test(I.querySelectorAll))&&(r(function(e){N.appendChild(e).innerHTML="<a id='"+F+"'></a><select id='"+F+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||P.push("\\["+ee+"*(?:value|"+Z+")"),e.querySelectorAll("[id~="+F+"-]").length||P.push("~="),e.querySelectorAll(":checked").length||P.push(":checked"),e.querySelectorAll("a#"+F+"+*").length||P.push(".#.+[+~]")}),r(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=I.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&P.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&P.push(":enabled",":disabled"),N.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&P.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),P.push(",.*:")})),(_.matchesSelector=fe.test($=N.matches||N.webkitMatchesSelector||N.mozMatchesSelector||N.oMatchesSelector||N.msMatchesSelector))&&r(function(e){_.disconnectedMatch=$.call(e,"*"),$.call(e,"[s!='']:x"),L.push("!=",ie)}),P=P.length&&new RegExp(P.join("|")),L=L.length&&new RegExp(L.join("|")),t=fe.test(N.compareDocumentPosition),M=t||fe.test(N.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},q=t?function(e,t){if(e===t)return O=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!_.sortDetached&&t.compareDocumentPosition(e)===n?e===I||e.ownerDocument===R&&M(R,e)?-1:t===I||t.ownerDocument===R&&M(R,t)?1:k?J(k,e)-J(k,t):0:4&n?-1:1)}:function(e,t){if(e===t)return O=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],l=[t];if(!r||!o)return e===I?-1:t===I?1:r?-1:o?1:k?J(k,e)-J(k,t):0;if(r===o)return s(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?s(a[i],l[i]):a[i]===R?-1:l[i]===R?1:0},I):I},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==I&&A(e),n=n.replace(le,"='$1']"),_.matchesSelector&&H&&!U[n+" "]&&(!L||!L.test(n))&&(!P||!P.test(n)))try{var i=$.call(e,n);if(i||_.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,I,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==I&&A(e),M(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==I&&A(e);var n=w.attrHandle[t.toLowerCase()],i=n&&z.call(w.attrHandle,t.toLowerCase())?n(e,t,!H):void 0;return void 0!==i?i:_.attributes||!H?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(be,_e)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,r=0;if(O=!_.detectDuplicates,k=!_.sortStable&&e.slice(0),e.sort(q),O){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return k=null,e},C=t.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=C(t);return n},(w=t.selectors={cacheLength:50,createPseudo:i,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ce.test(n)&&(t=T(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=B[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&B(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(r){var o=t.attr(r,e);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(re," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,h,p,f,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(m){if(o){for(;g;){for(h=t;h=h[g];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=g="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?m.firstChild:m.lastChild],s&&y){for(b=(p=(c=(u=(d=(h=m)[F]||(h[F]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===j&&c[1])&&c[2],h=p&&m.childNodes[p];h=++p&&h&&h[g]||(b=p=0)||f.pop();)if(1===h.nodeType&&++b&&h===t){u[e]=[j,p,b];break}}else if(y&&(h=t,d=h[F]||(h[F]={}),u=d[h.uniqueID]||(d[h.uniqueID]={}),c=u[e]||[],p=c[0]===j&&c[1],b=p),!1===b)for(;(h=++p&&h&&h[g]||(b=p=0)||f.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++b||(y&&(d=h[F]||(h[F]={}),u=d[h.uniqueID]||(d[h.uniqueID]={}),u[e]=[j,b]),h!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,n){var r,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[F]?o(n):o.length>1?(r=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,r=o(e,n),s=r.length;s--;)i=J(e,r[s]),e[i]=!(t[i]=r[s])}):function(e){return o(e,0,r)}):o}},pseudos:{not:i(function(e){var t=[],n=[],r=E(e.replace(oe,"$1"));return r[F]?i(function(e,t,n,i){for(var o,s=r(e,null,i,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:i(function(e){return ue.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=H?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===N},focus:function(e){return e===I.activeElement&&(!I.hasFocus||I.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:a(!1),disabled:a(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:l(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return u.prototype=w.filters=w.pseudos,w.setFilters=new u,T=t.tokenize=function(e,n){var i,r,o,s,a,l,c,u=V[e+" "];if(u)return n?0:u.slice(0);for(a=e,l=[],c=w.preFilter;a;){i&&!(r=se.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),i=!1,(r=ae.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(oe," ")}),a=a.slice(i.length));for(s in w.filter)!(r=de[s].exec(a))||c[s]&&!(r=c[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?t.error(e):V(e,l).slice(0)},E=t.compile=function(e,t){var n,i=[],r=[],o=U[e+" "];if(!o){for(t||(t=T(e)),n=t.length;n--;)(o=v(t[n]))[F]?i.push(o):r.push(o);(o=U(e,y(r,i))).selector=e}return o},x=t.select=function(e,t,n,i){var r,o,s,a,l,u="function"==typeof e&&e,h=!i&&T(e=u.selector||e);if(n=n||[],1===h.length){if((o=h[0]=h[0].slice(0)).length>2&&"ID"===(s=o[0]).type&&9===t.nodeType&&H&&w.relative[o[1].type]){if(!(t=(w.find.ID(s.matches[0].replace(ve,ye),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=de.needsContext.test(e)?0:o.length;r--&&(s=o[r],!w.relative[a=s.type]);)if((l=w.find[a])&&(i=l(s.matches[0].replace(ve,ye),me.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(r,1),!(e=i.length&&d(o)))return Q.apply(n,i),n;break}}return(u||E(e,h))(i,t,!H,n,!t||me.test(e)&&c(t.parentNode)||t),n},_.sortStable=F.split("").sort(q).join("")===F,_.detectDuplicates=!!O,A(),_.sortDetached=r(function(e){return 1&e.compareDocumentPosition(I.createElement("fieldset"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),_.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||o(Z,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);fe.find=be,fe.expr=be.selectors,fe.expr[":"]=fe.expr.pseudos,fe.uniqueSort=fe.unique=be.uniqueSort,fe.text=be.getText,fe.isXMLDoc=be.isXML,fe.contains=be.contains,fe.escapeSelector=be.escape;var _e=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&fe(e).is(n))break;i.push(e)}return i},we=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Ce=fe.expr.match.needsContext,De=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Te=/^.[^:#\[\.,]*$/;fe.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?fe.find.matchesSelector(i,e)?[i]:[]:fe.find.matches(e,fe.grep(t,function(e){return 1===e.nodeType}))},fe.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(fe(e).filter(function(){for(t=0;t<i;t++)if(fe.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)fe.find(e,r[t],n);return i>1?fe.uniqueSort(n):n},filter:function(e){return this.pushStack(o(this,e||[],!1))},not:function(e){return this.pushStack(o(this,e||[],!0))},is:function(e){return!!o(this,"string"==typeof e&&Ce.test(e)?fe(e):e||[],!1).length}});var Ee,xe=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(fe.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||Ee,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:xe.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof fe?t[0]:t,fe.merge(this,fe.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:te,!0)),De.test(i[1])&&fe.isPlainObject(t))for(i in t)fe.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=te.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):fe.isFunction(e)?void 0!==n.ready?n.ready(e):e(fe):fe.makeArray(e,this)}).prototype=fe.fn,Ee=fe(te);var Se=/^(?:parents|prev(?:Until|All))/,ke={children:!0,contents:!0,next:!0,prev:!0};fe.fn.extend({has:function(e){var t=fe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(fe.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],s="string"!=typeof e&&fe(e);if(!Ce.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&fe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?fe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?se.call(fe(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(fe.uniqueSort(fe.merge(this.get(),fe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),fe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return _e(e,"parentNode")},parentsUntil:function(e,t,n){return _e(e,"parentNode",n)},next:function(e){return s(e,"nextSibling")},prev:function(e){return s(e,"previousSibling")},nextAll:function(e){return _e(e,"nextSibling")},prevAll:function(e){return _e(e,"previousSibling")},nextUntil:function(e,t,n){return _e(e,"nextSibling",n)},prevUntil:function(e,t,n){return _e(e,"previousSibling",n)},siblings:function(e){return we((e.parentNode||{}).firstChild,e)},children:function(e){return we(e.firstChild)},contents:function(e){return r(e,"iframe")?e.contentDocument:(r(e,"template")&&(e=e.content||e),fe.merge([],e.childNodes))}},function(e,t){fe.fn[e]=function(n,i){var r=fe.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=fe.filter(i,r)),this.length>1&&(ke[e]||fe.uniqueSort(r),Se.test(e)&&r.reverse()),this.pushStack(r)}});var Oe=/[^\x20\t\r\n\f]+/g;fe.Callbacks=function(e){e="string"==typeof e?a(e):fe.extend({},e);var t,n,i,r,o=[],s=[],l=-1,c=function(){for(r=r||e.once,i=t=!0;s.length;l=-1)for(n=s.shift();++l<o.length;)!1===o[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(l=o.length-1,s.push(n)),function t(n){fe.each(n,function(n,i){fe.isFunction(i)?e.unique&&u.has(i)||o.push(i):i&&i.length&&"string"!==fe.type(i)&&t(i)})}(arguments),n&&!t&&c()),this},remove:function(){return fe.each(arguments,function(e,t){for(var n;(n=fe.inArray(t,o,n))>-1;)o.splice(n,1),n<=l&&l--}),this},has:function(e){return e?fe.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},fe.extend({Deferred:function(t){var n=[["notify","progress",fe.Callbacks("memory"),fe.Callbacks("memory"),2],["resolve","done",fe.Callbacks("once memory"),fe.Callbacks("once memory"),0,"resolved"],["reject","fail",fe.Callbacks("once memory"),fe.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return fe.Deferred(function(t){fe.each(n,function(n,i){var r=fe.isFunction(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&fe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(t,i,r){function o(t,n,i,r){return function(){var a=this,u=arguments,d=function(){var e,d;if(!(t<s)){if((e=i.apply(a,u))===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,fe.isFunction(d)?r?d.call(e,o(s,n,l,r),o(s,n,c,r)):(s++,d.call(e,o(s,n,l,r),o(s,n,c,r),o(s,n,l,n.notifyWith))):(i!==l&&(a=void 0,u=[e]),(r||n.resolveWith)(a,u))}},h=r?d:function(){try{d()}catch(e){fe.Deferred.exceptionHook&&fe.Deferred.exceptionHook(e,h.stackTrace),t+1>=s&&(i!==c&&(a=void 0,u=[e]),n.rejectWith(a,u))}};t?h():(fe.Deferred.getStackHook&&(h.stackTrace=fe.Deferred.getStackHook()),e.setTimeout(h))}}var s=0;return fe.Deferred(function(e){n[0][3].add(o(0,e,fe.isFunction(r)?r:l,e.notifyWith)),n[1][3].add(o(0,e,fe.isFunction(t)?t:l)),n[2][3].add(o(0,e,fe.isFunction(i)?i:c))}).promise()},promise:function(e){return null!=e?fe.extend(e,r):r}},o={};return fe.each(n,function(e,t){var s=t[2],a=t[5];r[t[1]]=s.add,a&&s.add(function(){i=a},n[3-e][2].disable,n[0][2].lock),s.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=s.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=ie.call(arguments),o=fe.Deferred(),s=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?ie.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(u(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||fe.isFunction(r[n]&&r[n].then)))return o.then();for(;n--;)u(r[n],s(n),o.reject);return o.promise()}});var Ae=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;fe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Ae.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},fe.readyException=function(t){e.setTimeout(function(){throw t})};var Ie=fe.Deferred();fe.fn.ready=function(e){return Ie.then(e).catch(function(e){fe.readyException(e)}),this},fe.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--fe.readyWait:fe.isReady)||(fe.isReady=!0,!0!==e&&--fe.readyWait>0||Ie.resolveWith(te,[fe]))}}),fe.ready.then=Ie.then,"complete"===te.readyState||"loading"!==te.readyState&&!te.documentElement.doScroll?e.setTimeout(fe.ready):(te.addEventListener("DOMContentLoaded",d),e.addEventListener("load",d));var Ne=function(e,t,n,i,r,o,s){var a=0,l=e.length,c=null==n;if("object"===fe.type(n)){r=!0;for(a in n)Ne(e,t,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,fe.isFunction(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(fe(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:c?t.call(e):l?t(e[0],n):o},He=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};h.uid=1,h.prototype={cache:function(e){var t=e[this.expando];return t||(t={},He(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[fe.camelCase(t)]=n;else for(i in t)r[fe.camelCase(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][fe.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){Array.isArray(t)?t=t.map(fe.camelCase):(t=fe.camelCase(t),t=t in i?[t]:t.match(Oe)||[]),n=t.length;for(;n--;)delete i[t[n]]}(void 0===t||fe.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!fe.isEmptyObject(t)}};var Pe=new h,Le=new h,$e=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Me=/[A-Z]/g;fe.extend({hasData:function(e){return Le.hasData(e)||Pe.hasData(e)},data:function(e,t,n){return Le.access(e,t,n)},removeData:function(e,t){Le.remove(e,t)},_data:function(e,t,n){return Pe.access(e,t,n)},_removeData:function(e,t){Pe.remove(e,t)}}),fe.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=Le.get(o),1===o.nodeType&&!Pe.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=fe.camelCase(i.slice(5)),f(o,i,r[i]));Pe.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Le.set(this,e)}):Ne(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=Le.get(o,e)))return n;if(void 0!==(n=f(o,e)))return n}else this.each(function(){Le.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Le.remove(this,e)})}}),fe.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Pe.get(e,t),n&&(!i||Array.isArray(n)?i=Pe.access(e,t,fe.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=fe.queue(e,t),i=n.length,r=n.shift(),o=fe._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){fe.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Pe.get(e,n)||Pe.access(e,n,{empty:fe.Callbacks("once memory").add(function(){Pe.remove(e,[t+"queue",n])})})}}),fe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?fe.queue(this[0],e):void 0===t?this:this.each(function(){var n=fe.queue(this,e,t);fe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&fe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){fe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=fe.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Pe.get(o[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var Fe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Re=new RegExp("^(?:([+-])=|)("+Fe+")([a-z%]*)$","i"),je=["Top","Right","Bottom","Left"],We=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&fe.contains(e.ownerDocument,e)&&"none"===fe.css(e,"display")},Be=function(e,t,n,i){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];r=n.apply(e,i||[]);for(o in t)e.style[o]=s[o];return r},Ve={};fe.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){We(this)?fe(this).show():fe(this).hide()})}});var Ue=/^(?:checkbox|radio)$/i,qe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ze=/^$|\/(?:java|ecma)script/i,Ke={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ke.optgroup=Ke.option,Ke.tbody=Ke.tfoot=Ke.colgroup=Ke.caption=Ke.thead,Ke.th=Ke.td;var Ye=/<|&#?\w+;/;!function(){var e=te.createDocumentFragment().appendChild(te.createElement("div")),t=te.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),he.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",he.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Ge=te.documentElement,Qe=/^key/,Xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Je=/^([^.]*)(?:\.(.+)|)/;fe.event={global:{},add:function(e,t,n,i,r){var o,s,a,l,c,u,d,h,p,f,g,m=Pe.get(e);if(m)for(n.handler&&(o=n,n=o.handler,r=o.selector),r&&fe.find.matchesSelector(Ge,r),n.guid||(n.guid=fe.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(t){return void 0!==fe&&fe.event.triggered!==t.type?fe.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(Oe)||[""]).length;c--;)a=Je.exec(t[c])||[],p=g=a[1],f=(a[2]||"").split(".").sort(),p&&(d=fe.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=fe.event.special[p]||{},u=fe.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&fe.expr.match.needsContext.test(r),namespace:f.join(".")},o),(h=l[p])||(h=l[p]=[],h.delegateCount=0,d.setup&&!1!==d.setup.call(e,i,f,s)||e.addEventListener&&e.addEventListener(p,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,u):h.push(u),fe.event.global[p]=!0)},remove:function(e,t,n,i,r){var o,s,a,l,c,u,d,h,p,f,g,m=Pe.hasData(e)&&Pe.get(e);if(m&&(l=m.events)){for(c=(t=(t||"").match(Oe)||[""]).length;c--;)if(a=Je.exec(t[c])||[],p=g=a[1],f=(a[2]||"").split(".").sort(),p){for(d=fe.event.special[p]||{},h=l[p=(i?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=h.length;o--;)u=h[o],!r&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(h.splice(o,1),u.selector&&h.delegateCount--,d.remove&&d.remove.call(e,u));s&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,f,m.handle)||fe.removeEvent(e,p,m.handle),delete l[p])}else for(p in l)fe.event.remove(e,p+t[c],n,i,!0);fe.isEmptyObject(l)&&Pe.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,s,a=fe.event.fix(e),l=new Array(arguments.length),c=(Pe.get(this,"events")||{})[a.type]||[],u=fe.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(s=fe.event.handlers.call(this,a,c),t=0;(r=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((fe.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,r,o,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],s={},n=0;n<l;n++)i=t[n],r=i.selector+" ",void 0===s[r]&&(s[r]=i.needsContext?fe(r,this).index(c)>-1:fe.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(fe.Event.prototype,e,{enumerable:!0,configurable:!0,get:fe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[fe.expando]?e:new fe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==D()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===D()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r(this,"input"))return this.click(),!1},_default:function(e){return r(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},fe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},fe.Event=function(e,t){return this instanceof fe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?w:C,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&fe.extend(this,t),this.timeStamp=e&&e.timeStamp||fe.now(),void(this[fe.expando]=!0)):new fe.Event(e,t)},fe.Event.prototype={constructor:fe.Event,isDefaultPrevented:C,isPropagationStopped:C,isImmediatePropagationStopped:C,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=w,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=w,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=w,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},fe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Qe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},fe.event.addProp),fe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){fe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return r&&(r===i||fe.contains(i,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),fe.fn.extend({on:function(e,t,n,i){return T(this,e,t,n,i)},one:function(e,t,n,i){return T(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,fe(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=C),this.each(function(){fe.event.remove(this,e,n,t)})}});var Ze=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,et=/<script|<style|<link/i,tt=/checked\s*(?:[^=]|=\s*.checked.)/i,nt=/^true\/(.*)/,it=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;fe.extend({htmlPrefilter:function(e){return e.replace(Ze,"<$1></$2>")},clone:function(e,t,n){var i,r,o,s,a=e.cloneNode(!0),l=fe.contains(e.ownerDocument,e);if(!(he.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||fe.isXMLDoc(e)))for(s=y(a),o=y(e),i=0,r=o.length;i<r;i++)O(o[i],s[i]);if(t)if(n)for(o=o||y(e),s=s||y(a),i=0,r=o.length;i<r;i++)k(o[i],s[i]);else k(e,a);return(s=y(a,"script")).length>0&&b(s,!l&&y(e,"script")),a},cleanData:function(e){for(var t,n,i,r=fe.event.special,o=0;void 0!==(n=e[o]);o++)if(He(n)){if(t=n[Pe.expando]){if(t.events)for(i in t.events)r[i]?fe.event.remove(n,i):fe.removeEvent(n,i,t.handle);n[Pe.expando]=void 0}n[Le.expando]&&(n[Le.expando]=void 0)}}}),fe.fn.extend({detach:function(e){return I(this,e,!0)},remove:function(e){return I(this,e)},text:function(e){return Ne(this,function(e){return void 0===e?fe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||E(this,e).appendChild(e)})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=E(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(fe.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return fe.clone(this,e,t)})},html:function(e){return Ne(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!et.test(e)&&!Ke[(qe.exec(e)||["",""])[1].toLowerCase()]){e=fe.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(fe.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;fe.inArray(this,e)<0&&(fe.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),fe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){fe.fn[e]=function(e){for(var n,i=[],r=fe(e),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),fe(r[s])[t](n),oe.apply(i,n.get());return this.pushStack(i)}});var rt=/^margin/,ot=new RegExp("^("+Fe+")(?!px)[a-z%]+$","i"),st=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Ge.appendChild(s);var t=e.getComputedStyle(a);n="1%"!==t.top,o="2px"===t.marginLeft,i="4px"===t.width,a.style.marginRight="50%",r="4px"===t.marginRight,Ge.removeChild(s),a=null}}var n,i,r,o,s=te.createElement("div"),a=te.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",he.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),fe.extend(he,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),o}}))}();var at=/^(none|table(?!-c[ea]).+)/,lt=/^--/,ct={position:"absolute",visibility:"hidden",display:"block"},ut={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],ht=te.createElement("div").style;fe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=N(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=fe.camelCase(t),l=lt.test(t),c=e.style;return l||(t=L(a)),s=fe.cssHooks[t]||fe.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:c[t]:("string"===(o=typeof n)&&(r=Re.exec(n))&&r[1]&&(n=g(e,t,r),o="number"),void(null!=n&&n===n&&("number"===o&&(n+=r&&r[3]||(fe.cssNumber[a]?"":"px")),he.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))))}},css:function(e,t,n,i){var r,o,s,a=fe.camelCase(t);return lt.test(t)||(t=L(a)),(s=fe.cssHooks[t]||fe.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=N(e,t,i)),"normal"===r&&t in ut&&(r=ut[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),fe.each(["height","width"],function(e,t){fe.cssHooks[t]={get:function(e,n,i){if(n)return!at.test(fe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?F(e,t,i):Be(e,ct,function(){return F(e,t,i)})},set:function(e,n,i){var r,o=i&&st(e),s=i&&M(e,t,i,"border-box"===fe.css(e,"boxSizing",!1,o),o);return s&&(r=Re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=fe.css(e,t)),$(0,n,s)}}}),fe.cssHooks.marginLeft=H(he.reliableMarginLeft,function(e,t){if(t)return(parseFloat(N(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),fe.each({margin:"",padding:"",border:"Width"},function(e,t){fe.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+je[i]+t]=o[i]||o[i-2]||o[0];return r}},rt.test(e)||(fe.cssHooks[e+t].set=$)}),fe.fn.extend({css:function(e,t){return Ne(this,function(e,t,n){var i,r,o={},s=0;if(Array.isArray(t)){for(i=st(e),r=t.length;s<r;s++)o[t[s]]=fe.css(e,t[s],!1,i);return o}return void 0!==n?fe.style(e,t,n):fe.css(e,t)},e,t,arguments.length>1)}}),fe.Tween=R,R.prototype={constructor:R,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||fe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(fe.cssNumber[n]?"":"px")},cur:function(){var e=R.propHooks[this.prop];return e&&e.get?e.get(this):R.propHooks._default.get(this)},run:function(e){var t,n=R.propHooks[this.prop];return this.options.duration?this.pos=t=fe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):R.propHooks._default.set(this),this}},R.prototype.init.prototype=R.prototype,R.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=fe.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){fe.fx.step[e.prop]?fe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[fe.cssProps[e.prop]]&&!fe.cssHooks[e.prop]?e.elem[e.prop]=e.now:fe.style(e.elem,e.prop,e.now+e.unit)}}},R.propHooks.scrollTop=R.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},fe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},fe.fx=R.prototype.init,fe.fx.step={};var pt,ft,gt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;fe.Animation=fe.extend(q,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return g(n.elem,e,Re.exec(t),n),n}]},tweener:function(e,t){fe.isFunction(e)?(t=e,e=["*"]):e=e.match(Oe);for(var n,i=0,r=e.length;i<r;i++)n=e[i],q.tweeners[n]=q.tweeners[n]||[],q.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,l,c,u,d="width"in t||"height"in t,h=this,p={},f=e.style,g=e.nodeType&&We(e),m=Pe.get(e,"fxshow");n.queue||(null==(s=fe._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,h.always(function(){h.always(function(){s.unqueued--,fe.queue(e,"fx").length||s.empty.fire()})}));for(i in t)if(r=t[i],gt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}p[i]=m&&m[i]||fe.style(e,i)}if((l=!fe.isEmptyObject(t))||!fe.isEmptyObject(p)){d&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=m&&m.display)&&(c=Pe.get(e,"display")),"none"===(u=fe.css(e,"display"))&&(c?u=c:(v([e],!0),c=e.style.display||c,u=fe.css(e,"display"),v([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===fe.css(e,"float")&&(l||(h.done(function(){f.display=c}),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1;for(i in p)l||(m?"hidden"in m&&(g=m.hidden):m=Pe.access(e,"fxshow",{display:c}),o&&(m.hidden=!g),g&&v([e],!0),h.done(function(){g||v([e]),Pe.remove(e,"fxshow");for(i in p)fe.style(e,i,p[i])})),l=V(g?m[i]:0,i,h),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}}],prefilter:function(e,t){t?q.prefilters.unshift(e):q.prefilters.push(e)}}),fe.speed=function(e,t,n){var i=e&&"object"==typeof e?fe.extend({},e):{complete:n||!n&&t||fe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!fe.isFunction(t)&&t};return fe.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in fe.fx.speeds?i.duration=fe.fx.speeds[i.duration]:i.duration=fe.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){fe.isFunction(i.old)&&i.old.call(this),i.queue&&fe.dequeue(this,i.queue)},i},fe.fn.extend({fadeTo:function(e,t,n,i){return this.filter(We).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=fe.isEmptyObject(e),o=fe.speed(t,n,i),s=function(){var t=q(this,fe.extend({},e),o);(r||Pe.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=fe.timers,s=Pe.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&mt.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||fe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Pe.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=fe.timers,s=i?i.length:0;for(n.finish=!0,fe.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),fe.each(["toggle","show","hide"],function(e,t){var n=fe.fn[t];fe.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(B(t,!0),e,i,r)}}),fe.each({slideDown:B("show"),slideUp:B("hide"),slideToggle:B("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){fe.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),fe.timers=[],fe.fx.tick=function(){var e,t=0,n=fe.timers;for(pt=fe.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||fe.fx.stop(),pt=void 0},fe.fx.timer=function(e){fe.timers.push(e),fe.fx.start()},fe.fx.interval=13,fe.fx.start=function(){ft||(ft=!0,j())},fe.fx.stop=function(){ft=null},fe.fx.speeds={slow:600,fast:200,_default:400},fe.fn.delay=function(t,n){return t=fe.fx?fe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})},function(){var e=te.createElement("input"),t=te.createElement("select").appendChild(te.createElement("option"));e.type="checkbox",he.checkOn=""!==e.value,he.optSelected=t.selected,(e=te.createElement("input")).value="t",e.type="radio",he.radioValue="t"===e.value}();var vt,yt=fe.expr.attrHandle;fe.fn.extend({attr:function(e,t){return Ne(this,fe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){fe.removeAttr(this,e)})}}),fe.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?fe.prop(e,t,n):(1===o&&fe.isXMLDoc(e)||(r=fe.attrHooks[t.toLowerCase()]||(fe.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void fe.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=fe.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!he.radioValue&&"radio"===t&&r(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(Oe);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return!1===t?fe.removeAttr(e,n):e.setAttribute(n,n),n}},fe.each(fe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||fe.find.attr;yt[t]=function(e,t,i){var r,o,s=t.toLowerCase();return i||(o=yt[s],yt[s]=r,r=null!=n(e,t,i)?s:null,yt[s]=o),r}});var bt=/^(?:input|select|textarea|button)$/i,_t=/^(?:a|area)$/i;fe.fn.extend({prop:function(e,t){return Ne(this,fe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[fe.propFix[e]||e]})}}),fe.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&fe.isXMLDoc(e)||(t=fe.propFix[t]||t,r=fe.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=fe.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||_t.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),he.optSelected||(fe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),fe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){fe.propFix[this.toLowerCase()]=this}),fe.fn.extend({addClass:function(e){var t,n,i,r,o,s,a,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).addClass(e.call(this,t,K(this)))});if("string"==typeof e&&e)for(t=e.match(Oe)||[];n=this[l++];)if(r=K(n),i=1===n.nodeType&&" "+z(r)+" "){for(s=0;o=t[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=z(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,o,s,a,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).removeClass(e.call(this,t,K(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Oe)||[];n=this[l++];)if(r=K(n),i=1===n.nodeType&&" "+z(r)+" "){for(s=0;o=t[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=z(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):fe.isFunction(e)?this.each(function(n){fe(this).toggleClass(e.call(this,n,K(this),t),t)}):this.each(function(){var t,i,r,o;if("string"===n)for(i=0,r=fe(this),o=e.match(Oe)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=K(this))&&Pe.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Pe.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+z(K(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;fe.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=fe.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,fe(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=fe.map(r,function(e){return null==e?"":e+""})),(t=fe.valHooks[this.type]||fe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=fe.valHooks[r.type]||fe.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(wt,""):null==n?"":n:void 0}}),fe.extend({valHooks:{option:{get:function(e){var t=fe.find.attr(e,"value");return null!=t?t:z(fe.text(e))}},select:{get:function(e){var t,n,i,o=e.options,s=e.selectedIndex,a="select-one"===e.type,l=a?null:[],c=a?s+1:o.length;for(i=s<0?c:a?s:0;i<c;i++)if(((n=o[i]).selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!r(n.parentNode,"optgroup"))){if(t=fe(n).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var n,i,r=e.options,o=fe.makeArray(t),s=r.length;s--;)i=r[s],(i.selected=fe.inArray(fe.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),fe.each(["radio","checkbox"],function(){fe.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=fe.inArray(fe(e).val(),t)>-1}},he.checkOn||(fe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Ct=/^(?:focusinfocus|focusoutblur)$/;fe.extend(fe.event,{trigger:function(t,n,i,r){var o,s,a,l,c,u,d,h=[i||te],p=ce.call(t,"type")?t.type:t,f=ce.call(t,"namespace")?t.namespace.split("."):[];if(s=a=i=i||te,3!==i.nodeType&&8!==i.nodeType&&!Ct.test(p+fe.event.triggered)&&(p.indexOf(".")>-1&&(f=p.split("."),p=f.shift(),f.sort()),c=p.indexOf(":")<0&&"on"+p,t=t[fe.expando]?t:new fe.Event(p,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:fe.makeArray(n,[t]),d=fe.event.special[p]||{},r||!d.trigger||!1!==d.trigger.apply(i,n))){if(!r&&!d.noBubble&&!fe.isWindow(i)){for(l=d.delegateType||p,Ct.test(l+p)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(i.ownerDocument||te)&&h.push(a.defaultView||a.parentWindow||e)}for(o=0;(s=h[o++])&&!t.isPropagationStopped();)t.type=o>1?l:d.bindType||p,(u=(Pe.get(s,"events")||{})[t.type]&&Pe.get(s,"handle"))&&u.apply(s,n),(u=c&&s[c])&&u.apply&&He(s)&&(t.result=u.apply(s,n),!1===t.result&&t.preventDefault());return t.type=p,r||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),n)||!He(i)||c&&fe.isFunction(i[p])&&!fe.isWindow(i)&&((a=i[c])&&(i[c]=null),fe.event.triggered=p,i[p](),fe.event.triggered=void 0,a&&(i[c]=a)),t.result}},simulate:function(e,t,n){var i=fe.extend(new fe.Event,n,{type:e,isSimulated:!0});fe.event.trigger(i,null,t)}}),fe.fn.extend({trigger:function(e,t){return this.each(function(){fe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return fe.event.trigger(e,t,n,!0)}}),fe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){fe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),fe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),he.focusin="onfocusin"in e,he.focusin||fe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){fe.event.simulate(t,e.target,fe.event.fix(e))};fe.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=Pe.access(i,t);r||i.addEventListener(e,n,!0),Pe.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Pe.access(i,t)-1;r?Pe.access(i,t,r):(i.removeEventListener(e,n,!0),Pe.remove(i,t))}}});var Dt=e.location,Tt=fe.now(),Et=/\?/;fe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||fe.error("Invalid XML: "+t),n};var xt=/\[\]$/,St=/\r?\n/g,kt=/^(?:submit|button|image|reset|file)$/i,Ot=/^(?:input|select|textarea|keygen)/i;fe.param=function(e,t){var n,i=[],r=function(e,t){var n=fe.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!fe.isPlainObject(e))fe.each(e,function(){r(this.name,this.value)});else for(n in e)Y(n,e[n],t,r);return i.join("&")},fe.fn.extend({serialize:function(){return fe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=fe.prop(this,"elements");return e?fe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!fe(this).is(":disabled")&&Ot.test(this.nodeName)&&!kt.test(e)&&(this.checked||!Ue.test(e))}).map(function(e,t){var n=fe(this).val();return null==n?null:Array.isArray(n)?fe.map(n,function(e){return{name:t.name,value:e.replace(St,"\r\n")}}):{name:t.name,value:n.replace(St,"\r\n")}}).get()}});var At=/%20/g,It=/#.*$/,Nt=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Lt=/^(?:GET|HEAD)$/,$t=/^\/\//,Mt={},Ft={},Rt="*/".concat("*"),jt=te.createElement("a");jt.href=Dt.href,fe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Dt.href,type:"GET",isLocal:Pt.test(Dt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":fe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?X(X(e,fe.ajaxSettings),t):X(fe.ajaxSettings,e)},ajaxPrefilter:G(Mt),ajaxTransport:G(Ft),ajax:function(t,n){function i(t,n,i,a){var c,h,p,_,w,C=n;u||(u=!0,l&&e.clearTimeout(l),r=void 0,s=a||"",D.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(_=J(f,D,i)),_=Z(f,_,D,c),c?(f.ifModified&&((w=D.getResponseHeader("Last-Modified"))&&(fe.lastModified[o]=w),(w=D.getResponseHeader("etag"))&&(fe.etag[o]=w)),204===t||"HEAD"===f.type?C="nocontent":304===t?C="notmodified":(C=_.state,h=_.data,p=_.error,c=!p)):(p=C,!t&&C||(C="error",t<0&&(t=0))),D.status=t,D.statusText=(n||C)+"",c?v.resolveWith(g,[h,C,D]):v.rejectWith(g,[D,C,p]),D.statusCode(b),b=void 0,d&&m.trigger(c?"ajaxSuccess":"ajaxError",[D,f,c?h:p]),y.fireWith(g,[D,C]),d&&(m.trigger("ajaxComplete",[D,f]),--fe.active||fe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,o,s,a,l,c,u,d,h,p,f=fe.ajaxSetup({},n),g=f.context||f,m=f.context&&(g.nodeType||g.jquery)?fe(g):fe.event,v=fe.Deferred(),y=fe.Callbacks("once memory"),b=f.statusCode||{},_={},w={},C="canceled",D={readyState:0,getResponseHeader:function(e){var t;if(u){if(!a)for(a={};t=Ht.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?s:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==u&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)D.always(e[D.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||C;return r&&r.abort(t),i(0,t),this}};if(v.promise(D),f.url=((t||f.url||Dt.href)+"").replace($t,Dt.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(Oe)||[""],null==f.crossDomain){c=te.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=jt.protocol+"//"+jt.host!=c.protocol+"//"+c.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=fe.param(f.data,f.traditional)),Q(Mt,f,n,D),u)return D;(d=fe.event&&f.global)&&0==fe.active++&&fe.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Lt.test(f.type),o=f.url.replace(It,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(At,"+")):(p=f.url.slice(o.length),f.data&&(o+=(Et.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(Nt,"$1"),p=(Et.test(o)?"&":"?")+"_="+Tt+++p),f.url=o+p),f.ifModified&&(fe.lastModified[o]&&D.setRequestHeader("If-Modified-Since",fe.lastModified[o]),fe.etag[o]&&D.setRequestHeader("If-None-Match",fe.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||n.contentType)&&D.setRequestHeader("Content-Type",f.contentType),D.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Rt+"; q=0.01":""):f.accepts["*"]);for(h in f.headers)D.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(g,D,f)||u))return D.abort();if(C="abort",y.add(f.complete),D.done(f.success),D.fail(f.error),r=Q(Ft,f,n,D)){if(D.readyState=1,d&&m.trigger("ajaxSend",[D,f]),u)return D;f.async&&f.timeout>0&&(l=e.setTimeout(function(){D.abort("timeout")},f.timeout));try{u=!1,r.send(_,i)}catch(e){if(u)throw e;i(-1,e)}}else i(-1,"No Transport");return D},getJSON:function(e,t,n){return fe.get(e,t,n,"json")},getScript:function(e,t){return fe.get(e,void 0,t,"script")}}),fe.each(["get","post"],function(e,t){fe[t]=function(e,n,i,r){return fe.isFunction(n)&&(r=r||i,i=n,n=void 0),fe.ajax(fe.extend({url:e,type:t,dataType:r,data:n,success:i},fe.isPlainObject(e)&&e))}}),fe._evalUrl=function(e){return fe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},fe.fn.extend({wrapAll:function(e){var t;return this[0]&&(fe.isFunction(e)&&(e=e.call(this[0])),t=fe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return fe.isFunction(e)?this.each(function(t){fe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=fe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe.isFunction(e);return this.each(function(n){fe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){fe(this).replaceWith(this.childNodes)}),this}}),fe.expr.pseudos.hidden=function(e){return!fe.expr.pseudos.visible(e)},fe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},fe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},Bt=fe.ajaxSettings.xhr();he.cors=!!Bt&&"withCredentials"in Bt,he.ajax=Bt=!!Bt,fe.ajaxTransport(function(t){var n,i;if(he.cors||Bt&&!t.crossDomain)return{send:function(r,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)a.setRequestHeader(s,r[s]);n=function(e){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Wt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),fe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),fe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return fe.globalEval(e),e}}}),fe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),fe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,r){t=fe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),te.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Vt=[],Ut=/(=)\?(?=&|$)|\?\?/;fe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||fe.expando+"_"+Tt++;return this[e]=!0,e}}),fe.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,s,a=!1!==t.jsonp&&(Ut.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ut.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=fe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ut,"$1"+r):!1!==t.jsonp&&(t.url+=(Et.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||fe.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){s=arguments},i.always(function(){void 0===o?fe(e).removeProp(r):e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,Vt.push(r)),s&&fe.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),he.createHTMLDocument=function(){var e=te.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),fe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,r,o;return t||(he.createHTMLDocument?(t=te.implementation.createHTMLDocument(""),i=t.createElement("base"),i.href=te.location.href,t.head.appendChild(i)):t=te),r=De.exec(e),o=!n&&[],r?[t.createElement(r[1])]:(r=_([e],t,o),o&&o.length&&fe(o).remove(),fe.merge([],r.childNodes))},fe.fn.load=function(e,t,n){var i,r,o,s=this,a=e.indexOf(" ");return a>-1&&(i=z(e.slice(a)),e=e.slice(0,a)),fe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&fe.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(i?fe("<div>").append(fe.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},fe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){fe.fn[t]=function(e){return this.on(t,e)}}),fe.expr.pseudos.animated=function(e){return fe.grep(fe.timers,function(t){return e===t.elem}).length},fe.offset={setOffset:function(e,t,n){var i,r,o,s,a,l,c=fe.css(e,"position"),u=fe(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),o=fe.css(e,"top"),l=fe.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(i=u.position(),s=i.top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),fe.isFunction(t)&&(t=t.call(e,n,fe.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+r),"using"in t?t.using.call(e,d):u.css(d)}},fe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){fe.offset.setOffset(this,e,t)});var t,n,i,r,o=this[0];return o?o.getClientRects().length?(i=o.getBoundingClientRect(),t=o.ownerDocument,n=t.documentElement,r=t.defaultView,{top:i.top+r.pageYOffset-n.clientTop,left:i.left+r.pageXOffset-n.clientLeft}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===fe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),r(e[0],"html")||(i=e.offset()),i={top:i.top+fe.css(e[0],"borderTopWidth",!0),left:i.left+fe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-fe.css(n,"marginTop",!0),left:t.left-i.left-fe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===fe.css(e,"position");)e=e.offsetParent;return e||Ge})}}),fe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;fe.fn[e]=function(i){return Ne(this,function(e,i,r){var o;return fe.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r?o?o[t]:e[i]:void(o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r)},e,i,arguments.length)}}),fe.each(["top","left"],function(e,t){fe.cssHooks[t]=H(he.pixelPosition,function(e,n){if(n)return n=N(e,t),ot.test(n)?fe(e).position()[t]+"px":n})}),fe.each({Height:"height",Width:"width"},function(e,t){fe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){fe.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return Ne(this,function(t,n,r){var o;return fe.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?fe.css(t,n,a):fe.style(t,n,r,a)},t,s?r:void 0,s)}})}),fe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),fe.holdReady=function(e){e?fe.readyWait++:fe.ready(!0)},fe.isArray=Array.isArray,fe.parseJSON=JSON.parse,fe.nodeName=r,"function"==typeof define&&define.amd&&define("jquery",[],function(){return fe});var qt=e.jQuery,zt=e.$;return fe.noConflict=function(t){return e.$===fe&&(e.$=zt),t&&e.jQuery===fe&&(e.jQuery=qt),fe},t||(e.jQuery=e.$=fe),fe}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Popper=t()}(this,function(){"use strict";function e(e){var t={};return e&&"[object Function]"===t.toString.call(e)}function t(e,t){if(1!==e.nodeType)return[];var n=window.getComputedStyle(e,null);return t?n[t]:n}function n(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function i(e){if(!e||-1!==["HTML","BODY","#document"].indexOf(e.nodeName))return window.document.body;var r=t(e),o=r.overflow,s=r.overflowX,a=r.overflowY;return/(auto|scroll)/.test(o+a+s)?e:i(n(e))}function r(e){var t=e.nodeName;return"BODY"!==t&&("HTML"===t||e.firstElementChild.offsetParent===e)}function o(e){return null!==e.parentNode?o(e.parentNode):e}function s(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?t:window.document.documentElement}function a(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return window.document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,l=n?t:e,c=document.createRange();c.setStart(i,0),c.setEnd(l,0);var u=c.commonAncestorContainer;if(e!==u&&t!==u||i.contains(l))return r(u)?u:s(u);var d=o(e);return d.host?a(d.host,t):a(e,o(t).host)}function l(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var i=window.document.documentElement;return(window.document.scrollingElement||i)[t]}return e[t]}function c(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=l(t,"top"),r=l(t,"left"),o=n?-1:1;return e.top+=i*o,e.bottom+=i*o,e.left+=r*o,e.right+=r*o,e}function u(e,t){var n="x"===t?"Left":"Top",i="Left"===n?"Right":"Bottom";return+e["border"+n+"Width"].split("px")[0]+ +e["border"+i+"Width"].split("px")[0]}function d(e,t,n,i){return Math.max(t["offset"+e],n["client"+e],n["offset"+e],J()?n["offset"+e]+i["margin"+("Height"===e?"Top":"Left")]+i["margin"+("Height"===e?"Bottom":"Right")]:0)}function h(){var e=window.document.body,t=window.document.documentElement,n=J()&&window.getComputedStyle(t);return{height:d("Height",e,t,n),width:d("Width",e,t,n)}}function p(e){return ne({},e,{right:e.left+e.width,bottom:e.top+e.height})}function f(e){var n={};if(J())try{n=e.getBoundingClientRect();var i=l(e,"top"),r=l(e,"left");n.top+=i,n.left+=r,n.bottom+=i,n.right+=r}catch(e){}else n=e.getBoundingClientRect();var o={left:n.left,top:n.top,width:n.right-n.left,height:n.bottom-n.top},s="HTML"===e.nodeName?h():{},a=s.width||e.clientWidth||o.right-o.left,c=s.height||e.clientHeight||o.bottom-o.top,d=e.offsetWidth-a,f=e.offsetHeight-c;if(d||f){var g=t(e);d-=u(g,"x"),f-=u(g,"y"),o.width-=d,o.height-=f}return p(o)}function g(e,n){var r=J(),o="HTML"===n.nodeName,s=f(e),a=f(n),l=i(e),u=t(n),d=+u.borderTopWidth.split("px")[0],h=+u.borderLeftWidth.split("px")[0],g=p({top:s.top-a.top-d,left:s.left-a.left-h,width:s.width,height:s.height});if(g.marginTop=0,g.marginLeft=0,!r&&o){var m=+u.marginTop.split("px")[0],v=+u.marginLeft.split("px")[0];g.top-=d-m,g.bottom-=d-m,g.left-=h-v,g.right-=h-v,g.marginTop=m,g.marginLeft=v}return(r?n.contains(l):n===l&&"BODY"!==l.nodeName)&&(g=c(g,n)),g}function m(e){var t=window.document.documentElement,n=g(e,t),i=Math.max(t.clientWidth,window.innerWidth||0),r=Math.max(t.clientHeight,window.innerHeight||0),o=l(t),s=l(t,"left");return p({top:o-n.top+n.marginTop,left:s-n.left+n.marginLeft,width:i,height:r})}function v(e){var i=e.nodeName;return"BODY"!==i&&"HTML"!==i&&("fixed"===t(e,"position")||v(n(e)))}function y(e,t,r,o){var s={top:0,left:0},l=a(e,t);if("viewport"===o)s=m(l);else{var c=void 0;"scrollParent"===o?"BODY"===(c=i(n(e))).nodeName&&(c=window.document.documentElement):c="window"===o?window.document.documentElement:o;var u=g(c,l);if("HTML"!==c.nodeName||v(l))s=u;else{var d=h(),p=d.height,f=d.width;s.top+=u.top-u.marginTop,s.bottom=p+u.top,s.left+=u.left-u.marginLeft,s.right=f+u.left}}return s.left+=r,s.top+=r,s.right-=r,s.bottom-=r,s}function b(e){return e.width*e.height}function _(e,t,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var s=y(n,i,o,r),a={top:{width:s.width,height:t.top-s.top},right:{width:s.right-t.right,height:s.height},bottom:{width:s.width,height:s.bottom-t.bottom},left:{width:t.left-s.left,height:s.height}},l=Object.keys(a).map(function(e){return ne({key:e},a[e],{area:b(a[e])})}).sort(function(e,t){return t.area-e.area}),c=l.filter(function(e){var t=e.width,i=e.height;return t>=n.clientWidth&&i>=n.clientHeight}),u=c.length>0?c[0].key:l[0].key,d=e.split("-")[1];return u+(d?"-"+d:"")}function w(e,t,n){return g(n,a(t,n))}function C(e){var t=window.getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),i=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+i,height:e.offsetHeight+n}}function D(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function T(e,t,n){n=n.split("-")[0];var i=C(e),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),s=o?"top":"left",a=o?"left":"top",l=o?"height":"width",c=o?"width":"height";return r[s]=t[s]+t[l]/2-i[l]/2,r[a]=n===a?t[a]-i[c]:t[D(a)],r}function E(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function x(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var i=E(e,function(e){return e[t]===n});return e.indexOf(i)}function S(t,n,i){return(void 0===i?t:t.slice(0,x(t,"name",i))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var i=t.function||t.fn;t.enabled&&e(i)&&(n.offsets.popper=p(n.offsets.popper),n.offsets.reference=p(n.offsets.reference),n=i(n,t))}),n}function k(){if(!this.state.isDestroyed){var e={instance:this,styles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=w(this.state,this.popper,this.reference),e.placement=_(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=T(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=S(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function O(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function A(e){for(var t=[!1,"ms","webkit","moz","o"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length-1;i++){var r=t[i],o=r?""+r+n:e;if(void 0!==window.document.body.style[o])return o}return null}function I(){return this.state.isDestroyed=!0,O(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[A("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function N(e,t,n,r){var o="BODY"===e.nodeName,s=o?window:e;s.addEventListener(t,n,{passive:!0}),o||N(i(s.parentNode),t,n,r),r.push(s)}function H(e,t,n,r){n.updateBound=r,window.addEventListener("resize",n.updateBound,{passive:!0});var o=i(e);return N(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function P(){this.state.eventsEnabled||(this.state=H(this.reference,this.options,this.state,this.scheduleUpdate))}function L(e,t){return window.removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t}function $(){this.state.eventsEnabled&&(window.cancelAnimationFrame(this.scheduleUpdate),this.state=L(this.reference,this.state))}function M(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function F(e,t){Object.keys(t).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&M(t[n])&&(i="px"),e.style[n]=t[n]+i})}function R(e,t){Object.keys(t).forEach(function(n){!1!==t[n]?e.setAttribute(n,t[n]):e.removeAttribute(n)})}function j(e,t,n){var i=E(e,function(e){return e.name===t}),r=!!i&&e.some(function(e){return e.name===n&&e.enabled&&e.order<i.order});if(!r){var o="`"+t+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}function W(e){return"end"===e?"start":"start"===e?"end":e}function B(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=re.indexOf(e),i=re.slice(n+1).concat(re.slice(0,n));return t?i.reverse():i}function V(e,t,n,i){var r=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],s=r[2];if(!o)return e;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return p(a)[t]/100*o}if("vh"===s||"vw"===s){return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}function U(e,t,n,i){var r=[0,0],o=-1!==["right","left"].indexOf(i),s=e.split(/(\+|\-)/).map(function(e){return e.trim()}),a=s.indexOf(E(s,function(e){return-1!==e.search(/,|\s/)}));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==a?[s.slice(0,a).concat([s[a].split(l)[0]]),[s[a].split(l)[1]].concat(s.slice(a+1))]:[s];return(c=c.map(function(e,i){var r=(1===i?!o:o)?"height":"width",s=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,s=!0,e):s?(e[e.length-1]+=t,s=!1,e):e.concat(t)},[]).map(function(e){return V(e,r,t,n)})})).forEach(function(e,t){e.forEach(function(n,i){M(n)&&(r[t]+=n*("-"===e[i-1]?-1:1))})}),r}for(var q=["native code","[object MutationObserverConstructor]"],z="undefined"!=typeof window,K=["Edge","Trident","Firefox"],Y=0,G=0;G<K.length;G+=1)if(z&&navigator.userAgent.indexOf(K[G])>=0){Y=1;break}var Q=z&&function(e){return q.some(function(t){return(e||"").toString().indexOf(t)>-1})}(window.MutationObserver)?function(e){var t=!1,n=0,i=document.createElement("span");return new MutationObserver(function(){e(),t=!1}).observe(i,{attributes:!0}),function(){t||(t=!0,i.setAttribute("x-index",n),n+=1)}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},Y))}},X=void 0,J=function(){return void 0===X&&(X=-1!==navigator.appVersion.indexOf("MSIE 10")),X},Z=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},ee=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),te=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},ne=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},ie=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],re=ie.slice(3),oe={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"},se={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],i=t.split("-")[1];if(i){var r=e.offsets,o=r.reference,s=r.popper,a=-1!==["bottom","top"].indexOf(n),l=a?"left":"top",c=a?"width":"height",u={start:te({},l,o[l]),end:te({},l,o[l]+o[c]-s[c])};e.offsets.popper=ne({},s,u[i])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,i=e.placement,r=e.offsets,o=r.popper,s=r.reference,a=i.split("-")[0],l=void 0;return l=M(+n)?[+n,0]:U(n,o,s,a),"left"===a?(o.top+=l[0],o.left-=l[1]):"right"===a?(o.top+=l[0],o.left+=l[1]):"top"===a?(o.left+=l[0],o.top-=l[1]):"bottom"===a&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||s(e.instance.popper);e.instance.reference===n&&(n=s(n));var i=y(e.instance.popper,e.instance.reference,t.padding,n);t.boundaries=i;var r=t.priority,o=e.offsets.popper,a={primary:function(e){var n=o[e];return o[e]<i[e]&&!t.escapeWithReference&&(n=Math.max(o[e],i[e])),te({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=o[n];return o[e]>i[e]&&!t.escapeWithReference&&(r=Math.min(o[n],i[e]-("right"===e?o.width:o.height))),te({},n,r)}};return r.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";o=ne({},o,a[t](e))}),e.offsets.popper=o,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,i=t.reference,r=e.placement.split("-")[0],o=Math.floor,s=-1!==["top","bottom"].indexOf(r),a=s?"right":"bottom",l=s?"left":"top",c=s?"width":"height";return n[a]<o(i[l])&&(e.offsets.popper[l]=o(i[l])-n[c]),n[l]>o(i[a])&&(e.offsets.popper[l]=o(i[a])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){if(!j(e.instance.modifiers,"arrow","keepTogether"))return e;var n=t.element;if("string"==typeof n){if(!(n=e.instance.popper.querySelector(n)))return e}else if(!e.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],r=e.offsets,o=r.popper,s=r.reference,a=-1!==["left","right"].indexOf(i),l=a?"height":"width",c=a?"top":"left",u=a?"left":"top",d=a?"bottom":"right",h=C(n)[l];s[d]-h<o[c]&&(e.offsets.popper[c]-=o[c]-(s[d]-h)),s[c]+h>o[d]&&(e.offsets.popper[c]+=s[c]+h-o[d]);var f=s[c]+s[l]/2-h/2-p(e.offsets.popper)[c];return f=Math.max(Math.min(o[l]-h,f),0),e.arrowElement=n,e.offsets.arrow={},e.offsets.arrow[c]=Math.round(f),e.offsets.arrow[u]="",e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(O(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=y(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),i=e.placement.split("-")[0],r=D(i),o=e.placement.split("-")[1]||"",s=[];switch(t.behavior){case oe.FLIP:s=[i,r];break;case oe.CLOCKWISE:s=B(i);break;case oe.COUNTERCLOCKWISE:s=B(i,!0);break;default:s=t.behavior}return s.forEach(function(a,l){if(i!==a||s.length===l+1)return e;i=e.placement.split("-")[0],r=D(i);var c=e.offsets.popper,u=e.offsets.reference,d=Math.floor,h="left"===i&&d(c.right)>d(u.left)||"right"===i&&d(c.left)<d(u.right)||"top"===i&&d(c.bottom)>d(u.top)||"bottom"===i&&d(c.top)<d(u.bottom),p=d(c.left)<d(n.left),f=d(c.right)>d(n.right),g=d(c.top)<d(n.top),m=d(c.bottom)>d(n.bottom),v="left"===i&&p||"right"===i&&f||"top"===i&&g||"bottom"===i&&m,y=-1!==["top","bottom"].indexOf(i),b=!!t.flipVariations&&(y&&"start"===o&&p||y&&"end"===o&&f||!y&&"start"===o&&g||!y&&"end"===o&&m);(h||v||b)&&(e.flipped=!0,(h||v)&&(i=s[l+1]),b&&(o=W(o)),e.placement=i+(o?"-"+o:""),e.offsets.popper=ne({},e.offsets.popper,T(e.instance.popper,e.offsets.reference,e.placement)),e=S(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],i=e.offsets,r=i.popper,o=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return r[s?"left":"top"]=o[t]-(a?r[s?"width":"height"]:0),e.placement=D(t),e.offsets.popper=p(r),e}},hide:{order:800,enabled:!0,fn:function(e){if(!j(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=E(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,i=t.y,r=e.offsets.popper,o=E(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,l=f(s(e.instance.popper)),c={position:r.position},u={left:Math.floor(r.left),top:Math.floor(r.top),bottom:Math.floor(r.bottom),right:Math.floor(r.right)},d="bottom"===n?"top":"bottom",h="right"===i?"left":"right",p=A("transform"),g=void 0,m=void 0;if(m="bottom"===d?-l.height+u.bottom:u.top,g="right"===h?-l.width+u.right:u.left,a&&p)c[p]="translate3d("+g+"px, "+m+"px, 0)",c[d]=0,c[h]=0,c.willChange="transform";else{var v="bottom"===d?-1:1,y="right"===h?-1:1;c[d]=m*v,c[h]=g*y,c.willChange=d+", "+h}var b={"x-placement":e.placement};return e.attributes=ne({},b,e.attributes),e.styles=ne({},c,e.styles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){return F(e.instance.popper,e.styles),R(e.instance.popper,e.attributes),e.offsets.arrow&&F(e.arrowElement,e.offsets.arrow),e},onLoad:function(e,t,n,i,r){var o=w(r,t,e),s=_(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",s),F(t,{position:"absolute"}),n},gpuAcceleration:void 0}}},ae=function(){function t(n,i){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Z(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=Q(this.update.bind(this)),this.options=ne({},t.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=n.jquery?n[0]:n,this.popper=i.jquery?i[0]:i,this.options.modifiers={},Object.keys(ne({},t.Defaults.modifiers,o.modifiers)).forEach(function(e){r.options.modifiers[e]=ne({},t.Defaults.modifiers[e]||{},o.modifiers?o.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return ne({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(t){t.enabled&&e(t.onLoad)&&t.onLoad(r.reference,r.popper,r.options,t,r.state)}),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return ee(t,[{key:"update",value:function(){return k.call(this)}},{key:"destroy",value:function(){return I.call(this)}},{key:"enableEventListeners",value:function(){return P.call(this)}},{key:"disableEventListeners",value:function(){return $.call(this)}}]),t}();return ae.Utils=("undefined"!=typeof window?window:global).PopperUtils,ae.placements=ie,ae.Defaults=se,ae});var _typeof2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");!function(e){var t=jQuery.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1==t[0]&&9==t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(),function(){function e(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":_typeof2(t))&&"function"!=typeof t?e:t}function t(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":_typeof2(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i="function"==typeof Symbol&&"symbol"===_typeof2(Symbol.iterator)?function(e){return void 0===e?"undefined":_typeof2(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":void 0===e?"undefined":_typeof2(e)},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(e){function t(e){return{}.toString.call(e).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function n(e){return(e[0]||e).nodeType}function i(){return{bindType:s.end,delegateType:s.end,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}}function r(){if(window.QUnit)return!1;var e=document.createElement("bootstrap");for(var t in a)if(void 0!==e.style[t])return{end:a[t]};return!1}function o(t){var n=this,i=!1;return e(this).one(l.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||l.triggerTransitionEnd(n)},t),this}var s=!1,a={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},l={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(t){var n=t.getAttribute("data-target");n&&"#"!==n||(n=t.getAttribute("href")||"");try{return e(n).length>0?n:null}catch(e){return null}},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(t){e(t).trigger(s.end)},supportsTransitionEnd:function(){return Boolean(s)},typeCheckConfig:function(e,i,r){for(var o in r)if(r.hasOwnProperty(o)){var s=r[o],a=i[o],l=a&&n(a)?"element":t(a);if(!new RegExp(s).test(l))throw new Error(e.toUpperCase()+': Option "'+o+'" provided type "'+l+'" but expected type "'+s+'".')}}};return s=r(),e.fn.emulateTransitionEnd=o,l.supportsTransitionEnd()&&(e.event.special[l.TRANSITION_END]=i()),l}(jQuery),s=(function(e){var t="alert",i=e.fn[t],s={DISMISS:'[data-dismiss="alert"]'},a={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},l={ALERT:"alert",FADE:"fade",SHOW:"show"},c=function(){function t(e){n(this,t),this._element=e}return t.prototype.close=function(e){e=e||this._element;var t=this._getRootElement(e);this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},t.prototype.dispose=function(){e.removeData(this._element,"bs.alert"),this._element=null},t.prototype._getRootElement=function(t){var n=o.getSelectorFromElement(t),i=!1;return n&&(i=e(n)[0]),i||(i=e(t).closest("."+l.ALERT)[0]),i},t.prototype._triggerCloseEvent=function(t){var n=e.Event(a.CLOSE);return e(t).trigger(n),n},t.prototype._removeElement=function(t){var n=this;e(t).removeClass(l.SHOW),o.supportsTransitionEnd()&&e(t).hasClass(l.FADE)?e(t).one(o.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(150):this._destroyElement(t)},t.prototype._destroyElement=function(t){e(t).detach().trigger(a.CLOSED).remove()},t._jQueryInterface=function(n){return this.each(function(){var i=e(this),r=i.data("bs.alert");r||(r=new t(this),i.data("bs.alert",r)),"close"===n&&r[n](this)})},t._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},r(t,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),t}();e(document).on(a.CLICK_DATA_API,s.DISMISS,c._handleDismiss(new c)),e.fn[t]=c._jQueryInterface,e.fn[t].Constructor=c,e.fn[t].noConflict=function(){return e.fn[t]=i,c._jQueryInterface}}(jQuery),function(e){var t="button",i=e.fn[t],o={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},s={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},a={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},l=function(){function t(e){n(this,t),this._element=e}return t.prototype.toggle=function(){var t=!0,n=!0,i=e(this._element).closest(s.DATA_TOGGLE)[0];if(i){var r=e(this._element).find(s.INPUT)[0];if(r){if("radio"===r.type)if(r.checked&&e(this._element).hasClass(o.ACTIVE))t=!1;else{var a=e(i).find(s.ACTIVE)[0];a&&e(a).removeClass(o.ACTIVE)}if(t){if(r.hasAttribute("disabled")||i.hasAttribute("disabled")||r.classList.contains("disabled")||i.classList.contains("disabled"))return;r.checked=!e(this._element).hasClass(o.ACTIVE),e(r).trigger("change")}r.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!e(this._element).hasClass(o.ACTIVE)),t&&e(this._element).toggleClass(o.ACTIVE)},t.prototype.dispose=function(){e.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(n){return this.each(function(){var i=e(this).data("bs.button");i||(i=new t(this),e(this).data("bs.button",i)),"toggle"===n&&i[n]()})},r(t,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),t}();e(document).on(a.CLICK_DATA_API,s.DATA_TOGGLE_CARROT,function(t){t.preventDefault();var n=t.target;e(n).hasClass(o.BUTTON)||(n=e(n).closest(s.BUTTON)),l._jQueryInterface.call(e(n),"toggle")}).on(a.FOCUS_BLUR_DATA_API,s.DATA_TOGGLE_CARROT,function(t){var n=e(t.target).closest(s.BUTTON)[0];e(n).toggleClass(o.FOCUS,/^focus(in)?$/.test(t.type))}),e.fn[t]=l._jQueryInterface,e.fn[t].Constructor=l,e.fn[t].noConflict=function(){return e.fn[t]=i,l._jQueryInterface}}(jQuery),function(e){var t="carousel",s="bs.carousel",a="."+s,l=e.fn[t],c={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},u={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},d={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},h={SLIDE:"slide"+a,SLID:"slid"+a,KEYDOWN:"keydown"+a,MOUSEENTER:"mouseenter"+a,MOUSELEAVE:"mouseleave"+a,TOUCHEND:"touchend"+a,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},p={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},f={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},g=function(){function l(t,i){n(this,l),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(i),this._element=e(t)[0],this._indicatorsElement=e(this._element).find(f.INDICATORS)[0],this._addEventListeners()}return l.prototype.next=function(){this._isSliding||this._slide(d.NEXT)},l.prototype.nextWhenVisible=function(){document.hidden||this.next()},l.prototype.prev=function(){this._isSliding||this._slide(d.PREV)},l.prototype.pause=function(t){t||(this._isPaused=!0),e(this._element).find(f.NEXT_PREV)[0]&&o.supportsTransitionEnd()&&(o.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},l.prototype.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},l.prototype.to=function(t){var n=this;this._activeElement=e(this._element).find(f.ACTIVE_ITEM)[0];var i=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(h.SLID,function(){return n.to(t)});else{if(i===t)return this.pause(),void this.cycle();var r=t>i?d.NEXT:d.PREV;this._slide(r,this._items[t])}},l.prototype.dispose=function(){e(this._element).off(a),e.removeData(this._element,s),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},l.prototype._getConfig=function(n){return n=e.extend({},c,n),o.typeCheckConfig(t,n,u),n},l.prototype._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(h.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(e(this._element).on(h.MOUSEENTER,function(e){return t.pause(e)}).on(h.MOUSELEAVE,function(e){return t.cycle(e)}),"ontouchstart"in document.documentElement&&e(this._element).on(h.TOUCHEND,function(){t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(e){return t.cycle(e)},500+t._config.interval)}))},l.prototype._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next();break;default:return}},l.prototype._getItemIndex=function(t){return this._items=e.makeArray(e(t).parent().find(f.ITEM)),this._items.indexOf(t)},l.prototype._getItemByDirection=function(e,t){var n=e===d.NEXT,i=e===d.PREV,r=this._getItemIndex(t),o=this._items.length-1;if((i&&0===r||n&&r===o)&&!this._config.wrap)return t;var s=(r+(e===d.PREV?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},l.prototype._triggerSlideEvent=function(t,n){var i=this._getItemIndex(t),r=this._getItemIndex(e(this._element).find(f.ACTIVE_ITEM)[0]),o=e.Event(h.SLIDE,{relatedTarget:t,direction:n,from:r,to:i});return e(this._element).trigger(o),o},l.prototype._setActiveIndicatorElement=function(t){if(this._indicatorsElement){e(this._indicatorsElement).find(f.ACTIVE).removeClass(p.ACTIVE);var n=this._indicatorsElement.children[this._getItemIndex(t)];n&&e(n).addClass(p.ACTIVE)}},l.prototype._slide=function(t,n){var i=this,r=e(this._element).find(f.ACTIVE_ITEM)[0],s=this._getItemIndex(r),a=n||r&&this._getItemByDirection(t,r),l=this._getItemIndex(a),c=Boolean(this._interval),u=void 0,g=void 0,m=void 0;if(t===d.NEXT?(u=p.LEFT,g=p.NEXT,m=d.LEFT):(u=p.RIGHT,g=p.PREV,m=d.RIGHT),a&&e(a).hasClass(p.ACTIVE))this._isSliding=!1;else if(!this._triggerSlideEvent(a,m).isDefaultPrevented()&&r&&a){this._isSliding=!0,c&&this.pause(),this._setActiveIndicatorElement(a);var v=e.Event(h.SLID,{relatedTarget:a,direction:m,from:s,to:l});o.supportsTransitionEnd()&&e(this._element).hasClass(p.SLIDE)?(e(a).addClass(g),o.reflow(a),e(r).addClass(u),e(a).addClass(u),e(r).one(o.TRANSITION_END,function(){e(a).removeClass(u+" "+g).addClass(p.ACTIVE),e(r).removeClass(p.ACTIVE+" "+g+" "+u),i._isSliding=!1,setTimeout(function(){return e(i._element).trigger(v)},0)}).emulateTransitionEnd(600)):(e(r).removeClass(p.ACTIVE),e(a).addClass(p.ACTIVE),this._isSliding=!1,e(this._element).trigger(v)),c&&this.cycle()}},l._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(s),r=e.extend({},c,e(this).data());"object"===(void 0===t?"undefined":i(t))&&e.extend(r,t);var o="string"==typeof t?t:r.slide;if(n||(n=new l(this,r),e(this).data(s,n)),"number"==typeof t)n.to(t);else if("string"==typeof o){if(void 0===n[o])throw new Error('No method named "'+o+'"');n[o]()}else r.interval&&(n.pause(),n.cycle())})},l._dataApiClickHandler=function(t){var n=o.getSelectorFromElement(this);if(n){var i=e(n)[0];if(i&&e(i).hasClass(p.CAROUSEL)){var r=e.extend({},e(i).data(),e(this).data()),a=this.getAttribute("data-slide-to");a&&(r.interval=!1),l._jQueryInterface.call(e(i),r),a&&e(i).data(s).to(a),t.preventDefault()}}},r(l,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return c}}]),l}();e(document).on(h.CLICK_DATA_API,f.DATA_SLIDE,g._dataApiClickHandler),e(window).on(h.LOAD_DATA_API,function(){e(f.DATA_RIDE).each(function(){var t=e(this);g._jQueryInterface.call(t,t.data())})}),e.fn[t]=g._jQueryInterface,e.fn[t].Constructor=g,e.fn[t].noConflict=function(){return e.fn[t]=l,g._jQueryInterface}}(jQuery),function(e){var t="collapse",s="bs.collapse",a=e.fn[t],l={toggle:!0,parent:""},c={toggle:"boolean",parent:"string"},u={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},d={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},h={WIDTH:"width",HEIGHT:"height"},p={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},f=function(){function a(t,i){n(this,a),this._isTransitioning=!1,this._element=t,this._config=this._getConfig(i),this._triggerArray=e.makeArray(e('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var r=e(p.DATA_TOGGLE),s=0;s<r.length;s++){var l=r[s],c=o.getSelectorFromElement(l);null!==c&&e(c).filter(t).length>0&&this._triggerArray.push(l)}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return a.prototype.toggle=function(){e(this._element).hasClass(d.SHOW)?this.hide():this.show()},a.prototype.show=function(){var t=this;if(!this._isTransitioning&&!e(this._element).hasClass(d.SHOW)){var n=void 0,i=void 0;if(this._parent&&((n=e.makeArray(e(this._parent).children().children(p.ACTIVES))).length||(n=null)),!(n&&(i=e(n).data(s))&&i._isTransitioning)){var r=e.Event(u.SHOW);if(e(this._element).trigger(r),!r.isDefaultPrevented()){n&&(a._jQueryInterface.call(e(n),"hide"),i||e(n).data(s,null));var l=this._getDimension();e(this._element).removeClass(d.COLLAPSE).addClass(d.COLLAPSING),this._element.style[l]=0,this._triggerArray.length&&e(this._triggerArray).removeClass(d.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var c=function(){e(t._element).removeClass(d.COLLAPSING).addClass(d.COLLAPSE).addClass(d.SHOW),t._element.style[l]="",t.setTransitioning(!1),e(t._element).trigger(u.SHOWN)};if(o.supportsTransitionEnd()){var h="scroll"+(l[0].toUpperCase()+l.slice(1));e(this._element).one(o.TRANSITION_END,c).emulateTransitionEnd(600),this._element.style[l]=this._element[h]+"px"}else c()}}}},a.prototype.hide=function(){var t=this;if(!this._isTransitioning&&e(this._element).hasClass(d.SHOW)){var n=e.Event(u.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var i=this._getDimension();if(this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",o.reflow(this._element),e(this._element).addClass(d.COLLAPSING).removeClass(d.COLLAPSE).removeClass(d.SHOW),this._triggerArray.length)for(var r=0;r<this._triggerArray.length;r++){var s=this._triggerArray[r],a=o.getSelectorFromElement(s);null!==a&&(e(a).hasClass(d.SHOW)||e(s).addClass(d.COLLAPSED).attr("aria-expanded",!1))}this.setTransitioning(!0);var l=function(){t.setTransitioning(!1),e(t._element).removeClass(d.COLLAPSING).addClass(d.COLLAPSE).trigger(u.HIDDEN)};this._element.style[i]="",o.supportsTransitionEnd()?e(this._element).one(o.TRANSITION_END,l).emulateTransitionEnd(600):l()}}},a.prototype.setTransitioning=function(e){this._isTransitioning=e},a.prototype.dispose=function(){e.removeData(this._element,s),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},a.prototype._getConfig=function(n){return n=e.extend({},l,n),n.toggle=Boolean(n.toggle),o.typeCheckConfig(t,n,c),n},a.prototype._getDimension=function(){return e(this._element).hasClass(h.WIDTH)?h.WIDTH:h.HEIGHT},a.prototype._getParent=function(){var t=this,n=e(this._config.parent)[0],i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return e(n).find(i).each(function(e,n){t._addAriaAndCollapsedClass(a._getTargetFromElement(n),[n])}),n},a.prototype._addAriaAndCollapsedClass=function(t,n){if(t){var i=e(t).hasClass(d.SHOW);n.length&&e(n).toggleClass(d.COLLAPSED,!i).attr("aria-expanded",i)}},a._getTargetFromElement=function(t){var n=o.getSelectorFromElement(t);return n?e(n)[0]:null},a._jQueryInterface=function(t){return this.each(function(){var n=e(this),r=n.data(s),o=e.extend({},l,n.data(),"object"===(void 0===t?"undefined":i(t))&&t);if(!r&&o.toggle&&/show|hide/.test(t)&&(o.toggle=!1),r||(r=new a(this,o),n.data(s,r)),"string"==typeof t){if(void 0===r[t])throw new Error('No method named "'+t+'"');r[t]()}})},r(a,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return l}}]),a}();e(document).on(u.CLICK_DATA_API,p.DATA_TOGGLE,function(t){/input|textarea/i.test(t.target.tagName)||t.preventDefault();var n=e(this),i=o.getSelectorFromElement(this);e(i).each(function(){var t=e(this),i=t.data(s)?"toggle":n.data();f._jQueryInterface.call(t,i)})}),e.fn[t]=f._jQueryInterface,e.fn[t].Constructor=f,e.fn[t].noConflict=function(){return e.fn[t]=a,f._jQueryInterface}}(jQuery),function(e){if("undefined"==typeof Popper)throw new Error("Bootstrap dropdown require Popper.js (https://popper.js.org)");var t="dropdown",s="bs.dropdown",a="."+s,l=e.fn[t],c=new RegExp("38|40|27"),u={HIDE:"hide"+a,HIDDEN:"hidden"+a,SHOW:"show"+a,SHOWN:"shown"+a,CLICK:"click"+a,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},d={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left"},h={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled)"},p={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end"},f={placement:p.BOTTOM,offset:0,flip:!0},g={placement:"string",offset:"(number|string)",flip:"boolean"},m=function(){function l(e,t){n(this,l),this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}return l.prototype.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(d.DISABLED)){var t=l._getParentFromElement(this._element),n=e(this._menu).hasClass(d.SHOW);if(l._clearMenus(),!n){var i={relatedTarget:this._element},r=e.Event(u.SHOW,i);if(e(t).trigger(r),!r.isDefaultPrevented()){var o=this._element;e(t).hasClass(d.DROPUP)&&(e(this._menu).hasClass(d.MENULEFT)||e(this._menu).hasClass(d.MENURIGHT))&&(o=t),this._popper=new Popper(o,this._menu,this._getPopperConfig()),"ontouchstart"in document.documentElement&&!e(t).closest(h.NAVBAR_NAV).length&&e("body").children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(d.SHOW),e(t).toggleClass(d.SHOW).trigger(e.Event(u.SHOWN,i))}}}},l.prototype.dispose=function(){e.removeData(this._element,s),e(this._element).off(a),this._element=null,this._menu=null,null!==this._popper&&this._popper.destroy(),this._popper=null},l.prototype.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},l.prototype._addEventListeners=function(){var t=this;e(this._element).on(u.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},l.prototype._getConfig=function(n){var i=e(this._element).data();return void 0!==i.placement&&(i.placement=p[i.placement.toUpperCase()]),n=e.extend({},this.constructor.Default,e(this._element).data(),n),o.typeCheckConfig(t,n,this.constructor.DefaultType),n},l.prototype._getMenuElement=function(){if(!this._menu){var t=l._getParentFromElement(this._element);this._menu=e(t).find(h.MENU)[0]}return this._menu},l.prototype._getPlacement=function(){var t=e(this._element).parent(),n=this._config.placement;return t.hasClass(d.DROPUP)||this._config.placement===p.TOP?(n=p.TOP,e(this._menu).hasClass(d.MENURIGHT)&&(n=p.TOPEND)):e(this._menu).hasClass(d.MENURIGHT)&&(n=p.BOTTOMEND),n},l.prototype._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},l.prototype._getPopperConfig=function(){var e={placement:this._getPlacement(),modifiers:{offset:{offset:this._config.offset},flip:{enabled:this._config.flip}}};return this._inNavbar&&(e.modifiers.applyStyle={enabled:!this._inNavbar}),e},l._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(s),r="object"===(void 0===t?"undefined":i(t))?t:null;if(n||(n=new l(this,r),e(this).data(s,n)),"string"==typeof t){if(void 0===n[t])throw new Error('No method named "'+t+'"');n[t]()}})},l._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var n=e.makeArray(e(h.DATA_TOGGLE)),i=0;i<n.length;i++){var r=l._getParentFromElement(n[i]),o=e(n[i]).data(s),a={relatedTarget:n[i]};if(o){var c=o._menu;if(e(r).hasClass(d.SHOW)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&e.contains(r,t.target))){var p=e.Event(u.HIDE,a);e(r).trigger(p),p.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e("body").children().off("mouseover",null,e.noop),n[i].setAttribute("aria-expanded","false"),e(c).removeClass(d.SHOW),e(r).removeClass(d.SHOW).trigger(e.Event(u.HIDDEN,a)))}}}},l._getParentFromElement=function(t){var n=void 0,i=o.getSelectorFromElement(t);return i&&(n=e(i)[0]),n||t.parentNode},l._dataApiKeydownHandler=function(t){if(!(!c.test(t.which)||/button/i.test(t.target.tagName)&&32===t.which||/input|textarea/i.test(t.target.tagName)||(t.preventDefault(),t.stopPropagation(),this.disabled||e(this).hasClass(d.DISABLED)))){var n=l._getParentFromElement(this),i=e(n).hasClass(d.SHOW);if((i||27===t.which&&32===t.which)&&(!i||27!==t.which&&32!==t.which)){var r=e(n).find(h.VISIBLE_ITEMS).get();if(r.length){var o=r.indexOf(t.target);38===t.which&&o>0&&o--,40===t.which&&o<r.length-1&&o++,o<0&&(o=0),r[o].focus()}}else{if(27===t.which){var s=e(n).find(h.DATA_TOGGLE)[0];e(s).trigger("focus")}e(this).trigger("click")}}},r(l,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return f}},{key:"DefaultType",get:function(){return g}}]),l}();e(document).on(u.KEYDOWN_DATA_API,h.DATA_TOGGLE,m._dataApiKeydownHandler).on(u.KEYDOWN_DATA_API,h.MENU,m._dataApiKeydownHandler).on(u.CLICK_DATA_API+" "+u.KEYUP_DATA_API,m._clearMenus).on(u.CLICK_DATA_API,h.DATA_TOGGLE,function(t){t.preventDefault(),t.stopPropagation(),m._jQueryInterface.call(e(this),"toggle")}).on(u.CLICK_DATA_API,h.FORM_CHILD,function(e){e.stopPropagation()}),e.fn[t]=m._jQueryInterface,e.fn[t].Constructor=m,e.fn[t].noConflict=function(){return e.fn[t]=l,m._jQueryInterface}}(jQuery),function(e){var t="modal",s=".bs.modal",a=e.fn[t],l={backdrop:!0,keyboard:!0,focus:!0,show:!0},c={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},u={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},d={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},h={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},p=function(){function a(t,i){n(this,a),this._config=this._getConfig(i),this._element=t,this._dialog=e(t).find(h.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return a.prototype.toggle=function(e){return this._isShown?this.hide():this.show(e)},a.prototype.show=function(t){var n=this;if(!this._isTransitioning){o.supportsTransitionEnd()&&e(this._element).hasClass(d.FADE)&&(this._isTransitioning=!0);var i=e.Event(u.SHOW,{relatedTarget:t});e(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),e(document.body).addClass(d.OPEN),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(u.CLICK_DISMISS,h.DATA_DISMISS,function(e){return n.hide(e)}),e(this._dialog).on(u.MOUSEDOWN_DISMISS,function(){e(n._element).one(u.MOUSEUP_DISMISS,function(t){e(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(t)}))}},a.prototype.hide=function(t){var n=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var i=o.supportsTransitionEnd()&&e(this._element).hasClass(d.FADE);i&&(this._isTransitioning=!0);var r=e.Event(u.HIDE);e(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()&&(this._isShown=!1,this._setEscapeEvent(),this._setResizeEvent(),e(document).off(u.FOCUSIN),e(this._element).removeClass(d.SHOW),e(this._element).off(u.CLICK_DISMISS),e(this._dialog).off(u.MOUSEDOWN_DISMISS),i?e(this._element).one(o.TRANSITION_END,function(e){return n._hideModal(e)}).emulateTransitionEnd(300):this._hideModal())}},a.prototype.dispose=function(){e.removeData(this._element,"bs.modal"),e(window,document,this._element,this._backdrop).off(s),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},a.prototype.handleUpdate=function(){this._adjustDialog()},a.prototype._getConfig=function(n){return n=e.extend({},l,n),o.typeCheckConfig(t,n,c),n},a.prototype._showElement=function(t){var n=this,i=o.supportsTransitionEnd()&&e(this._element).hasClass(d.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&o.reflow(this._element),e(this._element).addClass(d.SHOW),this._config.focus&&this._enforceFocus();var r=e.Event(u.SHOWN,{relatedTarget:t}),s=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,e(n._element).trigger(r)};i?e(this._dialog).one(o.TRANSITION_END,s).emulateTransitionEnd(300):s()},a.prototype._enforceFocus=function(){var t=this;e(document).off(u.FOCUSIN).on(u.FOCUSIN,function(n){document===n.target||t._element===n.target||e(t._element).has(n.target).length||t._element.focus()})},a.prototype._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(u.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||e(this._element).off(u.KEYDOWN_DISMISS)},a.prototype._setResizeEvent=function(){var t=this;this._isShown?e(window).on(u.RESIZE,function(e){return t.handleUpdate(e)}):e(window).off(u.RESIZE)},a.prototype._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){e(document.body).removeClass(d.OPEN),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(u.HIDDEN)})},a.prototype._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},a.prototype._showBackdrop=function(t){var n=this,i=e(this._element).hasClass(d.FADE)?d.FADE:"";if(this._isShown&&this._config.backdrop){var r=o.supportsTransitionEnd()&&i;if(this._backdrop=document.createElement("div"),this._backdrop.className=d.BACKDROP,i&&e(this._backdrop).addClass(i),e(this._backdrop).appendTo(document.body),e(this._element).on(u.CLICK_DISMISS,function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),r&&o.reflow(this._backdrop),e(this._backdrop).addClass(d.SHOW),!t)return;if(!r)return void t();e(this._backdrop).one(o.TRANSITION_END,t).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(d.SHOW);var s=function(){n._removeBackdrop(),t&&t()};o.supportsTransitionEnd()&&e(this._element).hasClass(d.FADE)?e(this._backdrop).one(o.TRANSITION_END,s).emulateTransitionEnd(150):s()}else t&&t()},a.prototype._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},a.prototype._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},a.prototype._checkScrollbar=function(){this._isBodyOverflowing=document.body.clientWidth<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},a.prototype._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){e(h.FIXED_CONTENT).each(function(n,i){var r=e(i)[0].style.paddingRight,o=e(i).css("padding-right");e(i).data("padding-right",r).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")}),e(h.NAVBAR_TOGGLER).each(function(n,i){var r=e(i)[0].style.marginRight,o=e(i).css("margin-right");e(i).data("margin-right",r).css("margin-right",parseFloat(o)+t._scrollbarWidth+"px")});var n=document.body.style.paddingRight,i=e("body").css("padding-right");e("body").data("padding-right",n).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px")}},a.prototype._resetScrollbar=function(){e(h.FIXED_CONTENT).each(function(t,n){var i=e(n).data("padding-right");void 0!==i&&e(n).css("padding-right",i).removeData("padding-right")}),e(h.NAVBAR_TOGGLER).each(function(t,n){var i=e(n).data("margin-right");void 0!==i&&e(n).css("margin-right",i).removeData("margin-right")});var t=e("body").data("padding-right");void 0!==t&&e("body").css("padding-right",t).removeData("padding-right")},a.prototype._getScrollbarWidth=function(){var e=document.createElement("div");e.className=d.SCROLLBAR_MEASURER,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},a._jQueryInterface=function(t,n){return this.each(function(){var r=e(this).data("bs.modal"),o=e.extend({},a.Default,e(this).data(),"object"===(void 0===t?"undefined":i(t))&&t);if(r||(r=new a(this,o),e(this).data("bs.modal",r)),"string"==typeof t){if(void 0===r[t])throw new Error('No method named "'+t+'"');r[t](n)}else o.show&&r.show(n)})},r(a,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return l}}]),a}();e(document).on(u.CLICK_DATA_API,h.DATA_TOGGLE,function(t){var n=this,i=void 0,r=o.getSelectorFromElement(this);r&&(i=e(r)[0]);var s=e(i).data("bs.modal")?"toggle":e.extend({},e(i).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var a=e(i).one(u.SHOW,function(t){t.isDefaultPrevented()||a.one(u.HIDDEN,function(){e(n).is(":visible")&&n.focus()})});p._jQueryInterface.call(e(i),s,this)}),e.fn[t]=p._jQueryInterface,e.fn[t].Constructor=p,e.fn[t].noConflict=function(){return e.fn[t]=a,p._jQueryInterface}}(jQuery),function(e){var t="scrollspy",s=e.fn[t],a={offset:10,method:"auto",target:""},l={offset:"number",method:"string",target:"(string|element)"},c={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},u={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},d={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},h={OFFSET:"offset",POSITION:"position"},p=function(){function s(t,i){var r=this;n(this,s),this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(i),this._selector=this._config.target+" "+d.NAV_LINKS+","+this._config.target+" "+d.LIST_ITEMS+","+this._config.target+" "+d.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,e(this._scrollElement).on(c.SCROLL,function(e){return r._process(e)}),this.refresh(),this._process()}return s.prototype.refresh=function(){var t=this,n=this._scrollElement!==this._scrollElement.window?h.POSITION:h.OFFSET,i="auto"===this._config.method?n:this._config.method,r=i===h.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),e.makeArray(e(this._selector)).map(function(t){var n=void 0,s=o.getSelectorFromElement(t);if(s&&(n=e(s)[0]),n){var a=n.getBoundingClientRect();if(a.width||a.height)return[e(n)[i]().top+r,s]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},s.prototype.dispose=function(){e.removeData(this._element,"bs.scrollspy"),e(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},s.prototype._getConfig=function(n){if("string"!=typeof(n=e.extend({},a,n)).target){var i=e(n.target).attr("id");i||(i=o.getUID(t),e(n.target).attr("id",i)),n.target="#"+i}return o.typeCheckConfig(t,n,l),n},s.prototype._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},s.prototype._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},s.prototype._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},s.prototype._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;)this._activeTarget!==this._targets[r]&&e>=this._offsets[r]&&(void 0===this._offsets[r+1]||e<this._offsets[r+1])&&this._activate(this._targets[r])}},s.prototype._activate=function(t){this._activeTarget=t,this._clear();var n=this._selector.split(",");n=n.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var i=e(n.join(","));i.hasClass(u.DROPDOWN_ITEM)?(i.closest(d.DROPDOWN).find(d.DROPDOWN_TOGGLE).addClass(u.ACTIVE),i.addClass(u.ACTIVE)):(i.addClass(u.ACTIVE),i.parents(d.NAV_LIST_GROUP).prev(d.NAV_LINKS+", "+d.LIST_ITEMS).addClass(u.ACTIVE)),e(this._scrollElement).trigger(c.ACTIVATE,{relatedTarget:t})},s.prototype._clear=function(){e(this._selector).filter(d.ACTIVE).removeClass(u.ACTIVE)},s._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.scrollspy"),r="object"===(void 0===t?"undefined":i(t))&&t;if(n||(n=new s(this,r),e(this).data("bs.scrollspy",n)),"string"==typeof t){if(void 0===n[t])throw new Error('No method named "'+t+'"');n[t]()}})},r(s,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return a}}]),s}();e(window).on(c.LOAD_DATA_API,function(){for(var t=e.makeArray(e(d.DATA_SPY)),n=t.length;n--;){var i=e(t[n]);p._jQueryInterface.call(i,i.data())}}),e.fn[t]=p._jQueryInterface,e.fn[t].Constructor=p,e.fn[t].noConflict=function(){return e.fn[t]=s,p._jQueryInterface}}(jQuery),function(e){var t=e.fn.tab,i={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},s={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},a={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},l=function(){function t(e){n(this,t),this._element=e}return t.prototype.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(s.ACTIVE)||e(this._element).hasClass(s.DISABLED))){var n=void 0,r=void 0,l=e(this._element).closest(a.NAV_LIST_GROUP)[0],c=o.getSelectorFromElement(this._element);l&&(r=e.makeArray(e(l).find(a.ACTIVE)),r=r[r.length-1]);var u=e.Event(i.HIDE,{relatedTarget:this._element}),d=e.Event(i.SHOW,{relatedTarget:r});if(r&&e(r).trigger(u),e(this._element).trigger(d),!d.isDefaultPrevented()&&!u.isDefaultPrevented()){c&&(n=e(c)[0]),this._activate(this._element,l);var h=function(){var n=e.Event(i.HIDDEN,{relatedTarget:t._element}),o=e.Event(i.SHOWN,{relatedTarget:r});e(r).trigger(n),e(t._element).trigger(o)};n?this._activate(n,n.parentNode,h):h()}}},t.prototype.dispose=function(){e.removeData(this._element,"bs.tab"),this._element=null},t.prototype._activate=function(t,n,i){var r=this,l=e(n).find(a.ACTIVE)[0],c=i&&o.supportsTransitionEnd()&&l&&e(l).hasClass(s.FADE),u=function(){return r._transitionComplete(t,l,c,i)};l&&c?e(l).one(o.TRANSITION_END,u).emulateTransitionEnd(150):u(),l&&e(l).removeClass(s.SHOW)},t.prototype._transitionComplete=function(t,n,i,r){if(n){e(n).removeClass(s.ACTIVE);var l=e(n.parentNode).find(a.DROPDOWN_ACTIVE_CHILD)[0];l&&e(l).removeClass(s.ACTIVE),n.setAttribute("aria-expanded",!1)}if(e(t).addClass(s.ACTIVE),t.setAttribute("aria-expanded",!0),i?(o.reflow(t),e(t).addClass(s.SHOW)):e(t).removeClass(s.FADE),t.parentNode&&e(t.parentNode).hasClass(s.DROPDOWN_MENU)){var c=e(t).closest(a.DROPDOWN)[0];c&&e(c).find(a.DROPDOWN_TOGGLE).addClass(s.ACTIVE),t.setAttribute("aria-expanded",!0)}r&&r()},t._jQueryInterface=function(n){return this.each(function(){var i=e(this),r=i.data("bs.tab");if(r||(r=new t(this),i.data("bs.tab",r)),"string"==typeof n){if(void 0===r[n])throw new Error('No method named "'+n+'"');r[n]()}})},r(t,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}}]),t}();e(document).on(i.CLICK_DATA_API,a.DATA_TOGGLE,function(t){t.preventDefault(),l._jQueryInterface.call(e(this),"show")}),e.fn.tab=l._jQueryInterface,e.fn.tab.Constructor=l,e.fn.tab.noConflict=function(){return e.fn.tab=t,l._jQueryInterface}}(jQuery),function(e){if("undefined"==typeof Popper)throw new Error("Bootstrap tooltips require Popper.js (https://popper.js.org)");var t="tooltip",s=".bs.tooltip",a=e.fn[t],l=new RegExp("(^|\\s)bs-tooltip\\S+","g"),c={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)"},u={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},d={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip"},h={SHOW:"show",OUT:"out"},p={HIDE:"hide"+s,HIDDEN:"hidden"+s,SHOW:"show"+s,SHOWN:"shown"+s,INSERTED:"inserted"+s,CLICK:"click"+s,FOCUSIN:"focusin"+s,FOCUSOUT:"focusout"+s,MOUSEENTER:"mouseenter"+s,MOUSELEAVE:"mouseleave"+s},f={FADE:"fade",SHOW:"show"},g={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},m={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},v=function(){function a(e,t){n(this,a),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}return a.prototype.enable=function(){this._isEnabled=!0},a.prototype.disable=function(){this._isEnabled=!1},a.prototype.toggleEnabled=function(){this._isEnabled=!this._isEnabled},a.prototype.toggle=function(t){if(t){var n=this.constructor.DATA_KEY,i=e(t.currentTarget).data(n);i||(i=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(e(this.getTipElement()).hasClass(f.SHOW))return void this._leave(null,this);this._enter(null,this)}},a.prototype.dispose=function(){clearTimeout(this._timeout),e.removeData(this.element,this.constructor.DATA_KEY),e(this.element).off(this.constructor.EVENT_KEY),e(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&e(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},a.prototype.show=function(){var t=this;if("none"===e(this.element).css("display"))throw new Error("Please use show on visible elements");var n=e.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){e(this.element).trigger(n);var i=e.contains(this.element.ownerDocument.documentElement,this.element);if(n.isDefaultPrevented()||!i)return;var r=this.getTipElement(),s=o.getUID(this.constructor.NAME);r.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&e(r).addClass(f.FADE);var l="function"==typeof this.config.placement?this.config.placement.call(this,r,this.element):this.config.placement,c=this._getAttachment(l);this.addAttachmentClass(c);var u=!1===this.config.container?document.body:e(this.config.container);e(r).data(this.constructor.DATA_KEY,this),e.contains(this.element.ownerDocument.documentElement,this.tip)||e(r).appendTo(u),e(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new Popper(this.element,r,{placement:c,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:g.ARROW}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){t._handlePopperPlacementChange(e)}}),e(r).addClass(f.SHOW),"ontouchstart"in document.documentElement&&e("body").children().on("mouseover",null,e.noop);var d=function(){t.config.animation&&t._fixTransition();var n=t._hoverState;t._hoverState=null,e(t.element).trigger(t.constructor.Event.SHOWN),n===h.OUT&&t._leave(null,t)};o.supportsTransitionEnd()&&e(this.tip).hasClass(f.FADE)?e(this.tip).one(o.TRANSITION_END,d).emulateTransitionEnd(a._TRANSITION_DURATION):d()}},a.prototype.hide=function(t){var n=this,i=this.getTipElement(),r=e.Event(this.constructor.Event.HIDE),s=function(){n._hoverState!==h.SHOW&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),e(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()};e(this.element).trigger(r),r.isDefaultPrevented()||(e(i).removeClass(f.SHOW),"ontouchstart"in document.documentElement&&e("body").children().off("mouseover",null,e.noop),this._activeTrigger[m.CLICK]=!1,this._activeTrigger[m.FOCUS]=!1,this._activeTrigger[m.HOVER]=!1,o.supportsTransitionEnd()&&e(this.tip).hasClass(f.FADE)?e(i).one(o.TRANSITION_END,s).emulateTransitionEnd(150):s(),this._hoverState="")},a.prototype.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},a.prototype.isWithContent=function(){return Boolean(this.getTitle())},a.prototype.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-tooltip-"+t)},a.prototype.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0]},a.prototype.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(g.TOOLTIP_INNER),this.getTitle()),t.removeClass(f.FADE+" "+f.SHOW)},a.prototype.setElementContent=function(t,n){var r=this.config.html;"object"===(void 0===n?"undefined":i(n))&&(n.nodeType||n.jquery)?r?e(n).parent().is(t)||t.empty().append(n):t.text(e(n).text()):t[r?"html":"text"](n)},a.prototype.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},a.prototype._getAttachment=function(e){return u[e.toUpperCase()]},a.prototype._setListeners=function(){var t=this;this.config.trigger.split(" ").forEach(function(n){if("click"===n)e(t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if(n!==m.MANUAL){var i=n===m.HOVER?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,r=n===m.HOVER?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;e(t.element).on(i,t.config.selector,function(e){return t._enter(e)}).on(r,t.config.selector,function(e){return t._leave(e)})}e(t.element).closest(".modal").on("hide.bs.modal",function(){return t.hide()})}),this.config.selector?this.config=e.extend({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},a.prototype._fixTitle=function(){var e=i(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},a.prototype._enter=function(t,n){var i=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(i))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(i,n)),t&&(n._activeTrigger["focusin"===t.type?m.FOCUS:m.HOVER]=!0),e(n.getTipElement()).hasClass(f.SHOW)||n._hoverState===h.SHOW?n._hoverState=h.SHOW:(clearTimeout(n._timeout),n._hoverState=h.SHOW,n.config.delay&&n.config.delay.show?n._timeout=setTimeout(function(){n._hoverState===h.SHOW&&n.show()},n.config.delay.show):n.show())},a.prototype._leave=function(t,n){var i=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(i))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(i,n)),t&&(n._activeTrigger["focusout"===t.type?m.FOCUS:m.HOVER]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=h.OUT,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout(function(){n._hoverState===h.OUT&&n.hide()},n.config.delay.hide):n.hide())},a.prototype._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},a.prototype._getConfig=function(n){return(n=e.extend({},this.constructor.Default,e(this.element).data(),n)).delay&&"number"==typeof n.delay&&(n.delay={show:n.delay,hide:n.delay}),n.title&&"number"==typeof n.title&&(n.title=n.title.toString()),n.content&&"number"==typeof n.content&&(n.content=n.content.toString()),o.typeCheckConfig(t,n,this.constructor.DefaultType),n},a.prototype._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},a.prototype._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(l);null!==n&&n.length>0&&t.removeClass(n.join(""))},a.prototype._handlePopperPlacementChange=function(e){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},a.prototype._fixTransition=function(){var t=this.getTipElement(),n=this.config.animation;null===t.getAttribute("x-placement")&&(e(t).removeClass(f.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},a._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.tooltip"),r="object"===(void 0===t?"undefined":i(t))&&t;if((n||!/dispose|hide/.test(t))&&(n||(n=new a(this,r),e(this).data("bs.tooltip",n)),"string"==typeof t)){if(void 0===n[t])throw new Error('No method named "'+t+'"');n[t]()}})},r(a,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return d}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return s}},{key:"DefaultType",get:function(){return c}}]),a}();return e.fn[t]=v._jQueryInterface,e.fn[t].Constructor=v,e.fn[t].noConflict=function(){return e.fn[t]=a,v._jQueryInterface},v}(jQuery));!function(o){var a="popover",l=".bs.popover",c=o.fn[a],u=new RegExp("(^|\\s)bs-popover\\S+","g"),d=o.extend({},s.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),h=o.extend({},s.DefaultType,{content:"(string|element|function)"}),p={FADE:"fade",SHOW:"show"},f={TITLE:".popover-header",CONTENT:".popover-body"},g={HIDE:"hide"+l,HIDDEN:"hidden"+l,SHOW:"show"+l,SHOWN:"shown"+l,INSERTED:"inserted"+l,CLICK:"click"+l,FOCUSIN:"focusin"+l,FOCUSOUT:"focusout"+l,MOUSEENTER:"mouseenter"+l,MOUSELEAVE:"mouseleave"+l},m=function(s){function c(){return n(this,c),e(this,s.apply(this,arguments))}return t(c,s),c.prototype.isWithContent=function(){return this.getTitle()||this._getContent()},c.prototype.addAttachmentClass=function(e){o(this.getTipElement()).addClass("bs-popover-"+e)},c.prototype.getTipElement=function(){return this.tip=this.tip||o(this.config.template)[0]},c.prototype.setContent=function(){var e=o(this.getTipElement());this.setElementContent(e.find(f.TITLE),this.getTitle()),this.setElementContent(e.find(f.CONTENT),this._getContent()),e.removeClass(p.FADE+" "+p.SHOW)},c.prototype._getContent=function(){return this.element.getAttribute("data-content")||("function"==typeof this.config.content?this.config.content.call(this.element):this.config.content)},c.prototype._cleanTipClass=function(){var e=o(this.getTipElement()),t=e.attr("class").match(u);null!==t&&t.length>0&&e.removeClass(t.join(""))},c._jQueryInterface=function(e){return this.each(function(){var t=o(this).data("bs.popover"),n="object"===(void 0===e?"undefined":i(e))?e:null;if((t||!/destroy|hide/.test(e))&&(t||(t=new c(this,n),o(this).data("bs.popover",t)),"string"==typeof e)){if(void 0===t[e])throw new Error('No method named "'+e+'"');t[e]()}})},r(c,null,[{key:"VERSION",get:function(){return"4.0.0-alpha.6"}},{key:"Default",get:function(){return d}},{key:"NAME",get:function(){return a}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return g}},{key:"EVENT_KEY",get:function(){return l}},{key:"DefaultType",get:function(){return h}}]),c}(s);o.fn[a]=m._jQueryInterface,o.fn[a].Constructor=m,o.fn[a].noConflict=function(){return o.fn[a]=c,m._jQueryInterface}}(jQuery)}(),function(e){e.fn.areYouSure=function(t){var n=e.extend({message:"You have unsaved changes!",dirtyClass:"dirty",change:null,silent:!1,addRemoveFieldsMarksDirty:!1,fieldEvents:"change keyup propertychange input",fieldSelector:":input:not(input[type=submit]):not(input[type=button])"},t),i=function(t){if(t.hasClass("ays-ignore")||t.hasClass("aysIgnore")||t.attr("data-ays-ignore")||void 0===t.attr("name"))return null;if(t.is(":disabled"))return"ays-disabled";var n,i=t.attr("type");switch(t.is("select")&&(i="select"),i){case"checkbox":case"radio":n=t.is(":checked");break;case"select":n="",t.find("option").each(function(t){var i=e(this);i.is(":selected")&&(n+=i.val())});break;default:n=t.val()}return n},r=function(e){e.data("ays-orig",i(e))},o=function(t){var r=function(e){var t=e.data("ays-orig");return void 0!==t&&i(e)!=t},o=e(this).is("form")?e(this):e(this).parents("form");if(r(e(t.target)))a(o,!0);else{var s=o.find(n.fieldSelector);if(n.addRemoveFieldsMarksDirty&&o.data("ays-orig-field-count")!=s.length)a(o,!0);else{var l=!1;s.each(function(){var t=e(this);if(r(t))return l=!0,!1}),a(o,l)}}},s=function(t){var i=t.find(n.fieldSelector);e(i).each(function(){r(e(this))}),e(i).unbind(n.fieldEvents,o),e(i).bind(n.fieldEvents,o),t.data("ays-orig-field-count",e(i).length),a(t,!1)},a=function(e,t){var i=t!=e.hasClass(n.dirtyClass);e.toggleClass(n.dirtyClass,t),i&&(n.change&&n.change.call(e,e),t&&e.trigger("dirty.areYouSure",[e]),t||e.trigger("clean.areYouSure",[e]),e.trigger("change.areYouSure",[e]))},l=function(){var t=e(this),i=t.find(n.fieldSelector);e(i).each(function(){var t=e(this);t.data("ays-orig")||(r(t),t.bind(n.fieldEvents,o))}),t.trigger("checkform.areYouSure")},c=function(){s(e(this))};return n.silent||window.aysUnloadSet||(window.aysUnloadSet=!0,e(window).bind("beforeunload",function(){if(0!=e("form").filter("."+n.dirtyClass).length){if(navigator.userAgent.toLowerCase().match(/msie|chrome/)){if(window.aysHasPrompted)return;window.aysHasPrompted=!0,window.setTimeout(function(){window.aysHasPrompted=!1},900)}return n.message}})),this.each(function(t){if(e(this).is("form")){var i=e(this);i.submit(function(){i.removeClass(n.dirtyClass)}),i.bind("reset",function(){a(i,!1)}),i.bind("rescan.areYouSure",l),i.bind("reinitialize.areYouSure",c),i.bind("checkform.areYouSure",o),s(i)}})}}(jQuery),function(e,t,n){!function(){var n,i,r,o=!1,s={classes:"",inline:!1,language:"ru",startDate:new Date,firstDay:"",weekends:[6,0],dateFormat:"",altField:"",altFieldDateFormat:"@",toggleSelected:!0,keyboardNav:!0,position:"bottom left",offset:12,view:"days",minView:"days",showOtherMonths:!0,selectOtherMonths:!0,moveToOtherMonthsOnSelect:!0,showOtherYears:!0,selectOtherYears:!0,moveToOtherYearsOnSelect:!0,minDate:"",maxDate:"",disableNavWhenOutOfRange:!0,multipleDates:!1,multipleDatesSeparator:",",range:!1,todayButton:!1,clearButton:!1,showEvent:"focus",autoClose:!1,monthsField:"monthsShort",prevHtml:'<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>',nextHtml:'<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>',navTitles:{days:"MM, <i>yyyy</i>",months:"yyyy",years:"yyyy1 - yyyy2"},timepicker:!1,onlyTimepicker:!1,dateTimeSeparator:" ",timeFormat:"",minHours:0,maxHours:24,minMinutes:0,maxMinutes:59,hoursStep:1,minutesStep:1,onSelect:"",onShow:"",onHide:"",onChangeMonth:"",onChangeYear:"",onChangeDecade:"",onChangeView:"",onRenderCell:""},a={ctrlRight:[17,39],ctrlUp:[17,38],ctrlLeft:[17,37],ctrlDown:[17,40],shiftRight:[16,39],shiftUp:[16,38],shiftLeft:[16,37],shiftDown:[16,40],altUp:[18,38],altRight:[18,39],altLeft:[18,37],altDown:[18,40],ctrlShiftUp:[16,17,38]},l=function(e,i){this.el=e,this.$el=t(e),this.opts=t.extend(!0,{},s,i,this.$el.data()),void 0==n&&(n=t("body")),this.opts.startDate||(this.opts.startDate=new Date),"INPUT"==this.el.nodeName&&(this.elIsInput=!0),this.opts.altField&&(this.$altField="string"==typeof this.opts.altField?t(this.opts.altField):this.opts.altField),this.inited=!1,this.visible=!1,this.silent=!1,this.currentDate=this.opts.startDate,this.currentView=this.opts.view,this._createShortCuts(),this.selectedDates=[],this.views={},this.keys=[],this.minRange="",this.maxRange="",this._prevOnSelectValue="",this.init()};(r=l).prototype={VERSION:"2.2.3",viewIndexes:["days","months","years"],init:function(){o||this.opts.inline||!this.elIsInput||this._buildDatepickersContainer(),this._buildBaseHtml(),this._defineLocale(this.opts.language),this._syncWithMinMaxDates(),this.elIsInput&&(this.opts.inline||(this._setPositionClasses(this.opts.position),this._bindEvents()),this.opts.keyboardNav&&!this.opts.onlyTimepicker&&this._bindKeyboardEvents(),this.$datepicker.on("mousedown",this._onMouseDownDatepicker.bind(this)),this.$datepicker.on("mouseup",this._onMouseUpDatepicker.bind(this))),this.opts.classes&&this.$datepicker.addClass(this.opts.classes),this.opts.timepicker&&(this.timepicker=new t.fn.datepicker.Timepicker(this,this.opts),this._bindTimepickerEvents()),this.opts.onlyTimepicker&&this.$datepicker.addClass("-only-timepicker-"),this.views[this.currentView]=new t.fn.datepicker.Body(this,this.currentView,this.opts),this.views[this.currentView].show(),this.nav=new t.fn.datepicker.Navigation(this,this.opts),this.view=this.currentView,this.$el.on("clickCell.adp",this._onClickCell.bind(this)),this.$datepicker.on("mouseenter",".datepicker--cell",this._onMouseEnterCell.bind(this)),this.$datepicker.on("mouseleave",".datepicker--cell",this._onMouseLeaveCell.bind(this)),this.inited=!0},_createShortCuts:function(){this.minDate=this.opts.minDate?this.opts.minDate:new Date(-86399999136e5),this.maxDate=this.opts.maxDate?this.opts.maxDate:new Date(86399999136e5)},_bindEvents:function(){this.$el.on(this.opts.showEvent+".adp",this._onShowEvent.bind(this)),this.$el.on("mouseup.adp",this._onMouseUpEl.bind(this)),this.$el.on("blur.adp",this._onBlur.bind(this)),this.$el.on("keyup.adp",this._onKeyUpGeneral.bind(this)),t(e).on("resize.adp",this._onResize.bind(this)),t("body").on("mouseup.adp",this._onMouseUpBody.bind(this))},_bindKeyboardEvents:function(){this.$el.on("keydown.adp",this._onKeyDown.bind(this)),this.$el.on("keyup.adp",this._onKeyUp.bind(this)),this.$el.on("hotKey.adp",this._onHotKey.bind(this))},_bindTimepickerEvents:function(){this.$el.on("timeChange.adp",this._onTimeChange.bind(this))},isWeekend:function(e){return-1!==this.opts.weekends.indexOf(e)},_defineLocale:function(e){"string"==typeof e?(this.loc=t.fn.datepicker.language[e],this.loc||(console.warn("Can't find language \""+e+'" in Datepicker.language, will use "ru" instead'),this.loc=t.extend(!0,{},t.fn.datepicker.language.ru)),this.loc=t.extend(!0,{},t.fn.datepicker.language.ru,t.fn.datepicker.language[e])):this.loc=t.extend(!0,{},t.fn.datepicker.language.ru,e),this.opts.dateFormat&&(this.loc.dateFormat=this.opts.dateFormat),this.opts.timeFormat&&(this.loc.timeFormat=this.opts.timeFormat),""!==this.opts.firstDay&&(this.loc.firstDay=this.opts.firstDay),this.opts.timepicker&&(this.loc.dateFormat=[this.loc.dateFormat,this.loc.timeFormat].join(this.opts.dateTimeSeparator)),this.opts.onlyTimepicker&&(this.loc.dateFormat=this.loc.timeFormat);var n=this._getWordBoundaryRegExp;(this.loc.timeFormat.match(n("aa"))||this.loc.timeFormat.match(n("AA")))&&(this.ampm=!0)},_buildDatepickersContainer:function(){o=!0,n.append('<div class="datepickers-container" id="datepickers-container"></div>'),i=t("#datepickers-container")},_buildBaseHtml:function(){var e,n=t('<div class="datepicker-inline">');e="INPUT"==this.el.nodeName?this.opts.inline?n.insertAfter(this.$el):i:n.appendTo(this.$el),this.$datepicker=t('<div class="datepicker"><i class="datepicker--pointer"></i><nav class="datepicker--nav"></nav><div class="datepicker--content"></div></div>').appendTo(e),this.$content=t(".datepicker--content",this.$datepicker),this.$nav=t(".datepicker--nav",this.$datepicker)},_triggerOnChange:function(){if(!this.selectedDates.length){if(""===this._prevOnSelectValue)return;return this._prevOnSelectValue="",this.opts.onSelect("","",this)}var e,t=this.selectedDates,n=r.getParsedDate(t[0]),i=this,o=new Date(n.year,n.month,n.date,n.hours,n.minutes);e=t.map(function(e){return i.formatDate(i.loc.dateFormat,e)}).join(this.opts.multipleDatesSeparator),(this.opts.multipleDates||this.opts.range)&&(o=t.map(function(e){var t=r.getParsedDate(e);return new Date(t.year,t.month,t.date,t.hours,t.minutes)})),this._prevOnSelectValue=e,this.opts.onSelect(e,o,this)},next:function(){var e=this.parsedDate,t=this.opts;switch(this.view){case"days":this.date=new Date(e.year,e.month+1,1),t.onChangeMonth&&t.onChangeMonth(this.parsedDate.month,this.parsedDate.year);break;case"months":this.date=new Date(e.year+1,e.month,1),t.onChangeYear&&t.onChangeYear(this.parsedDate.year);break;case"years":this.date=new Date(e.year+10,0,1),t.onChangeDecade&&t.onChangeDecade(this.curDecade)}},prev:function(){var e=this.parsedDate,t=this.opts;switch(this.view){case"days":this.date=new Date(e.year,e.month-1,1),t.onChangeMonth&&t.onChangeMonth(this.parsedDate.month,this.parsedDate.year);break;case"months":this.date=new Date(e.year-1,e.month,1),t.onChangeYear&&t.onChangeYear(this.parsedDate.year);break;case"years":this.date=new Date(e.year-10,0,1),t.onChangeDecade&&t.onChangeDecade(this.curDecade)}},formatDate:function(e,t){t=t||this.date;var n,i=e,o=this._getWordBoundaryRegExp,s=this.loc,a=r.getLeadingZeroNum,l=r.getDecade(t),c=r.getParsedDate(t),u=c.fullHours,d=c.hours,h=e.match(o("aa"))||e.match(o("AA")),p="am",f=this._replacer;switch(this.opts.timepicker&&this.timepicker&&h&&(u=a((n=this.timepicker._getValidHoursFromDate(t,h)).hours),d=n.hours,p=n.dayPeriod),!0){case/@/.test(i):i=i.replace(/@/,t.getTime());case/aa/.test(i):i=f(i,o("aa"),p);case/AA/.test(i):i=f(i,o("AA"),p.toUpperCase());case/dd/.test(i):i=f(i,o("dd"),c.fullDate);case/d/.test(i):i=f(i,o("d"),c.date);case/DD/.test(i):i=f(i,o("DD"),s.days[c.day]);case/D/.test(i):i=f(i,o("D"),s.daysShort[c.day]);case/mm/.test(i):i=f(i,o("mm"),c.fullMonth);case/m/.test(i):i=f(i,o("m"),c.month+1);case/MM/.test(i):i=f(i,o("MM"),this.loc.months[c.month]);case/M/.test(i):i=f(i,o("M"),s.monthsShort[c.month]);case/ii/.test(i):i=f(i,o("ii"),c.fullMinutes);case/i/.test(i):i=f(i,o("i"),c.minutes);case/hh/.test(i):i=f(i,o("hh"),u);case/h/.test(i):i=f(i,o("h"),d);case/yyyy/.test(i):i=f(i,o("yyyy"),c.year);case/yyyy1/.test(i):i=f(i,o("yyyy1"),l[0]);case/yyyy2/.test(i):i=f(i,o("yyyy2"),l[1]);case/yy/.test(i):i=f(i,o("yy"),c.year.toString().slice(-2))}return i},_replacer:function(e,t,n){return e.replace(t,function(e,t,i,r){return t+n+r})},_getWordBoundaryRegExp:function(e){var t="\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";return new RegExp("(^|>|"+t+")("+e+")($|<|"+t+")","g")},selectDate:function(e){var t=this,n=t.opts,i=t.parsedDate,o=t.selectedDates.length,s="";if(Array.isArray(e))e.forEach(function(e){t.selectDate(e)});else if(e instanceof Date){if(this.lastSelectedDate=e,this.timepicker&&this.timepicker._setTime(e),t._trigger("selectDate",e),this.timepicker&&(e.setHours(this.timepicker.hours),e.setMinutes(this.timepicker.minutes)),"days"==t.view&&e.getMonth()!=i.month&&n.moveToOtherMonthsOnSelect&&(s=new Date(e.getFullYear(),e.getMonth(),1)),"years"==t.view&&e.getFullYear()!=i.year&&n.moveToOtherYearsOnSelect&&(s=new Date(e.getFullYear(),0,1)),s&&(t.silent=!0,t.date=s,t.silent=!1,t.nav._render()),n.multipleDates&&!n.range){if(o===n.multipleDates)return;t._isSelected(e)||t.selectedDates.push(e)}else n.range?2==o?(t.selectedDates=[e],t.minRange=e,t.maxRange=""):1==o?(t.selectedDates.push(e),t.maxRange?t.minRange=e:t.maxRange=e,r.bigger(t.maxRange,t.minRange)&&(t.maxRange=t.minRange,t.minRange=e),t.selectedDates=[t.minRange,t.maxRange]):(t.selectedDates=[e],t.minRange=e):t.selectedDates=[e];t._setInputValue(),n.onSelect&&t._triggerOnChange(),n.autoClose&&!this.timepickerIsActive&&(n.multipleDates||n.range?n.range&&2==t.selectedDates.length&&t.hide():t.hide()),t.views[this.currentView]._render()}},removeDate:function(e){var t=this.selectedDates,n=this;if(e instanceof Date)return t.some(function(i,o){if(r.isSame(i,e))return t.splice(o,1),n.selectedDates.length?n.lastSelectedDate=n.selectedDates[n.selectedDates.length-1]:(n.minRange="",n.maxRange="",n.lastSelectedDate=""),n.views[n.currentView]._render(),n._setInputValue(),n.opts.onSelect&&n._triggerOnChange(),!0})},today:function(){this.silent=!0,this.view=this.opts.minView,this.silent=!1,this.date=new Date,this.opts.todayButton instanceof Date&&this.selectDate(this.opts.todayButton)},clear:function(){this.selectedDates=[],this.minRange="",this.maxRange="",this.views[this.currentView]._render(),this._setInputValue(),this.opts.onSelect&&this._triggerOnChange()},update:function(e,n){var i=arguments.length,r=this.lastSelectedDate;return 2==i?this.opts[e]=n:1==i&&"object"==typeof e&&(this.opts=t.extend(!0,this.opts,e)),this._createShortCuts(),this._syncWithMinMaxDates(),this._defineLocale(this.opts.language),this.nav._addButtonsIfNeed(),this.opts.onlyTimepicker||this.nav._render(),this.views[this.currentView]._render(),this.elIsInput&&!this.opts.inline&&(this._setPositionClasses(this.opts.position),this.visible&&this.setPosition(this.opts.position)),this.opts.classes&&this.$datepicker.addClass(this.opts.classes),this.opts.onlyTimepicker&&this.$datepicker.addClass("-only-timepicker-"),this.opts.timepicker&&(r&&this.timepicker._handleDate(r),this.timepicker._updateRanges(),this.timepicker._updateCurrentTime(),r&&(r.setHours(this.timepicker.hours),r.setMinutes(this.timepicker.minutes))),this._setInputValue(),this},_syncWithMinMaxDates:function(){var e=this.date.getTime();this.silent=!0,this.minTime>e&&(this.date=this.minDate),this.maxTime<e&&(this.date=this.maxDate),this.silent=!1},_isSelected:function(e,t){var n=!1;return this.selectedDates.some(function(i){if(r.isSame(i,e,t))return n=i,!0}),n},_setInputValue:function(){var e,t=this,n=t.opts,i=t.loc.dateFormat,r=n.altFieldDateFormat,o=t.selectedDates.map(function(e){return t.formatDate(i,e)});n.altField&&t.$altField.length&&(e=(e=this.selectedDates.map(function(e){return t.formatDate(r,e)})).join(this.opts.multipleDatesSeparator),this.$altField.val(e)),o=o.join(this.opts.multipleDatesSeparator),this.$el.val(o)},_isInRange:function(e,t){var n=e.getTime(),i=r.getParsedDate(e),o=r.getParsedDate(this.minDate),s=r.getParsedDate(this.maxDate),a=new Date(i.year,i.month,o.date).getTime(),l=new Date(i.year,i.month,s.date).getTime(),c={day:n>=this.minTime&&n<=this.maxTime,month:a>=this.minTime&&l<=this.maxTime,year:i.year>=o.year&&i.year<=s.year};return t?c[t]:c.day},_getDimensions:function(e){var t=e.offset();return{width:e.outerWidth(),height:e.outerHeight(),left:t.left,top:t.top}},_getDateFromCell:function(e){var t=this.parsedDate,n=e.data("year")||t.year,i=void 0==e.data("month")?t.month:e.data("month"),r=e.data("date")||1;return new Date(n,i,r)},_setPositionClasses:function(e){var t=(e=e.split(" "))[0],n="datepicker -"+t+"-"+e[1]+"- -from-"+t+"-";this.visible&&(n+=" active"),this.$datepicker.removeAttr("class").addClass(n)},setPosition:function(e){e=e||this.opts.position;var t,n,i=this._getDimensions(this.$el),r=this._getDimensions(this.$datepicker),o=e.split(" "),s=this.opts.offset,a=o[0],l=o[1];switch(a){case"top":t=i.top-r.height-s;break;case"right":n=i.left+i.width+s;break;case"bottom":t=i.top+i.height+s;break;case"left":n=i.left-r.width-s}switch(l){case"top":t=i.top;break;case"right":n=i.left+i.width-r.width;break;case"bottom":t=i.top+i.height-r.height;break;case"left":n=i.left;break;case"center":/left|right/.test(a)?t=i.top+i.height/2-r.height/2:n=i.left+i.width/2-r.width/2}this.$datepicker.css({left:n,top:t})},show:function(){var e=this.opts.onShow;this.setPosition(this.opts.position),this.$datepicker.addClass("active"),this.visible=!0,e&&this._bindVisionEvents(e)},hide:function(){var e=this.opts.onHide;this.$datepicker.removeClass("active").css({left:"-100000px"}),this.focused="",this.keys=[],this.inFocus=!1,this.visible=!1,this.$el.blur(),e&&this._bindVisionEvents(e)},down:function(e){this._changeView(e,"down")},up:function(e){this._changeView(e,"up")},_bindVisionEvents:function(e){this.$datepicker.off("transitionend.dp"),e(this,!1),this.$datepicker.one("transitionend.dp",e.bind(this,this,!0))},_changeView:function(e,t){e=e||this.focused||this.date;var n="up"==t?this.viewIndex+1:this.viewIndex-1;n>2&&(n=2),n<0&&(n=0),this.silent=!0,this.date=new Date(e.getFullYear(),e.getMonth(),1),this.silent=!1,this.view=this.viewIndexes[n]},_handleHotKey:function(e){var t,n,i,o=r.getParsedDate(this._getFocusedDate()),s=this.opts,a=!1,l=!1,c=!1,u=o.year,d=o.month,h=o.date;switch(e){case"ctrlRight":case"ctrlUp":d+=1,a=!0;break;case"ctrlLeft":case"ctrlDown":d-=1,a=!0;break;case"shiftRight":case"shiftUp":l=!0,u+=1;break;case"shiftLeft":case"shiftDown":l=!0,u-=1;break;case"altRight":case"altUp":c=!0,u+=10;break;case"altLeft":case"altDown":c=!0,u-=10;break;case"ctrlShiftUp":this.up()}i=r.getDaysCount(new Date(u,d)),n=new Date(u,d,h),i<h&&(h=i),n.getTime()<this.minTime?n=this.minDate:n.getTime()>this.maxTime&&(n=this.maxDate),this.focused=n,t=r.getParsedDate(n),a&&s.onChangeMonth&&s.onChangeMonth(t.month,t.year),l&&s.onChangeYear&&s.onChangeYear(t.year),c&&s.onChangeDecade&&s.onChangeDecade(this.curDecade)},_registerKey:function(e){this.keys.some(function(t){return t==e})||this.keys.push(e)},_unRegisterKey:function(e){var t=this.keys.indexOf(e);this.keys.splice(t,1)},_isHotKeyPressed:function(){var e,t=!1,n=this,i=this.keys.sort();for(var r in a)e=a[r],i.length==e.length&&e.every(function(e,t){return e==i[t]})&&(n._trigger("hotKey",r),t=!0);return t},_trigger:function(e,t){this.$el.trigger(e,t)},_focusNextCell:function(e,t){t=t||this.cellType;var n=r.getParsedDate(this._getFocusedDate()),i=n.year,o=n.month,s=n.date;if(!this._isHotKeyPressed()){switch(e){case 37:"day"==t&&(s-=1),"month"==t&&(o-=1),"year"==t&&(i-=1);break;case 38:"day"==t&&(s-=7),"month"==t&&(o-=3),"year"==t&&(i-=4);break;case 39:"day"==t&&(s+=1),"month"==t&&(o+=1),"year"==t&&(i+=1);break;case 40:"day"==t&&(s+=7),"month"==t&&(o+=3),"year"==t&&(i+=4)}var a=new Date(i,o,s);a.getTime()<this.minTime?a=this.minDate:a.getTime()>this.maxTime&&(a=this.maxDate),this.focused=a}},_getFocusedDate:function(){var e=this.focused||this.selectedDates[this.selectedDates.length-1],t=this.parsedDate;if(!e)switch(this.view){case"days":e=new Date(t.year,t.month,(new Date).getDate());break;case"months":e=new Date(t.year,t.month,1);break;case"years":e=new Date(t.year,0,1)}return e},_getCell:function(e,n){n=n||this.cellType;var i,o=r.getParsedDate(e),s='.datepicker--cell[data-year="'+o.year+'"]';switch(n){case"month":s='[data-month="'+o.month+'"]';break;case"day":s+='[data-month="'+o.month+'"][data-date="'+o.date+'"]'}return(i=this.views[this.currentView].$el.find(s)).length?i:t("")},destroy:function(){var e=this;e.$el.off(".adp").data("datepicker",""),e.selectedDates=[],e.focused="",e.views={},e.keys=[],e.minRange="",e.maxRange="",e.opts.inline||!e.elIsInput?e.$datepicker.closest(".datepicker-inline").remove():e.$datepicker.remove()},_handleAlreadySelectedDates:function(e,t){this.opts.range?this.opts.toggleSelected?this.removeDate(t):2!=this.selectedDates.length&&this._trigger("clickCell",t):this.opts.toggleSelected&&this.removeDate(t),this.opts.toggleSelected||(this.lastSelectedDate=e,this.opts.timepicker&&(this.timepicker._setTime(e),this.timepicker.update()))},_onShowEvent:function(e){this.visible||this.show()},_onBlur:function(){!this.inFocus&&this.visible&&this.hide()},_onMouseDownDatepicker:function(e){this.inFocus=!0},_onMouseUpDatepicker:function(e){this.inFocus=!1,e.originalEvent.inFocus=!0,e.originalEvent.timepickerFocus||this.$el.focus()},_onKeyUpGeneral:function(e){this.$el.val()||this.clear()},_onResize:function(){this.visible&&this.setPosition()},_onMouseUpBody:function(e){e.originalEvent.inFocus||this.visible&&!this.inFocus&&this.hide()},_onMouseUpEl:function(e){e.originalEvent.inFocus=!0,setTimeout(this._onKeyUpGeneral.bind(this),4)},_onKeyDown:function(e){var t=e.which;if(this._registerKey(t),t>=37&&t<=40&&(e.preventDefault(),this._focusNextCell(t)),13==t&&this.focused){if(this._getCell(this.focused).hasClass("-disabled-"))return;if(this.view!=this.opts.minView)this.down();else{var n=this._isSelected(this.focused,this.cellType);if(!n)return this.timepicker&&(this.focused.setHours(this.timepicker.hours),this.focused.setMinutes(this.timepicker.minutes)),void this.selectDate(this.focused);this._handleAlreadySelectedDates(n,this.focused)}}27==t&&this.hide()},_onKeyUp:function(e){var t=e.which;this._unRegisterKey(t)},_onHotKey:function(e,t){this._handleHotKey(t)},_onMouseEnterCell:function(e){var n=t(e.target).closest(".datepicker--cell"),i=this._getDateFromCell(n);this.silent=!0,this.focused&&(this.focused=""),n.addClass("-focus-"),this.focused=i,this.silent=!1,this.opts.range&&1==this.selectedDates.length&&(this.minRange=this.selectedDates[0],this.maxRange="",r.less(this.minRange,this.focused)&&(this.maxRange=this.minRange,this.minRange=""),this.views[this.currentView]._update())},_onMouseLeaveCell:function(e){t(e.target).closest(".datepicker--cell").removeClass("-focus-"),this.silent=!0,this.focused="",this.silent=!1},_onTimeChange:function(e,t,n){var i=new Date,r=!1;this.selectedDates.length&&(r=!0,i=this.lastSelectedDate),i.setHours(t),i.setMinutes(n),r||this._getCell(i).hasClass("-disabled-")?(this._setInputValue(),this.opts.onSelect&&this._triggerOnChange()):this.selectDate(i)},_onClickCell:function(e,t){this.timepicker&&(t.setHours(this.timepicker.hours),t.setMinutes(this.timepicker.minutes)),this.selectDate(t)},set focused(e){if(!e&&this.focused){var t=this._getCell(this.focused);t.length&&t.removeClass("-focus-")}this._focused=e,this.opts.range&&1==this.selectedDates.length&&(this.minRange=this.selectedDates[0],this.maxRange="",r.less(this.minRange,this._focused)&&(this.maxRange=this.minRange,this.minRange="")),this.silent||(this.date=e)},get focused(){return this._focused},get parsedDate(){return r.getParsedDate(this.date)},set date(e){if(e instanceof Date)return this.currentDate=e,this.inited&&!this.silent&&(this.views[this.view]._render(),this.nav._render(),this.visible&&this.elIsInput&&this.setPosition()),e},get date(){return this.currentDate},set view(e){if(this.viewIndex=this.viewIndexes.indexOf(e),!(this.viewIndex<0))return this.prevView=this.currentView,this.currentView=e,this.inited&&(this.views[e]?this.views[e]._render():this.views[e]=new t.fn.datepicker.Body(this,e,this.opts),this.views[this.prevView].hide(),this.views[e].show(),this.nav._render(),this.opts.onChangeView&&this.opts.onChangeView(e),this.elIsInput&&this.visible&&this.setPosition()),e},get view(){return this.currentView},get cellType(){return this.view.substring(0,this.view.length-1)},get minTime(){var e=r.getParsedDate(this.minDate);return new Date(e.year,e.month,e.date).getTime()},get maxTime(){var e=r.getParsedDate(this.maxDate);return new Date(e.year,e.month,e.date).getTime()},get curDecade(){return r.getDecade(this.date)}},r.getDaysCount=function(e){return new Date(e.getFullYear(),e.getMonth()+1,0).getDate()},r.getParsedDate=function(e){return{year:e.getFullYear(),month:e.getMonth(),fullMonth:e.getMonth()+1<10?"0"+(e.getMonth()+1):e.getMonth()+1,date:e.getDate(),fullDate:e.getDate()<10?"0"+e.getDate():e.getDate(),day:e.getDay(),hours:e.getHours(),fullHours:e.getHours()<10?"0"+e.getHours():e.getHours(),minutes:e.getMinutes(),fullMinutes:e.getMinutes()<10?"0"+e.getMinutes():e.getMinutes()}},r.getDecade=function(e){var t=10*Math.floor(e.getFullYear()/10);return[t,t+9]},r.template=function(e,t){return e.replace(/#\{([\w]+)\}/g,function(e,n){if(t[n]||0===t[n])return t[n]})},r.isSame=function(e,t,n){if(!e||!t)return!1;var i=r.getParsedDate(e),o=r.getParsedDate(t),s=n||"day";return{day:i.date==o.date&&i.month==o.month&&i.year==o.year,month:i.month==o.month&&i.year==o.year,year:i.year==o.year}[s]},r.less=function(e,t,n){return!(!e||!t)&&t.getTime()<e.getTime()},r.bigger=function(e,t,n){return!(!e||!t)&&t.getTime()>e.getTime()},r.getLeadingZeroNum=function(e){return parseInt(e)<10?"0"+e:e},r.resetTime=function(e){if("object"==typeof e)return e=r.getParsedDate(e),new Date(e.year,e.month,e.date)},t.fn.datepicker=function(e){return this.each(function(){if(t.data(this,"datepicker")){var n=t.data(this,"datepicker");n.opts=t.extend(!0,n.opts,e),n.update()}else t.data(this,"datepicker",new l(this,e))})},t.fn.datepicker.Constructor=l,t.fn.datepicker.language={ru:{days:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"],daysShort:["Вос","Пон","Вто","Сре","Чет","Пят","Суб"],daysMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthsShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],today:"Сегодня",clear:"Очистить",dateFormat:"dd.mm.yyyy",timeFormat:"hh:ii",firstDay:1}},t(function(){t(".datepicker-here").datepicker()})}(),function(){var e={days:'<div class="datepicker--days datepicker--body"><div class="datepicker--days-names"></div><div class="datepicker--cells datepicker--cells-days"></div></div>',months:'<div class="datepicker--months datepicker--body"><div class="datepicker--cells datepicker--cells-months"></div></div>',years:'<div class="datepicker--years datepicker--body"><div class="datepicker--cells datepicker--cells-years"></div></div>'},n=t.fn.datepicker,i=n.Constructor;n.Body=function(e,n,i){this.d=e,this.type=n,this.opts=i,this.$el=t(""),this.opts.onlyTimepicker||this.init()},n.Body.prototype={init:function(){this._buildBaseHtml(),this._render(),this._bindEvents()},_bindEvents:function(){this.$el.on("click",".datepicker--cell",t.proxy(this._onClickCell,this))},_buildBaseHtml:function(){this.$el=t(e[this.type]).appendTo(this.d.$content),this.$names=t(".datepicker--days-names",this.$el),this.$cells=t(".datepicker--cells",this.$el)},_getDayNamesHtml:function(e,t,n,i){return t=void 0!=t?t:e,n=n||"",(i=void 0!=i?i:0)>7?n:7==t?this._getDayNamesHtml(e,0,n,++i):(n+='<div class="datepicker--day-name'+(this.d.isWeekend(t)?" -weekend-":"")+'">'+this.d.loc.daysMin[t]+"</div>",this._getDayNamesHtml(e,++t,n,++i))},_getCellContents:function(e,t){var n="datepicker--cell datepicker--cell-"+t,r=new Date,o=this.d,s=i.resetTime(o.minRange),a=i.resetTime(o.maxRange),l=o.opts,c=i.getParsedDate(e),u={},d=c.date;switch(t){case"day":o.isWeekend(c.day)&&(n+=" -weekend-"),c.month!=this.d.parsedDate.month&&(n+=" -other-month-",l.selectOtherMonths||(n+=" -disabled-"),l.showOtherMonths||(d=""));break;case"month":d=o.loc[o.opts.monthsField][c.month];break;case"year":var h=o.curDecade;d=c.year,(c.year<h[0]||c.year>h[1])&&(n+=" -other-decade-",l.selectOtherYears||(n+=" -disabled-"),l.showOtherYears||(d=""))}return l.onRenderCell&&(d=(u=l.onRenderCell(e,t)||{}).html?u.html:d,n+=u.classes?" "+u.classes:""),l.range&&(i.isSame(s,e,t)&&(n+=" -range-from-"),i.isSame(a,e,t)&&(n+=" -range-to-"),1==o.selectedDates.length&&o.focused?((i.bigger(s,e)&&i.less(o.focused,e)||i.less(a,e)&&i.bigger(o.focused,e))&&(n+=" -in-range-"),i.less(a,e)&&i.isSame(o.focused,e)&&(n+=" -range-from-"),i.bigger(s,e)&&i.isSame(o.focused,e)&&(n+=" -range-to-")):2==o.selectedDates.length&&i.bigger(s,e)&&i.less(a,e)&&(n+=" -in-range-")),i.isSame(r,e,t)&&(n+=" -current-"),o.focused&&i.isSame(e,o.focused,t)&&(n+=" -focus-"),o._isSelected(e,t)&&(n+=" -selected-"),o._isInRange(e,t)&&!u.disabled||(n+=" -disabled-"),{html:d,classes:n}},_getDaysHtml:function(e){for(var t,n,r=i.getDaysCount(e),o=new Date(e.getFullYear(),e.getMonth(),1).getDay(),s=new Date(e.getFullYear(),e.getMonth(),r).getDay(),a=o-this.d.loc.firstDay,l=6-s+this.d.loc.firstDay,c="",u=1-(a=a<0?a+7:a),d=r+(l=l>6?l-7:l);u<=d;u++)n=e.getFullYear(),t=e.getMonth(),c+=this._getDayHtml(new Date(n,t,u));return c},_getDayHtml:function(e){var t=this._getCellContents(e,"day");return'<div class="'+t.classes+'" data-date="'+e.getDate()+'" data-month="'+e.getMonth()+'" data-year="'+e.getFullYear()+'">'+t.html+"</div>"},_getMonthsHtml:function(e){for(var t="",n=i.getParsedDate(e),r=0;r<12;)t+=this._getMonthHtml(new Date(n.year,r)),r++;return t},_getMonthHtml:function(e){var t=this._getCellContents(e,"month");return'<div class="'+t.classes+'" data-month="'+e.getMonth()+'">'+t.html+"</div>"},_getYearsHtml:function(e){i.getParsedDate(e);var t=i.getDecade(e),n="",r=t[0]-1;for(r;r<=t[1]+1;r++)n+=this._getYearHtml(new Date(r,0));return n},_getYearHtml:function(e){var t=this._getCellContents(e,"year");return'<div class="'+t.classes+'" data-year="'+e.getFullYear()+'">'+t.html+"</div>"},_renderTypes:{days:function(){var e=this._getDayNamesHtml(this.d.loc.firstDay),t=this._getDaysHtml(this.d.currentDate);this.$cells.html(t),this.$names.html(e)},months:function(){var e=this._getMonthsHtml(this.d.currentDate);this.$cells.html(e)},years:function(){var e=this._getYearsHtml(this.d.currentDate);this.$cells.html(e)}},_render:function(){this.opts.onlyTimepicker||this._renderTypes[this.type].bind(this)()},_update:function(){var e,n,i,r=this;t(".datepicker--cell",this.$cells).each(function(o,s){n=t(this),i=r.d._getDateFromCell(t(this)),e=r._getCellContents(i,r.d.cellType),n.attr("class",e.classes)})},show:function(){this.opts.onlyTimepicker||(this.$el.addClass("active"),this.acitve=!0)},hide:function(){this.$el.removeClass("active"),this.active=!1},_handleClick:function(e){var t=e.data("date")||1,n=e.data("month")||0,i=e.data("year")||this.d.parsedDate.year,r=this.d;if(r.view==this.opts.minView){var o=new Date(i,n,t),s=this.d._isSelected(o,this.d.cellType);s?r._handleAlreadySelectedDates.bind(r,s,o)():r._trigger("clickCell",o)}else r.down(new Date(i,n,t))},_onClickCell:function(e){var n=t(e.target).closest(".datepicker--cell");n.hasClass("-disabled-")||this._handleClick.bind(this)(n)}}}(),function(){var e=t.fn.datepicker,n=e.Constructor;e.Navigation=function(e,t){this.d=e,this.opts=t,this.$buttonsContainer="",this.init()},e.Navigation.prototype={init:function(){this._buildBaseHtml(),this._bindEvents()},_bindEvents:function(){this.d.$nav.on("click",".datepicker--nav-action",t.proxy(this._onClickNavButton,this)),this.d.$nav.on("click",".datepicker--nav-title",t.proxy(this._onClickNavTitle,this)),this.d.$datepicker.on("click",".datepicker--button",t.proxy(this._onClickNavButton,this))},_buildBaseHtml:function(){this.opts.onlyTimepicker||this._render(),this._addButtonsIfNeed()},_addButtonsIfNeed:function(){this.opts.todayButton&&this._addButton("today"),this.opts.clearButton&&this._addButton("clear")},_render:function(){var e=this._getTitle(this.d.currentDate),i=n.template('<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div><div class="datepicker--nav-title">#{title}</div><div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>',t.extend({title:e},this.opts));this.d.$nav.html(i),"years"==this.d.view&&t(".datepicker--nav-title",this.d.$nav).addClass("-disabled-"),this.setNavStatus()},_getTitle:function(e){return this.d.formatDate(this.opts.navTitles[this.d.view],e)},_addButton:function(e){this.$buttonsContainer.length||this._addButtonsContainer();var i={action:e,label:this.d.loc[e]},r=n.template('<span class="datepicker--button" data-action="#{action}">#{label}</span>',i);t("[data-action="+e+"]",this.$buttonsContainer).length||this.$buttonsContainer.append(r)},_addButtonsContainer:function(){this.d.$datepicker.append('<div class="datepicker--buttons"></div>'),this.$buttonsContainer=t(".datepicker--buttons",this.d.$datepicker)},setNavStatus:function(){if((this.opts.minDate||this.opts.maxDate)&&this.opts.disableNavWhenOutOfRange){var e=this.d.parsedDate,t=e.month,i=e.year,r=e.date;switch(this.d.view){case"days":this.d._isInRange(new Date(i,t-1,1),"month")||this._disableNav("prev"),this.d._isInRange(new Date(i,t+1,1),"month")||this._disableNav("next");break;case"months":this.d._isInRange(new Date(i-1,t,r),"year")||this._disableNav("prev"),this.d._isInRange(new Date(i+1,t,r),"year")||this._disableNav("next");break;case"years":var o=n.getDecade(this.d.date);this.d._isInRange(new Date(o[0]-1,0,1),"year")||this._disableNav("prev"),this.d._isInRange(new Date(o[1]+1,0,1),"year")||this._disableNav("next")}}},_disableNav:function(e){t('[data-action="'+e+'"]',this.d.$nav).addClass("-disabled-")},_activateNav:function(e){t('[data-action="'+e+'"]',this.d.$nav).removeClass("-disabled-")},_onClickNavButton:function(e){var n=t(e.target).closest("[data-action]").data("action");this.d[n]()},_onClickNavTitle:function(e){if(!t(e.target).hasClass("-disabled-"))return"days"==this.d.view?this.d.view="months":void(this.d.view="years")}}}(),function(){var e=t.fn.datepicker,n=e.Constructor;e.Timepicker=function(e,t){this.d=e,this.opts=t,this.init()},e.Timepicker.prototype={init:function(){var e="input";this._setTime(this.d.date),this._buildHTML(),navigator.userAgent.match(/trident/gi)&&(e="change"),this.d.$el.on("selectDate",this._onSelectDate.bind(this)),this.$ranges.on(e,this._onChangeRange.bind(this)),this.$ranges.on("mouseup",this._onMouseUpRange.bind(this)),this.$ranges.on("mousemove focus ",this._onMouseEnterRange.bind(this)),this.$ranges.on("mouseout blur",this._onMouseOutRange.bind(this))},_setTime:function(e){var t=n.getParsedDate(e);this._handleDate(e),this.hours=t.hours<this.minHours?this.minHours:t.hours,this.minutes=t.minutes<this.minMinutes?this.minMinutes:t.minutes},_setMinTimeFromDate:function(e){this.minHours=e.getHours(),this.minMinutes=e.getMinutes(),this.d.lastSelectedDate&&this.d.lastSelectedDate.getHours()>e.getHours()&&(this.minMinutes=this.opts.minMinutes)},_setMaxTimeFromDate:function(e){this.maxHours=e.getHours(),this.maxMinutes=e.getMinutes(),this.d.lastSelectedDate&&this.d.lastSelectedDate.getHours()<e.getHours()&&(this.maxMinutes=this.opts.maxMinutes)},_setDefaultMinMaxTime:function(){var e=this.opts;this.minHours=e.minHours<0||e.minHours>23?0:e.minHours,this.minMinutes=e.minMinutes<0||e.minMinutes>59?0:e.minMinutes,this.maxHours=e.maxHours<0||e.maxHours>23?23:e.maxHours,this.maxMinutes=e.maxMinutes<0||e.maxMinutes>59?59:e.maxMinutes},_validateHoursMinutes:function(e){this.hours<this.minHours?this.hours=this.minHours:this.hours>this.maxHours&&(this.hours=this.maxHours),this.minutes<this.minMinutes?this.minutes=this.minMinutes:this.minutes>this.maxMinutes&&(this.minutes=this.maxMinutes)},_buildHTML:function(){var e=n.getLeadingZeroNum,i={hourMin:this.minHours,hourMax:e(this.maxHours),hourStep:this.opts.hoursStep,hourValue:this.hours,hourVisible:e(this.displayHours),minMin:this.minMinutes,minMax:e(this.maxMinutes),minStep:this.opts.minutesStep,minValue:e(this.minutes)},r=n.template('<div class="datepicker--time"><div class="datepicker--time-current">   <span class="datepicker--time-current-hours">#{hourVisible}</span>   <span class="datepicker--time-current-colon">:</span>   <span class="datepicker--time-current-minutes">#{minValue}</span></div><div class="datepicker--time-sliders">   <div class="datepicker--time-row">      <input type="range" name="hours" value="#{hourValue}" min="#{hourMin}" max="#{hourMax}" step="#{hourStep}"/>   </div>   <div class="datepicker--time-row">      <input type="range" name="minutes" value="#{minValue}" min="#{minMin}" max="#{minMax}" step="#{minStep}"/>   </div></div></div>',i);this.$timepicker=t(r).appendTo(this.d.$datepicker),this.$ranges=t('[type="range"]',this.$timepicker),this.$hours=t('[name="hours"]',this.$timepicker),this.$minutes=t('[name="minutes"]',this.$timepicker),this.$hoursText=t(".datepicker--time-current-hours",this.$timepicker),this.$minutesText=t(".datepicker--time-current-minutes",this.$timepicker),this.d.ampm&&(this.$ampm=t('<span class="datepicker--time-current-ampm">').appendTo(t(".datepicker--time-current",this.$timepicker)).html(this.dayPeriod),this.$timepicker.addClass("-am-pm-"))},_updateCurrentTime:function(){var e=n.getLeadingZeroNum(this.displayHours),t=n.getLeadingZeroNum(this.minutes);this.$hoursText.html(e),this.$minutesText.html(t),this.d.ampm&&this.$ampm.html(this.dayPeriod)},_updateRanges:function(){this.$hours.attr({min:this.minHours,max:this.maxHours}).val(this.hours),this.$minutes.attr({min:this.minMinutes,max:this.maxMinutes}).val(this.minutes)},_handleDate:function(e){this._setDefaultMinMaxTime(),e&&(n.isSame(e,this.d.opts.minDate)?this._setMinTimeFromDate(this.d.opts.minDate):n.isSame(e,this.d.opts.maxDate)&&this._setMaxTimeFromDate(this.d.opts.maxDate)),this._validateHoursMinutes(e)},update:function(){this._updateRanges(),this._updateCurrentTime()},_getValidHoursFromDate:function(e,t){var i=e;e instanceof Date&&(i=n.getParsedDate(e).hours);var r="am";if(t||this.d.ampm)switch(!0){case 0==i:i=12;break;case 12==i:r="pm";break;case i>11:i-=12,r="pm"}return{hours:i,dayPeriod:r}},set hours(e){this._hours=e;var t=this._getValidHoursFromDate(e);this.displayHours=t.hours,this.dayPeriod=t.dayPeriod},get hours(){return this._hours},_onChangeRange:function(e){var n=t(e.target),i=n.attr("name");this.d.timepickerIsActive=!0,this[i]=n.val(),this._updateCurrentTime(),this.d._trigger("timeChange",[this.hours,this.minutes]),this._handleDate(this.d.lastSelectedDate),this.update()},_onSelectDate:function(e,t){this._handleDate(t),this.update()},_onMouseEnterRange:function(e){var n=t(e.target).attr("name");t(".datepicker--time-current-"+n,this.$timepicker).addClass("-focus-")},_onMouseOutRange:function(e){var n=t(e.target).attr("name");this.d.inFocus||t(".datepicker--time-current-"+n,this.$timepicker).removeClass("-focus-")},_onMouseUpRange:function(e){this.d.timepickerIsActive=!1}}}()}(window,jQuery),jQuery.fn.datepicker.language.en={days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear",dateFormat:"mm/dd/yyyy",timeFormat:"hh:ii aa",firstDay:0},function(e,t){"function"==typeof define&&define.amd?define("sifter",t):"object"==typeof exports?module.exports=t():e.Sifter=t()}(this,function(){var e=function(e,t){this.items=e,this.settings=t||{diacritics:!0}};e.prototype.tokenize=function(e){if(!(e=r(String(e||"").toLowerCase()))||!e.length)return[];var t,n,i,s,l=[],c=e.split(/ +/);for(t=0,n=c.length;t<n;t++){if(i=o(c[t]),this.settings.diacritics)for(s in a)a.hasOwnProperty(s)&&(i=i.replace(new RegExp(s,"g"),a[s]));l.push({string:c[t],regex:new RegExp(i,"i")})}return l},e.prototype.iterator=function(e,t){(s(e)?Array.prototype.forEach||function(e){for(var t=0,n=this.length;t<n;t++)e(this[t],t,this)}:function(e){for(var t in this)this.hasOwnProperty(t)&&e(this[t],t,this)}).apply(e,[t])},e.prototype.getScoreFunction=function(e,t){var n,r,o,s;e=this.prepareSearch(e,t),r=e.tokens,n=e.options.fields,o=r.length,s=e.options.nesting;var a=function(e,t){var n,i;return e?(e=String(e||""),-1===(i=e.search(t.regex))?0:(n=t.string.length/e.length,0===i&&(n+=.5),n)):0},l=function(){var e=n.length;return e?1===e?function(e,t){return a(i(t,n[0],s),e)}:function(t,r){for(var o=0,l=0;o<e;o++)l+=a(i(r,n[o],s),t);return l/e}:function(){return 0}}();return o?1===o?function(e){return l(r[0],e)}:"and"===e.options.conjunction?function(e){for(var t,n=0,i=0;n<o;n++){if((t=l(r[n],e))<=0)return 0;i+=t}return i/o}:function(e){for(var t=0,n=0;t<o;t++)n+=l(r[t],e);return n/o}:function(){return 0}},e.prototype.getSortFunction=function(e,n){var r,o,s,a,l,c,u,d,h,p,f;if(s=this,e=s.prepareSearch(e,n),f=!e.query&&n.sort_empty||n.sort,h=function(e,t){return"$score"===e?t.score:i(s.items[t.id],e,n.nesting)},l=[],f)for(r=0,o=f.length;r<o;r++)(e.query||"$score"!==f[r].field)&&l.push(f[r]);if(e.query){for(p=!0,r=0,o=l.length;r<o;r++)if("$score"===l[r].field){p=!1;break}p&&l.unshift({field:"$score",direction:"desc"})}else for(r=0,o=l.length;r<o;r++)if("$score"===l[r].field){l.splice(r,1);break}for(d=[],r=0,o=l.length;r<o;r++)d.push("desc"===l[r].direction?-1:1);return(c=l.length)?1===c?(a=l[0].field,u=d[0],function(e,n){return u*t(h(a,e),h(a,n))}):function(e,n){var i,r,o;for(i=0;i<c;i++)if(o=l[i].field,r=d[i]*t(h(o,e),h(o,n)))return r;return 0}:null},e.prototype.prepareSearch=function(e,t){if("object"==typeof e)return e;var i=(t=n({},t)).fields,r=t.sort,o=t.sort_empty;return i&&!s(i)&&(t.fields=[i]),r&&!s(r)&&(t.sort=[r]),o&&!s(o)&&(t.sort_empty=[o]),{options:t,query:String(e||"").toLowerCase(),tokens:this.tokenize(e),total:0,items:[]}},e.prototype.search=function(e,t){var n,i,r,o,s=this;return i=this.prepareSearch(e,t),t=i.options,e=i.query,o=t.score||s.getScoreFunction(i),e.length?s.iterator(s.items,function(e,r){n=o(e),(!1===t.filter||n>0)&&i.items.push({score:n,id:r})}):s.iterator(s.items,function(e,t){i.items.push({score:1,id:t})}),(r=s.getSortFunction(i,t))&&i.items.sort(r),i.total=i.items.length,"number"==typeof t.limit&&(i.items=i.items.slice(0,t.limit)),i};var t=function(e,t){return"number"==typeof e&&"number"==typeof t?e>t?1:e<t?-1:0:(e=l(String(e||"")),t=l(String(t||"")),e>t?1:t>e?-1:0)},n=function(e,t){var n,i,r,o;for(n=1,i=arguments.length;n<i;n++)if(o=arguments[n])for(r in o)o.hasOwnProperty(r)&&(e[r]=o[r]);return e},i=function(e,t,n){if(e&&t){if(!n)return e[t];for(var i=t.split(".");i.length&&(e=e[i.shift()]););return e}},r=function(e){return(e+"").replace(/^\s+|\s+$|/g,"")},o=function(e){return(e+"").replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")},s=Array.isArray||"undefined"!=typeof $&&$.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},a={a:"[aḀḁĂăÂâǍǎȺⱥȦȧẠạÄäÀàÁáĀāÃãÅåąĄÃąĄ]",b:"[b␢βΒB฿𐌁ᛒ]",c:"[cĆćĈĉČčĊċC̄c̄ÇçḈḉȻȼƇƈɕᴄＣｃ]",d:"[dĎďḊḋḐḑḌḍḒḓḎḏĐđD̦d̦ƉɖƊɗƋƌᵭᶁᶑȡᴅＤｄð]",e:"[eÉéÈèÊêḘḙĚěĔĕẼẽḚḛẺẻĖėËëĒēȨȩĘęᶒɆɇȄȅẾếỀềỄễỂểḜḝḖḗḔḕȆȇẸẹỆệⱸᴇＥｅɘǝƏƐε]",f:"[fƑƒḞḟ]",g:"[gɢ₲ǤǥĜĝĞğĢģƓɠĠġ]",h:"[hĤĥĦħḨḩẖẖḤḥḢḣɦʰǶƕ]",i:"[iÍíÌìĬĭÎîǏǐÏïḮḯĨĩĮįĪīỈỉȈȉȊȋỊịḬḭƗɨɨ̆ᵻᶖİiIıɪＩｉ]",j:"[jȷĴĵɈɉʝɟʲ]",k:"[kƘƙꝀꝁḰḱǨǩḲḳḴḵκϰ₭]",l:"[lŁłĽľĻļĹĺḶḷḸḹḼḽḺḻĿŀȽƚⱠⱡⱢɫɬᶅɭȴʟＬｌ]",n:"[nŃńǸǹŇňÑñṄṅŅņṆṇṊṋṈṉN̈n̈ƝɲȠƞᵰᶇɳȵɴＮｎŊŋ]",o:"[oØøÖöÓóÒòÔôǑǒŐőŎŏȮȯỌọƟɵƠơỎỏŌōÕõǪǫȌȍՕօ]",p:"[pṔṕṖṗⱣᵽƤƥᵱ]",q:"[qꝖꝗʠɊɋꝘꝙq̃]",r:"[rŔŕɌɍŘřŖŗṘṙȐȑȒȓṚṛⱤɽ]",s:"[sŚśṠṡṢṣꞨꞩŜŝŠšŞşȘșS̈s̈]",t:"[tŤťṪṫŢţṬṭƮʈȚțṰṱṮṯƬƭ]",u:"[uŬŭɄʉỤụÜüÚúÙùÛûǓǔŰűŬŭƯưỦủŪūŨũŲųȔȕ∪]",v:"[vṼṽṾṿƲʋꝞꝟⱱʋ]",w:"[wẂẃẀẁŴŵẄẅẆẇẈẉ]",x:"[xẌẍẊẋχ]",y:"[yÝýỲỳŶŷŸÿỸỹẎẏỴỵɎɏƳƴ]",z:"[zŹźẐẑŽžŻżẒẓẔẕƵƶ]"},l=function(){var e,t,n,i,r="",o={};for(n in a)if(a.hasOwnProperty(n))for(r+=i=a[n].substring(2,a[n].length-1),e=0,t=i.length;e<t;e++)o[i.charAt(e)]=n;var s=new RegExp("["+r+"]","g");return function(e){return e.replace(s,function(e){return o[e]}).toLowerCase()}}();return e}),function(e,t){"function"==typeof define&&define.amd?define("microplugin",t):"object"==typeof exports?module.exports=t():e.MicroPlugin=t()}(this,function(){var e={};e.mixin=function(e){e.plugins={},e.prototype.initializePlugins=function(e){var n,i,r,o=this,s=[];if(o.plugins={names:[],settings:{},requested:{},loaded:{}},t.isArray(e))for(n=0,i=e.length;n<i;n++)"string"==typeof e[n]?s.push(e[n]):(o.plugins.settings[e[n].name]=e[n].options,s.push(e[n].name));else if(e)for(r in e)e.hasOwnProperty(r)&&(o.plugins.settings[r]=e[r],s.push(r));for(;s.length;)o.require(s.shift())},e.prototype.loadPlugin=function(t){var n=this,i=n.plugins,r=e.plugins[t];if(!e.plugins.hasOwnProperty(t))throw new Error('Unable to find "'+t+'" plugin');i.requested[t]=!0,i.loaded[t]=r.fn.apply(n,[n.plugins.settings[t]||{}]),i.names.push(t)},e.prototype.require=function(e){var t=this,n=t.plugins;if(!t.plugins.loaded.hasOwnProperty(e)){if(n.requested[e])throw new Error('Plugin has circular dependency ("'+e+'")');t.loadPlugin(e)}return n.loaded[e]},e.define=function(t,n){e.plugins[t]={name:t,fn:n}}};var t={isArray:Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}};return e}),function(e,t){"function"==typeof define&&define.amd?define("selectize",["jquery","sifter","microplugin"],t):"object"==typeof exports?module.exports=t(require("jquery"),require("sifter"),require("microplugin")):e.Selectize=t(e.jQuery,e.Sifter,e.MicroPlugin)}(this,function(e,t,n){"use strict";var i=function(e,t){if("string"!=typeof t||t.length){var n="string"==typeof t?new RegExp(t,"i"):t,i=function(e){var t=0;if(3===e.nodeType){var r=e.data.search(n);if(r>=0&&e.data.length>0){var o=e.data.match(n),s=document.createElement("span");s.className="highlight";var a=e.splitText(r),l=(a.splitText(o[0].length),a.cloneNode(!0));s.appendChild(l),a.parentNode.replaceChild(s,a),t=1}}else if(1===e.nodeType&&e.childNodes&&!/(script|style)/i.test(e.tagName))for(var c=0;c<e.childNodes.length;++c)c+=i(e.childNodes[c]);return t};return e.each(function(){i(this)})}};e.fn.removeHighlight=function(){return this.find("span.highlight").each(function(){this.parentNode.firstChild.nodeName;var e=this.parentNode;e.replaceChild(this.firstChild,this),e.normalize()}).end()};var r=function(){};r.prototype={on:function(e,t){this._events=this._events||{},this._events[e]=this._events[e]||[],this._events[e].push(t)},off:function(e,t){var n=arguments.length;return 0===n?delete this._events:1===n?delete this._events[e]:(this._events=this._events||{},void(e in this._events!=!1&&this._events[e].splice(this._events[e].indexOf(t),1)))},trigger:function(e){if(this._events=this._events||{},e in this._events!=!1)for(var t=0;t<this._events[e].length;t++)this._events[e][t].apply(this,Array.prototype.slice.call(arguments,1))}},r.mixin=function(e){for(var t=["on","off","trigger"],n=0;n<t.length;n++)e.prototype[t[n]]=r.prototype[t[n]]};var o=/Mac/.test(navigator.userAgent),s=o?91:17,a=o?18:17,l=!/android/i.test(window.navigator.userAgent)&&!!document.createElement("input").validity,c=function(e){return void 0!==e},u=function(e){return void 0===e||null===e?null:"boolean"==typeof e?e?"1":"0":e+""},d=function(e){return(e+"").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")},h={};h.before=function(e,t,n){var i=e[t];e[t]=function(){return n.apply(e,arguments),i.apply(e,arguments)}},h.after=function(e,t,n){var i=e[t];e[t]=function(){var t=i.apply(e,arguments);return n.apply(e,arguments),t}};var p=function(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}},f=function(e,t){var n;return function(){var i=this,r=arguments;window.clearTimeout(n),n=window.setTimeout(function(){e.apply(i,r)},t)}},g=function(e,t,n){var i,r=e.trigger,o={};e.trigger=function(){var n=arguments[0];if(-1===t.indexOf(n))return r.apply(e,arguments);o[n]=arguments},n.apply(e,[]),e.trigger=r;for(i in o)o.hasOwnProperty(i)&&r.apply(e,o[i])},m=function(e,t,n,i){e.on(t,n,function(t){for(var n=t.target;n&&n.parentNode!==e[0];)n=n.parentNode;return t.currentTarget=n,i.apply(this,[t])})},v=function(e){var t={};if("selectionStart"in e)t.start=e.selectionStart,t.length=e.selectionEnd-t.start;else if(document.selection){e.focus();var n=document.selection.createRange(),i=document.selection.createRange().text.length;n.moveStart("character",-e.value.length),t.start=n.text.length-i,t.length=i}return t},y=function(e,t,n){var i,r,o={};if(n)for(i=0,r=n.length;i<r;i++)o[n[i]]=e.css(n[i]);else o=e.css();t.css(o)},b=function(t,n){if(!t)return 0;var i=e("<test>").css({position:"absolute",top:-99999,left:-99999,width:"auto",padding:0,whiteSpace:"pre"}).text(t).appendTo("body");y(n,i,["letterSpacing","fontSize","fontFamily","fontWeight","textTransform"]);var r=i.width();return i.remove(),r},_=function(e){var t=null,n=function(n,i){var r,o,s,a,l,c,u,d;n=n||window.event||{},i=i||{},n.metaKey||n.altKey||(i.force||!1!==e.data("grow"))&&(r=e.val(),n.type&&"keydown"===n.type.toLowerCase()&&(s=(o=n.keyCode)>=97&&o<=122||o>=65&&o<=90||o>=48&&o<=57||32===o,46===o||8===o?(d=v(e[0])).length?r=r.substring(0,d.start)+r.substring(d.start+d.length):8===o&&d.start?r=r.substring(0,d.start-1)+r.substring(d.start+1):46===o&&void 0!==d.start&&(r=r.substring(0,d.start)+r.substring(d.start+1)):s&&(c=n.shiftKey,u=String.fromCharCode(n.keyCode),r+=u=c?u.toUpperCase():u.toLowerCase())),a=e.attr("placeholder"),!r&&a&&(r=a),(l=b(r,e)+4)!==t&&(t=l,e.width(l),e.triggerHandler("resize")))};e.on("keydown keyup update blur",n),n()},w=function(e){var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML},C=function(n,i){var r,o,s,a,l=this;(a=n[0]).selectize=l;var c=window.getComputedStyle&&window.getComputedStyle(a,null);if(s=c?c.getPropertyValue("direction"):a.currentStyle&&a.currentStyle.direction,s=s||n.parents("[dir]:first").attr("dir")||"",e.extend(l,{order:0,settings:i,$input:n,tabIndex:n.attr("tabindex")||"",tagType:"select"===a.tagName.toLowerCase()?1:2,rtl:/rtl/i.test(s),eventNS:".selectize"+ ++C.count,highlightedValue:null,isOpen:!1,isDisabled:!1,isRequired:n.is("[required]"),isInvalid:!1,isLocked:!1,isFocused:!1,isInputHidden:!1,isSetup:!1,isShiftDown:!1,isCmdDown:!1,isCtrlDown:!1,ignoreFocus:!1,ignoreBlur:!1,ignoreHover:!1,hasOptions:!1,currentResults:null,lastValue:"",caretPos:0,loading:0,loadedSearches:{},$activeOption:null,$activeItems:[],optgroups:{},options:{},userOptions:{},items:[],renderCache:{},onSearchChange:null===i.loadThrottle?l.onSearchChange:f(l.onSearchChange,i.loadThrottle)}),l.sifter=new t(this.options,{diacritics:i.diacritics}),l.settings.options){for(r=0,o=l.settings.options.length;r<o;r++)l.registerOption(l.settings.options[r]);delete l.settings.options}if(l.settings.optgroups){for(r=0,o=l.settings.optgroups.length;r<o;r++)l.registerOptionGroup(l.settings.optgroups[r]);delete l.settings.optgroups}l.settings.mode=l.settings.mode||(1===l.settings.maxItems?"single":"multi"),"boolean"!=typeof l.settings.hideSelected&&(l.settings.hideSelected="multi"===l.settings.mode),l.initializePlugins(l.settings.plugins),l.setupCallbacks(),l.setupTemplates(),l.setup()};return r.mixin(C),void 0!==n?n.mixin(C):function(e,t){t||(t={});console.error("Selectize: "+e),t.explanation&&(console.group&&console.group(),console.error(t.explanation),console.group&&console.groupEnd())}("Dependency MicroPlugin is missing",{explanation:'Make sure you either: (1) are using the "standalone" version of Selectize, or (2) require MicroPlugin before you load Selectize.'}),e.extend(C.prototype,{setup:function(){var t,n,i,r,c,u,d,h,p,f,g=this,v=g.settings,y=g.eventNS,b=e(window),w=e(document),C=g.$input;if(d=g.settings.mode,h=C.attr("class")||"",t=e("<div>").addClass(v.wrapperClass).addClass(h).addClass(d),n=e("<div>").addClass(v.inputClass).addClass("items").appendTo(t),i=e('<input type="text" autocomplete="off" />').appendTo(n).attr("tabindex",C.is(":disabled")?"-1":g.tabIndex),u=e(v.dropdownParent||t),r=e("<div>").addClass(v.dropdownClass).addClass(d).hide().appendTo(u),c=e("<div>").addClass(v.dropdownContentClass).appendTo(r),(f=C.attr("id"))&&(i.attr("id",f+"-selectized"),e("label[for='"+f+"']").attr("for",f+"-selectized")),g.settings.copyClassesToDropdown&&r.addClass(h),t.css({width:C[0].style.width}),g.plugins.names.length&&(p="plugin-"+g.plugins.names.join(" plugin-"),t.addClass(p),r.addClass(p)),(null===v.maxItems||v.maxItems>1)&&1===g.tagType&&C.attr("multiple","multiple"),g.settings.placeholder&&i.attr("placeholder",v.placeholder),!g.settings.splitOn&&g.settings.delimiter){var D=g.settings.delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&");g.settings.splitOn=new RegExp("\\s*"+D+"+\\s*")}C.attr("autocorrect")&&i.attr("autocorrect",C.attr("autocorrect")),C.attr("autocapitalize")&&i.attr("autocapitalize",C.attr("autocapitalize")),g.$wrapper=t,g.$control=n,g.$control_input=i,g.$dropdown=r,g.$dropdown_content=c,r.on("mouseenter","[data-selectable]",function(){return g.onOptionHover.apply(g,arguments)}),r.on("mousedown click","[data-selectable]",function(){return g.onOptionSelect.apply(g,arguments)}),m(n,"mousedown","*:not(input)",function(){return g.onItemSelect.apply(g,arguments)}),_(i),n.on({mousedown:function(){return g.onMouseDown.apply(g,arguments)},click:function(){return g.onClick.apply(g,arguments)}}),i.on({mousedown:function(e){e.stopPropagation()},keydown:function(){return g.onKeyDown.apply(g,arguments)},keyup:function(){return g.onKeyUp.apply(g,arguments)},keypress:function(){return g.onKeyPress.apply(g,arguments)},resize:function(){g.positionDropdown.apply(g,[])},blur:function(){return g.onBlur.apply(g,arguments)},focus:function(){return g.ignoreBlur=!1,g.onFocus.apply(g,arguments)},paste:function(){return g.onPaste.apply(g,arguments)}}),w.on("keydown"+y,function(e){g.isCmdDown=e[o?"metaKey":"ctrlKey"],g.isCtrlDown=e[o?"altKey":"ctrlKey"],g.isShiftDown=e.shiftKey}),w.on("keyup"+y,function(e){e.keyCode===a&&(g.isCtrlDown=!1),16===e.keyCode&&(g.isShiftDown=!1),e.keyCode===s&&(g.isCmdDown=!1)}),w.on("mousedown"+y,function(e){if(g.isFocused){if(e.target===g.$dropdown[0]||e.target.parentNode===g.$dropdown[0])return!1;g.$control.has(e.target).length||e.target===g.$control[0]||g.blur(e.target)}}),b.on(["scroll"+y,"resize"+y].join(" "),function(){g.isOpen&&g.positionDropdown.apply(g,arguments)}),b.on("mousemove"+y,function(){g.ignoreHover=!1}),this.revertSettings={$children:C.children().detach(),tabindex:C.attr("tabindex")},C.attr("tabindex",-1).hide().after(g.$wrapper),e.isArray(v.items)&&(g.setValue(v.items),delete v.items),l&&C.on("invalid"+y,function(e){e.preventDefault(),g.isInvalid=!0,g.refreshState()}),g.updateOriginalInput(),g.refreshItems(),g.refreshState(),g.updatePlaceholder(),g.isSetup=!0,C.is(":disabled")&&g.disable(),g.on("change",this.onChange),C.data("selectize",g),C.addClass("selectized"),g.trigger("initialize"),!0===v.preload&&g.onSearchChange("")},setupTemplates:function(){var t=this,n=t.settings.labelField,i=t.settings.optgroupLabelField,r={optgroup:function(e){return'<div class="optgroup">'+e.html+"</div>"},optgroup_header:function(e,t){return'<div class="optgroup-header">'+t(e[i])+"</div>"},option:function(e,t){return'<div class="option">'+t(e[n])+"</div>"},item:function(e,t){return'<div class="item">'+t(e[n])+"</div>"},option_create:function(e,t){return'<div class="create">Add <strong>'+t(e.input)+"</strong>&hellip;</div>"}};t.settings.render=e.extend({},r,t.settings.render)},setupCallbacks:function(){var e,t,n={initialize:"onInitialize",change:"onChange",item_add:"onItemAdd",item_remove:"onItemRemove",clear:"onClear",option_add:"onOptionAdd",option_remove:"onOptionRemove",option_clear:"onOptionClear",optgroup_add:"onOptionGroupAdd",optgroup_remove:"onOptionGroupRemove",optgroup_clear:"onOptionGroupClear",dropdown_open:"onDropdownOpen",dropdown_close:"onDropdownClose",type:"onType",load:"onLoad",focus:"onFocus",blur:"onBlur"};for(e in n)n.hasOwnProperty(e)&&(t=this.settings[n[e]])&&this.on(e,t)},onClick:function(e){var t=this;t.isFocused||(t.focus(),e.preventDefault())},onMouseDown:function(t){var n=this,i=t.isDefaultPrevented();e(t.target);if(n.isFocused){if(t.target!==n.$control_input[0])return"single"===n.settings.mode?n.isOpen?n.close():n.open():i||n.setActiveItem(null),!1}else i||window.setTimeout(function(){n.focus()},0)},onChange:function(){this.$input.trigger("change")},onPaste:function(t){var n=this;n.isFull()||n.isInputHidden||n.isLocked?t.preventDefault():n.settings.splitOn&&setTimeout(function(){var t=n.$control_input.val();if(t.match(n.settings.splitOn))for(var i=e.trim(t).split(n.settings.splitOn),r=0,o=i.length;r<o;r++)n.createItem(i[r])},0)},onKeyPress:function(e){if(this.isLocked)return e&&e.preventDefault();var t=String.fromCharCode(e.keyCode||e.which);return this.settings.create&&"multi"===this.settings.mode&&t===this.settings.delimiter?(this.createItem(),e.preventDefault(),!1):void 0},onKeyDown:function(e){e.target,this.$control_input[0];var t=this;if(t.isLocked)9!==e.keyCode&&e.preventDefault();else{switch(e.keyCode){case 65:if(t.isCmdDown)return void t.selectAll();break;case 27:return void(t.isOpen&&(e.preventDefault(),e.stopPropagation(),t.close()));case 78:if(!e.ctrlKey||e.altKey)break;case 40:if(!t.isOpen&&t.hasOptions)t.open();else if(t.$activeOption){t.ignoreHover=!0;var n=t.getAdjacentOption(t.$activeOption,1);n.length&&t.setActiveOption(n,!0,!0)}return void e.preventDefault();case 80:if(!e.ctrlKey||e.altKey)break;case 38:if(t.$activeOption){t.ignoreHover=!0;var i=t.getAdjacentOption(t.$activeOption,-1);i.length&&t.setActiveOption(i,!0,!0)}return void e.preventDefault();case 13:return void(t.isOpen&&t.$activeOption&&(t.onOptionSelect({currentTarget:t.$activeOption}),e.preventDefault()));case 37:return void t.advanceSelection(-1,e);case 39:return void t.advanceSelection(1,e);case 9:return t.settings.selectOnTab&&t.isOpen&&t.$activeOption&&(t.onOptionSelect({currentTarget:t.$activeOption}),t.isFull()||e.preventDefault()),void(t.settings.create&&t.createItem()&&e.preventDefault());case 8:case 46:return void t.deleteSelection(e)}!t.isFull()&&!t.isInputHidden||(o?e.metaKey:e.ctrlKey)||e.preventDefault()}},onKeyUp:function(e){var t=this;if(t.isLocked)return e&&e.preventDefault();var n=t.$control_input.val()||"";t.lastValue!==n&&(t.lastValue=n,t.onSearchChange(n),t.refreshOptions(),t.trigger("type",n))},onSearchChange:function(e){var t=this,n=t.settings.load;n&&(t.loadedSearches.hasOwnProperty(e)||(t.loadedSearches[e]=!0,t.load(function(i){n.apply(t,[e,i])})))},onFocus:function(e){var t=this,n=t.isFocused;if(t.isDisabled)return t.blur(),e&&e.preventDefault(),!1;t.ignoreFocus||(t.isFocused=!0,"focus"===t.settings.preload&&t.onSearchChange(""),n||t.trigger("focus"),t.$activeItems.length||(t.showInput(),t.setActiveItem(null),t.refreshOptions(!!t.settings.openOnFocus)),t.refreshState())},onBlur:function(e,t){var n=this;if(n.isFocused&&(n.isFocused=!1,!n.ignoreFocus)){if(!n.ignoreBlur&&document.activeElement===n.$dropdown_content[0])return n.ignoreBlur=!0,void n.onFocus(e);var i=function(){n.close(),n.setTextboxValue(""),n.setActiveItem(null),n.setActiveOption(null),n.setCaret(n.items.length),n.refreshState(),t&&t.focus&&t.focus(),n.ignoreFocus=!1,n.trigger("blur")};n.ignoreFocus=!0,n.settings.create&&n.settings.createOnBlur?n.createItem(null,!1,i):i()}},onOptionHover:function(e){this.ignoreHover||this.setActiveOption(e.currentTarget,!1)},onOptionSelect:function(t){var n,i,r=this;t.preventDefault&&(t.preventDefault(),t.stopPropagation()),(i=e(t.currentTarget)).hasClass("create")?r.createItem(null,function(){r.settings.closeAfterSelect&&r.close()}):void 0!==(n=i.attr("data-value"))&&(r.lastQuery=null,r.setTextboxValue(""),r.addItem(n),r.settings.closeAfterSelect?r.close():!r.settings.hideSelected&&t.type&&/mouse/.test(t.type)&&r.setActiveOption(r.getOption(n)))},onItemSelect:function(e){var t=this;t.isLocked||"multi"===t.settings.mode&&(e.preventDefault(),t.setActiveItem(e.currentTarget,e))},load:function(e){var t=this,n=t.$wrapper.addClass(t.settings.loadingClass);t.loading++,e.apply(t,[function(e){t.loading=Math.max(t.loading-1,0),e&&e.length&&(t.addOption(e),t.refreshOptions(t.isFocused&&!t.isInputHidden)),t.loading||n.removeClass(t.settings.loadingClass),t.trigger("load",e)}])},setTextboxValue:function(e){var t=this.$control_input;t.val()!==e&&(t.val(e).triggerHandler("update"),this.lastValue=e)},getValue:function(){return 1===this.tagType&&this.$input.attr("multiple")?this.items:this.items.join(this.settings.delimiter)},setValue:function(e,t){g(this,t?[]:["change"],function(){this.clear(t),this.addItems(e,t)})},setActiveItem:function(t,n){var i,r,o,s,a,l,c,u,d=this;if("single"!==d.settings.mode){if(!(t=e(t)).length)return e(d.$activeItems).removeClass("active"),d.$activeItems=[],void(d.isFocused&&d.showInput());if("mousedown"===(i=n&&n.type.toLowerCase())&&d.isShiftDown&&d.$activeItems.length){for(u=d.$control.children(".active:last"),(s=Array.prototype.indexOf.apply(d.$control[0].childNodes,[u[0]]))>(a=Array.prototype.indexOf.apply(d.$control[0].childNodes,[t[0]]))&&(c=s,s=a,a=c),r=s;r<=a;r++)l=d.$control[0].childNodes[r],-1===d.$activeItems.indexOf(l)&&(e(l).addClass("active"),d.$activeItems.push(l));n.preventDefault()}else"mousedown"===i&&d.isCtrlDown||"keydown"===i&&this.isShiftDown?t.hasClass("active")?(o=d.$activeItems.indexOf(t[0]),d.$activeItems.splice(o,1),t.removeClass("active")):d.$activeItems.push(t.addClass("active")[0]):(e(d.$activeItems).removeClass("active"),d.$activeItems=[t.addClass("active")[0]]);d.hideInput(),this.isFocused||d.focus()}},setActiveOption:function(t,n,i){var r,o,s,a,l,u=this;u.$activeOption&&u.$activeOption.removeClass("active"),u.$activeOption=null,(t=e(t)).length&&(u.$activeOption=t.addClass("active"),!n&&c(n)||(r=u.$dropdown_content.height(),o=u.$activeOption.outerHeight(!0),n=u.$dropdown_content.scrollTop()||0,a=s=u.$activeOption.offset().top-u.$dropdown_content.offset().top+n,l=s-r+o,s+o>r+n?u.$dropdown_content.stop().animate({scrollTop:l},i?u.settings.scrollDuration:0):s<n&&u.$dropdown_content.stop().animate({scrollTop:a},i?u.settings.scrollDuration:0)))},selectAll:function(){var e=this;"single"!==e.settings.mode&&(e.$activeItems=Array.prototype.slice.apply(e.$control.children(":not(input)").addClass("active")),e.$activeItems.length&&(e.hideInput(),e.close()),e.focus())},hideInput:function(){var e=this;e.setTextboxValue(""),e.$control_input.css({opacity:0,position:"absolute",left:e.rtl?1e4:-1e4}),e.isInputHidden=!0},showInput:function(){this.$control_input.css({opacity:1,position:"relative",left:0}),this.isInputHidden=!1},focus:function(){var e=this;e.isDisabled||(e.ignoreFocus=!0,e.$control_input[0].focus(),window.setTimeout(function(){e.ignoreFocus=!1,e.onFocus()},0))},blur:function(e){this.$control_input[0].blur(),this.onBlur(null,e)},getScoreFunction:function(e){return this.sifter.getScoreFunction(e,this.getSearchOptions())},getSearchOptions:function(){var e=this.settings,t=e.sortField;return"string"==typeof t&&(t=[{field:t}]),{fields:e.searchField,conjunction:e.searchConjunction,sort:t}},search:function(t){var n,i,r,o=this,s=o.settings,a=this.getSearchOptions();if(s.score&&"function"!=typeof(r=o.settings.score.apply(this,[t])))throw new Error('Selectize "score" setting must be a function that returns a function');if(t!==o.lastQuery?(o.lastQuery=t,i=o.sifter.search(t,e.extend(a,{score:r})),o.currentResults=i):i=e.extend(!0,{},o.currentResults),s.hideSelected)for(n=i.items.length-1;n>=0;n--)-1!==o.items.indexOf(u(i.items[n].id))&&i.items.splice(n,1);return i},refreshOptions:function(t){var n,r,o,s,a,l,c,d,h,p,f,g,m,v,y,b;void 0===t&&(t=!0);var _=this,C=e.trim(_.$control_input.val()),D=_.search(C),T=_.$dropdown_content,E=_.$activeOption&&u(_.$activeOption.attr("data-value"));for(s=D.items.length,"number"==typeof _.settings.maxOptions&&(s=Math.min(s,_.settings.maxOptions)),a={},l=[],n=0;n<s;n++)for(c=_.options[D.items[n].id],d=_.render("option",c),h=c[_.settings.optgroupField]||"",r=0,o=(p=e.isArray(h)?h:[h])&&p.length;r<o;r++)h=p[r],_.optgroups.hasOwnProperty(h)||(h=""),a.hasOwnProperty(h)||(a[h]=document.createDocumentFragment(),l.push(h)),a[h].appendChild(d);for(this.settings.lockOptgroupOrder&&l.sort(function(e,t){return(_.optgroups[e].$order||0)-(_.optgroups[t].$order||0)}),f=document.createDocumentFragment(),n=0,s=l.length;n<s;n++)h=l[n],_.optgroups.hasOwnProperty(h)&&a[h].childNodes.length?((g=document.createDocumentFragment()).appendChild(_.render("optgroup_header",_.optgroups[h])),g.appendChild(a[h]),f.appendChild(_.render("optgroup",e.extend({},_.optgroups[h],{html:w(g),dom:g})))):f.appendChild(a[h]);if(T.html(f),_.settings.highlight&&D.query.length&&D.tokens.length)for(T.removeHighlight(),n=0,s=D.tokens.length;n<s;n++)i(T,D.tokens[n].regex);if(!_.settings.hideSelected)for(n=0,s=_.items.length;n<s;n++)_.getOption(_.items[n]).addClass("selected");(m=_.canCreate(C))&&(T.prepend(_.render("option_create",{input:C})),b=e(T[0].childNodes[0])),_.hasOptions=D.items.length>0||m,_.hasOptions?(D.items.length>0?((y=E&&_.getOption(E))&&y.length?v=y:"single"===_.settings.mode&&_.items.length&&(v=_.getOption(_.items[0])),v&&v.length||(v=b&&!_.settings.addPrecedence?_.getAdjacentOption(b,1):T.find("[data-selectable]:first"))):v=b,_.setActiveOption(v),t&&!_.isOpen&&_.open()):(_.setActiveOption(null),t&&_.isOpen&&_.close())},addOption:function(t){var n,i,r,o=this;if(e.isArray(t))for(n=0,i=t.length;n<i;n++)o.addOption(t[n]);else(r=o.registerOption(t))&&(o.userOptions[r]=!0,o.lastQuery=null,o.trigger("option_add",r,t))},registerOption:function(e){var t=u(e[this.settings.valueField]);return void 0!==t&&null!==t&&!this.options.hasOwnProperty(t)&&(e.$order=e.$order||++this.order,this.options[t]=e,t)},registerOptionGroup:function(e){var t=u(e[this.settings.optgroupValueField]);return!!t&&(e.$order=e.$order||++this.order,this.optgroups[t]=e,t)},addOptionGroup:function(e,t){t[this.settings.optgroupValueField]=e,(e=this.registerOptionGroup(t))&&this.trigger("optgroup_add",e,t)},removeOptionGroup:function(e){this.optgroups.hasOwnProperty(e)&&(delete this.optgroups[e],this.renderCache={},this.trigger("optgroup_remove",e))},clearOptionGroups:function(){this.optgroups={},this.renderCache={},this.trigger("optgroup_clear")},updateOption:function(t,n){var i,r,o,s,a,l,c,d=this;if(t=u(t),o=u(n[d.settings.valueField]),null!==t&&d.options.hasOwnProperty(t)){if("string"!=typeof o)throw new Error("Value must be set in option data");c=d.options[t].$order,o!==t&&(delete d.options[t],-1!==(s=d.items.indexOf(t))&&d.items.splice(s,1,o)),n.$order=n.$order||c,d.options[o]=n,a=d.renderCache.item,l=d.renderCache.option,a&&(delete a[t],delete a[o]),l&&(delete l[t],delete l[o]),-1!==d.items.indexOf(o)&&(i=d.getItem(t),r=e(d.render("item",n)),i.hasClass("active")&&r.addClass("active"),i.replaceWith(r)),d.lastQuery=null,d.isOpen&&d.refreshOptions(!1)}},removeOption:function(e,t){var n=this;e=u(e);var i=n.renderCache.item,r=n.renderCache.option;i&&delete i[e],r&&delete r[e],delete n.userOptions[e],delete n.options[e],n.lastQuery=null,n.trigger("option_remove",e),n.removeItem(e,t)},clearOptions:function(){var e=this;e.loadedSearches={},e.userOptions={},e.renderCache={},e.options=e.sifter.items={},e.lastQuery=null,e.trigger("option_clear"),e.clear()},getOption:function(e){return this.getElementWithValue(e,this.$dropdown_content.find("[data-selectable]"))},getAdjacentOption:function(t,n){var i=this.$dropdown.find("[data-selectable]"),r=i.index(t)+n;return r>=0&&r<i.length?i.eq(r):e()},getElementWithValue:function(t,n){if(void 0!==(t=u(t))&&null!==t)for(var i=0,r=n.length;i<r;i++)if(n[i].getAttribute("data-value")===t)return e(n[i]);return e()},getItem:function(e){return this.getElementWithValue(e,this.$control.children())},addItems:function(t,n){for(var i=e.isArray(t)?t:[t],r=0,o=i.length;r<o;r++)this.isPending=r<o-1,this.addItem(i[r],n)},addItem:function(t,n){g(this,n?[]:["change"],function(){var i,r,o,s,a,l=this,c=l.settings.mode;t=u(t),-1===l.items.indexOf(t)?l.options.hasOwnProperty(t)&&("single"===c&&l.clear(n),"multi"===c&&l.isFull()||(i=e(l.render("item",l.options[t])),a=l.isFull(),l.items.splice(l.caretPos,0,t),l.insertAtCaret(i),(!l.isPending||!a&&l.isFull())&&l.refreshState(),l.isSetup&&(o=l.$dropdown_content.find("[data-selectable]"),l.isPending||(r=l.getOption(t),s=l.getAdjacentOption(r,1).attr("data-value"),l.refreshOptions(l.isFocused&&"single"!==c),s&&l.setActiveOption(l.getOption(s))),!o.length||l.isFull()?l.close():l.positionDropdown(),l.updatePlaceholder(),l.trigger("item_add",t,i),l.updateOriginalInput({silent:n})))):"single"===c&&l.close()})},removeItem:function(t,n){var i,r,o,s=this;i=t instanceof e?t:s.getItem(t),t=u(i.attr("data-value")),-1!==(r=s.items.indexOf(t))&&(i.remove(),i.hasClass("active")&&(o=s.$activeItems.indexOf(i[0]),s.$activeItems.splice(o,1)),s.items.splice(r,1),s.lastQuery=null,!s.settings.persist&&s.userOptions.hasOwnProperty(t)&&s.removeOption(t,n),r<s.caretPos&&s.setCaret(s.caretPos-1),s.refreshState(),s.updatePlaceholder(),s.updateOriginalInput({silent:n}),s.positionDropdown(),s.trigger("item_remove",t,i))},createItem:function(t,n){var i=this,r=i.caretPos;t=t||e.trim(i.$control_input.val()||"");var o=arguments[arguments.length-1];if("function"!=typeof o&&(o=function(){}),"boolean"!=typeof n&&(n=!0),!i.canCreate(t))return o(),!1;i.lock();var s="function"==typeof i.settings.create?this.settings.create:function(e){var t={};return t[i.settings.labelField]=e,t[i.settings.valueField]=e,t},a=p(function(e){if(i.unlock(),!e||"object"!=typeof e)return o();var t=u(e[i.settings.valueField]);if("string"!=typeof t)return o();i.setTextboxValue(""),i.addOption(e),i.setCaret(r),i.addItem(t),i.refreshOptions(n&&"single"!==i.settings.mode),o(e)}),l=s.apply(this,[t,a]);return void 0!==l&&a(l),!0},refreshItems:function(){this.lastQuery=null,this.isSetup&&this.addItem(this.items),this.refreshState(),this.updateOriginalInput()},refreshState:function(){this.refreshValidityState(),this.refreshClasses()},refreshValidityState:function(){if(!this.isRequired)return!1;var e=!this.items.length;this.isInvalid=e,this.$control_input.prop("required",e),this.$input.prop("required",!e)},refreshClasses:function(){var t=this,n=t.isFull(),i=t.isLocked;t.$wrapper.toggleClass("rtl",t.rtl),t.$control.toggleClass("focus",t.isFocused).toggleClass("disabled",t.isDisabled).toggleClass("required",t.isRequired).toggleClass("invalid",t.isInvalid).toggleClass("locked",i).toggleClass("full",n).toggleClass("not-full",!n).toggleClass("input-active",t.isFocused&&!t.isInputHidden).toggleClass("dropdown-active",t.isOpen).toggleClass("has-options",!e.isEmptyObject(t.options)).toggleClass("has-items",t.items.length>0),t.$control_input.data("grow",!n&&!i)},isFull:function(){return null!==this.settings.maxItems&&this.items.length>=this.settings.maxItems},updateOriginalInput:function(e){var t,n,i,r,o=this;if(e=e||{},1===o.tagType){for(i=[],t=0,n=o.items.length;t<n;t++)r=o.options[o.items[t]][o.settings.labelField]||"",i.push('<option value="'+d(o.items[t])+'" selected="selected">'+d(r)+"</option>");i.length||this.$input.attr("multiple")||i.push('<option value="" selected="selected"></option>'),o.$input.html(i.join(""))}else o.$input.val(o.getValue()),o.$input.attr("value",o.$input.val());o.isSetup&&(e.silent||o.trigger("change",o.$input.val()))},updatePlaceholder:function(){if(this.settings.placeholder){var e=this.$control_input;this.items.length?e.removeAttr("placeholder"):e.attr("placeholder",this.settings.placeholder),e.triggerHandler("update",{force:!0})}},open:function(){var e=this;e.isLocked||e.isOpen||"multi"===e.settings.mode&&e.isFull()||(e.focus(),e.isOpen=!0,e.refreshState(),e.$dropdown.css({visibility:"hidden",display:"block"}),e.positionDropdown(),e.$dropdown.css({visibility:"visible"}),e.trigger("dropdown_open",e.$dropdown))},close:function(){var e=this,t=e.isOpen;"single"===e.settings.mode&&e.items.length&&(e.hideInput(),e.$control_input.blur()),e.isOpen=!1,e.$dropdown.hide(),e.setActiveOption(null),e.refreshState(),t&&e.trigger("dropdown_close",e.$dropdown)},positionDropdown:function(){var e=this.$control,t="body"===this.settings.dropdownParent?e.offset():e.position();t.top+=e.outerHeight(!0),this.$dropdown.css({width:e.outerWidth(),top:t.top,left:t.left})},clear:function(e){var t=this;t.items.length&&(t.$control.children(":not(input)").remove(),t.items=[],t.lastQuery=null,t.setCaret(0),t.setActiveItem(null),t.updatePlaceholder(),t.updateOriginalInput({silent:e}),t.refreshState(),t.showInput(),t.trigger("clear"))},insertAtCaret:function(t){var n=Math.min(this.caretPos,this.items.length);0===n?this.$control.prepend(t):e(this.$control[0].childNodes[n]).before(t),this.setCaret(n+1)},deleteSelection:function(t){var n,i,r,o,s,a,l,c,u,d=this;if(r=t&&8===t.keyCode?-1:1,o=v(d.$control_input[0]),d.$activeOption&&!d.settings.hideSelected&&(l=d.getAdjacentOption(d.$activeOption,-1).attr("data-value")),s=[],d.$activeItems.length){for(u=d.$control.children(".active:"+(r>0?"last":"first")),a=d.$control.children(":not(input)").index(u),r>0&&a++,n=0,i=d.$activeItems.length;n<i;n++)s.push(e(d.$activeItems[n]).attr("data-value"));t&&(t.preventDefault(),t.stopPropagation())}else(d.isFocused||"single"===d.settings.mode)&&d.items.length&&(r<0&&0===o.start&&0===o.length?s.push(d.items[d.caretPos-1]):r>0&&o.start===d.$control_input.val().length&&s.push(d.items[d.caretPos]));if(!s.length||"function"==typeof d.settings.onDelete&&!1===d.settings.onDelete.apply(d,[s]))return!1;for(void 0!==a&&d.setCaret(a);s.length;)d.removeItem(s.pop());return d.showInput(),d.positionDropdown(),d.refreshOptions(!0),l&&(c=d.getOption(l)).length&&d.setActiveOption(c),!0},advanceSelection:function(e,t){var n,i,r,o,s,a=this;0!==e&&(a.rtl&&(e*=-1),n=e>0?"last":"first",i=v(a.$control_input[0]),a.isFocused&&!a.isInputHidden?(o=a.$control_input.val().length,(e<0?0===i.start&&0===i.length:i.start===o)&&!o&&a.advanceCaret(e,t)):(s=a.$control.children(".active:"+n)).length&&(r=a.$control.children(":not(input)").index(s),a.setActiveItem(null),a.setCaret(e>0?r+1:r)))},advanceCaret:function(e,t){var n,i,r=this;0!==e&&(n=e>0?"next":"prev",r.isShiftDown?(i=r.$control_input[n]()).length&&(r.hideInput(),r.setActiveItem(i),t&&t.preventDefault()):r.setCaret(r.caretPos+e))},setCaret:function(t){var n=this;if(t="single"===n.settings.mode?n.items.length:Math.max(0,Math.min(n.items.length,t)),!n.isPending){var i,r,o,s;for(i=0,r=(o=n.$control.children(":not(input)")).length;i<r;i++)s=e(o[i]).detach(),i<t?n.$control_input.before(s):n.$control.append(s)}n.caretPos=t},lock:function(){this.close(),this.isLocked=!0,this.refreshState()},unlock:function(){this.isLocked=!1,this.refreshState()},disable:function(){var e=this;e.$input.prop("disabled",!0),e.$control_input.prop("disabled",!0).prop("tabindex",-1),e.isDisabled=!0,e.lock()},enable:function(){var e=this;e.$input.prop("disabled",!1),e.$control_input.prop("disabled",!1).prop("tabindex",e.tabIndex),e.isDisabled=!1,e.unlock()},destroy:function(){var t=this,n=t.eventNS,i=t.revertSettings;t.trigger("destroy"),t.off(),t.$wrapper.remove(),t.$dropdown.remove(),t.$input.html("").append(i.$children).removeAttr("tabindex").removeClass("selectized").attr({tabindex:i.tabindex}).show(),t.$control_input.removeData("grow"),t.$input.removeData("selectize"),e(window).off(n),e(document).off(n),e(document.body).off(n),delete t.$input[0].selectize},render:function(t,n){var i,r,o="",s=!1,a=this;return"option"!==t&&"item"!==t||(s=!!(i=u(n[a.settings.valueField]))),s&&(c(a.renderCache[t])||(a.renderCache[t]={}),a.renderCache[t].hasOwnProperty(i))?a.renderCache[t][i]:(o=e(a.settings.render[t].apply(this,[n,d])),"option"===t||"option_create"===t?o.attr("data-selectable",""):"optgroup"===t&&(r=n[a.settings.optgroupValueField]||"",o.attr("data-group",r)),"option"!==t&&"item"!==t||o.attr("data-value",i||""),s&&(a.renderCache[t][i]=o[0]),o[0])},clearCache:function(e){var t=this;void 0===e?t.renderCache={}:delete t.renderCache[e]},canCreate:function(e){var t=this;if(!t.settings.create)return!1;var n=t.settings.createFilter;return e.length&&("function"!=typeof n||n.apply(t,[e]))&&("string"!=typeof n||new RegExp(n).test(e))&&(!(n instanceof RegExp)||n.test(e))}}),C.count=0,C.defaults={options:[],optgroups:[],plugins:[],delimiter:",",splitOn:null,persist:!0,diacritics:!0,create:!1,createOnBlur:!1,createFilter:null,highlight:!0,openOnFocus:!0,maxOptions:1e3,maxItems:null,hideSelected:null,addPrecedence:!1,selectOnTab:!1,preload:!1,allowEmptyOption:!1,closeAfterSelect:!1,scrollDuration:60,loadThrottle:300,loadingClass:"loading",dataAttr:"data-data",optgroupField:"optgroup",valueField:"value",labelField:"text",optgroupLabelField:"label",optgroupValueField:"value",lockOptgroupOrder:!1,sortField:"$order",searchField:["text"],searchConjunction:"and",mode:null,wrapperClass:"selectize-control",inputClass:"selectize-input",dropdownClass:"selectize-dropdown",dropdownContentClass:"selectize-dropdown-content",dropdownParent:null,copyClassesToDropdown:!0,render:{}},e.fn.selectize=function(t){var n=e.fn.selectize.defaults,i=e.extend({},n,t),r=i.dataAttr,o=i.labelField,s=i.valueField,a=i.optgroupField,l=i.optgroupLabelField,c=i.optgroupValueField,d=function(t,n){var a,l,c,u,d=t.attr(r);if(d)for(n.options=JSON.parse(d),a=0,l=n.options.length;a<l;a++)n.items.push(n.options[a][s]);else{var h=e.trim(t.val()||"");if(!i.allowEmptyOption&&!h.length)return;for(a=0,l=(c=h.split(i.delimiter)).length;a<l;a++)(u={})[o]=c[a],u[s]=c[a],n.options.push(u);n.items=c}},h=function(t,n){var d,h,p,f,g=n.options,m={},v=function(e){var t=r&&e.attr(r);return"string"==typeof t&&t.length?JSON.parse(t):null},y=function(t,r){t=e(t);var l=u(t.val());if(l||i.allowEmptyOption)if(m.hasOwnProperty(l)){if(r){var c=m[l][a];c?e.isArray(c)?c.push(r):m[l][a]=[c,r]:m[l][a]=r}}else{var d=v(t)||{};d[o]=d[o]||t.text(),d[s]=d[s]||l,d[a]=d[a]||r,m[l]=d,g.push(d),t.is(":selected")&&n.items.push(l)}};for(n.maxItems=t.attr("multiple")?null:1,d=0,h=(f=t.children()).length;d<h;d++)"optgroup"===(p=f[d].tagName.toLowerCase())?function(t){var i,r,o,s,a;for((o=(t=e(t)).attr("label"))&&((s=v(t)||{})[l]=o,s[c]=o,n.optgroups.push(s)),i=0,r=(a=e("option",t)).length;i<r;i++)y(a[i],o)}(f[d]):"option"===p&&y(f[d])};return this.each(function(){if(!this.selectize){var r=e(this),o=this.tagName.toLowerCase(),s=r.attr("placeholder")||r.attr("data-placeholder");s||i.allowEmptyOption||(s=r.children('option[value=""]').text());var a={placeholder:s,options:[],optgroups:[],items:[]};"select"===o?h(r,a):d(r,a),new C(r,e.extend(!0,{},n,a,t))}})},e.fn.selectize.defaults=C.defaults,e.fn.selectize.support={validity:l},C.define("drag_drop",function(t){if(!e.fn.sortable)throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');if("multi"===this.settings.mode){var n=this;n.lock=function(){var e=n.lock;return function(){var t=n.$control.data("sortable");return t&&t.disable(),e.apply(n,arguments)}}(),n.unlock=function(){var e=n.unlock;return function(){var t=n.$control.data("sortable");return t&&t.enable(),e.apply(n,arguments)}}(),n.setup=function(){var t=n.setup;return function(){t.apply(this,arguments);var i=n.$control.sortable({items:"[data-value]",forcePlaceholderSize:!0,disabled:n.isLocked,start:function(e,t){t.placeholder.css("width",t.helper.css("width")),i.css({overflow:"visible"})},stop:function(){i.css({overflow:"hidden"});var t=n.$activeItems?n.$activeItems.slice():null,r=[];i.children("[data-value]").each(function(){r.push(e(this).attr("data-value"))}),n.setValue(r),n.setActiveItem(t)}})}}()}}),C.define("dropdown_header",function(t){var n=this;t=e.extend({title:"Untitled",headerClass:"selectize-dropdown-header",titleRowClass:"selectize-dropdown-header-title",labelClass:"selectize-dropdown-header-label",closeClass:"selectize-dropdown-header-close",html:function(e){return'<div class="'+e.headerClass+'"><div class="'+e.titleRowClass+'"><span class="'+e.labelClass+'">'+e.title+'</span><a href="javascript:void(0)" class="'+e.closeClass+'">&times;</a></div></div>'}},t),n.setup=function(){var i=n.setup;return function(){i.apply(n,arguments),n.$dropdown_header=e(t.html(t)),n.$dropdown.prepend(n.$dropdown_header)}}()}),C.define("optgroup_columns",function(t){var n=this;t=e.extend({equalizeWidth:!0,equalizeHeight:!0},t),this.getAdjacentOption=function(t,n){var i=t.closest("[data-group]").find("[data-selectable]"),r=i.index(t)+n;return r>=0&&r<i.length?i.eq(r):e()},this.onKeyDown=function(){var e=n.onKeyDown;return function(t){var i,r,o,s;return!this.isOpen||37!==t.keyCode&&39!==t.keyCode?e.apply(this,arguments):(n.ignoreHover=!0,s=this.$activeOption.closest("[data-group]"),i=s.find("[data-selectable]").index(this.$activeOption),s=37===t.keyCode?s.prev("[data-group]"):s.next("[data-group]"),o=s.find("[data-selectable]"),void((r=o.eq(Math.min(o.length-1,i))).length&&this.setActiveOption(r)))}}();var i=function(){var e,t=i.width,n=document;return void 0===t&&((e=n.createElement("div")).innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',e=e.firstChild,n.body.appendChild(e),t=i.width=e.offsetWidth-e.clientWidth,n.body.removeChild(e)),t},r=function(){var r,o,s,a,l,c,u;if(u=e("[data-group]",n.$dropdown_content),(o=u.length)&&n.$dropdown_content.width()){if(t.equalizeHeight){for(s=0,r=0;r<o;r++)s=Math.max(s,u.eq(r).height());u.css({height:s})}t.equalizeWidth&&(c=n.$dropdown_content.innerWidth()-i(),a=Math.round(c/o),u.css({width:a}),o>1&&(l=c-a*(o-1),u.eq(o-1).css({width:l})))}};(t.equalizeHeight||t.equalizeWidth)&&(h.after(this,"positionDropdown",r),h.after(this,"refreshOptions",r))}),C.define("remove_button",function(t){t=e.extend({label:"&times;",title:"Remove",className:"remove",append:!0},t);"single"!==this.settings.mode?function(t,n){var i=t,r='<a href="javascript:void(0)" class="'+n.className+'" tabindex="-1" title="'+d(n.title)+'">'+n.label+"</a>",o=function(e,t){var n=e.search(/(<\/[^>]+>\s*)$/);return e.substring(0,n)+t+e.substring(n)};t.setup=function(){var s=i.setup;return function(){if(n.append){var a=i.settings.render.item;i.settings.render.item=function(e){return o(a.apply(t,arguments),r)}}s.apply(t,arguments),t.$control.on("click","."+n.className,function(t){if(t.preventDefault(),!i.isLocked){var n=e(t.currentTarget).parent();i.setActiveItem(n),i.deleteSelection()&&i.setCaret(i.items.length)}})}}()}(this,t):function(t,n){n.className="remove-single";var i=t,r='<a href="javascript:void(0)" class="'+n.className+'" tabindex="-1" title="'+d(n.title)+'">'+n.label+"</a>",o=function(e,t){return e+t};t.setup=function(){var s=i.setup;return function(){if(n.append){var a=e(i.$input.context).attr("id"),l=(e("#"+a),i.settings.render.item);i.settings.render.item=function(e){return o(l.apply(t,arguments),r)}}s.apply(t,arguments),t.$control.on("click","."+n.className,function(e){e.preventDefault(),i.isLocked||i.clear()})}}()}(this,t)}),C.define("restore_on_backspace",function(e){var t=this;e.text=e.text||function(e){return e[this.settings.labelField]},this.onKeyDown=function(){var n=t.onKeyDown;return function(t){var i,r;return 8===t.keyCode&&""===this.$control_input.val()&&!this.$activeItems.length&&(i=this.caretPos-1)>=0&&i<this.items.length?(r=this.options[this.items[i]],this.deleteSelection(t)&&(this.setTextboxValue(e.text.apply(this,[r])),this.refreshOptions(!0)),void t.preventDefault()):n.apply(this,arguments)}}()}),C}),function(e){"use strict";"function"==typeof define&&define.amd?define(e):"undefined"!=typeof module&&void 0!==module.exports?module.exports=e():window.Sortable=e()}(function(){"use strict";function e(e,t){if(!e||!e.nodeType||1!==e.nodeType)throw"Sortable: `el` must be HTMLElement, and not "+{}.toString.call(e);this.el=e,this.options=t=b({},t),e[q]=this;var n={group:Math.random(),sort:!0,disabled:!1,store:null,handle:null,scroll:!0,scrollSensitivity:30,scrollSpeed:10,draggable:/[uo]l/i.test(e.nodeName)?"li":">*",ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,setData:function(e,t){e.setData("Text",t.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0}};for(var i in n)!(i in t)&&(t[i]=n[i]);se(t);for(var r in this)"_"===r.charAt(0)&&"function"==typeof this[r]&&(this[r]=this[r].bind(this));this.nativeDraggable=!t.forceFallback&&J,o(e,"mousedown",this._onTapStart),o(e,"touchstart",this._onTapStart),o(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(o(e,"dragover",this),o(e,"dragenter",this)),re.push(this._onDragOver),t.store&&this.sort(t.store.get(this))}function t(e,t){"clone"!==e.lastPullMode&&(t=!0),E&&E.state!==t&&(l(E,"display",t?"none":""),t||E.state&&(e.options.group.revertClone?(x.insertBefore(E,S),e._animate(C,E)):x.insertBefore(E,C)),E.state=t)}function n(e,t,n){if(e){n=n||K;do{if(">*"===t&&e.parentNode===n||v(e,t))return e}while(e=i(e))}return null}function i(e){var t=e.host;return t&&t.nodeType?t:e.parentNode}function r(e){e.dataTransfer&&(e.dataTransfer.dropEffect="move"),e.preventDefault()}function o(e,t,n){e.addEventListener(t,n,X)}function s(e,t,n){e.removeEventListener(t,n,X)}function a(e,t,n){if(e)if(e.classList)e.classList[n?"add":"remove"](t);else{var i=(" "+e.className+" ").replace(V," ").replace(" "+t+" "," ");e.className=(i+(n?" "+t:"")).replace(V," ")}}function l(e,t,n){var i=e&&e.style;if(i){if(void 0===n)return K.defaultView&&K.defaultView.getComputedStyle?n=K.defaultView.getComputedStyle(e,""):e.currentStyle&&(n=e.currentStyle),void 0===t?n:n[t];t in i||(t="-webkit-"+t),i[t]=n+("string"==typeof n?"":"px")}}function c(e,t,n){if(e){var i=e.getElementsByTagName(t),r=0,o=i.length;if(n)for(;r<o;r++)n(i[r],r);return i}return[]}function u(e,t,n,i,r,o,s){e=e||t[q];var a=K.createEvent("Event"),l=e.options,c="on"+n.charAt(0).toUpperCase()+n.substr(1);a.initEvent(n,!0,!0),a.to=t,a.from=r||t,a.item=i||t,a.clone=E,a.oldIndex=o,a.newIndex=s,t.dispatchEvent(a),l[c]&&l[c].call(e,a)}function d(e,t,n,i,r,o,s,a){var l,c,u=e[q],d=u.options.onMove;return(l=K.createEvent("Event")).initEvent("move",!0,!0),l.to=t,l.from=e,l.dragged=n,l.draggedRect=i,l.related=r||t,l.relatedRect=o||t.getBoundingClientRect(),l.willInsertAfter=a,e.dispatchEvent(l),d&&(c=d.call(u,l,s)),c}function h(e){e.draggable=!1}function p(){ee=!1}function f(e,t){var n=e.lastElementChild.getBoundingClientRect();return t.clientY-(n.top+n.height)>5||t.clientX-(n.left+n.width)>5}function g(e){for(var t=e.tagName+e.className+e.src+e.href+e.textContent,n=t.length,i=0;n--;)i+=t.charCodeAt(n);return i.toString(36)}function m(e,t){var n=0;if(!e||!e.parentNode)return-1;for(;e&&(e=e.previousElementSibling);)"TEMPLATE"===e.nodeName.toUpperCase()||">*"!==t&&!v(e,t)||n++;return n}function v(e,t){if(e){var n=(t=t.split(".")).shift().toUpperCase(),i=new RegExp("\\s("+t.join("|")+")(?=\\s)","g");return!(""!==n&&e.nodeName.toUpperCase()!=n||t.length&&((" "+e.className+" ").match(i)||[]).length!=t.length)}return!1}function y(e,t){var n,i;return function(){void 0===n&&(n=arguments,i=this,setTimeout(function(){1===n.length?e.call(i,n[0]):e.apply(i,n),n=void 0},t))}}function b(e,t){if(e&&t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function _(e){return G?G(e).clone(!0)[0]:Q&&Q.dom?Q.dom(e).cloneNode(!0):e.cloneNode(!0)}function w(e){for(var t=e.getElementsByTagName("input"),n=t.length;n--;){var i=t[n];i.checked&&ie.push(i)}}if("undefined"==typeof window||!window.document)return function(){throw new Error("Sortable.js requires a window with a document")};var C,D,T,E,x,S,k,O,A,I,N,H,P,L,$,M,F,R,j,W,B={},V=/\s+/g,U=/left|right|inline/,q="Sortable"+(new Date).getTime(),z=window,K=z.document,Y=z.parseInt,G=z.jQuery||z.Zepto,Q=z.Polymer,X=!1,J=!!("draggable"in K.createElement("div")),Z=function(e){return!navigator.userAgent.match(/Trident.*rv[ :]?11\./)&&(e=K.createElement("x"),e.style.cssText="pointer-events:auto","auto"===e.style.pointerEvents)}(),ee=!1,te=Math.abs,ne=Math.min,ie=[],re=[],oe=y(function(e,t,n){if(n&&t.scroll){var i,r,o,s,a,l,c=n[q],u=t.scrollSensitivity,d=t.scrollSpeed,h=e.clientX,p=e.clientY,f=window.innerWidth,g=window.innerHeight;if(A!==n&&(O=t.scroll,A=n,I=t.scrollFn,!0===O)){O=n;do{if(O.offsetWidth<O.scrollWidth||O.offsetHeight<O.scrollHeight)break}while(O=O.parentNode)}O&&(i=O,r=O.getBoundingClientRect(),o=(te(r.right-h)<=u)-(te(r.left-h)<=u),s=(te(r.bottom-p)<=u)-(te(r.top-p)<=u)),o||s||(s=(g-p<=u)-(p<=u),((o=(f-h<=u)-(h<=u))||s)&&(i=z)),B.vx===o&&B.vy===s&&B.el===i||(B.el=i,B.vx=o,B.vy=s,clearInterval(B.pid),i&&(B.pid=setInterval(function(){if(l=s?s*d:0,a=o?o*d:0,"function"==typeof I)return I.call(c,a,l,e);i===z?z.scrollTo(z.pageXOffset+a,z.pageYOffset+l):(i.scrollTop+=l,i.scrollLeft+=a)},24)))}},30),se=function(e){function t(e,t){return void 0!==e&&!0!==e||(e=n.name),"function"==typeof e?e:function(n,i){var r=i.options.group.name;return t?e:e&&(e.join?e.indexOf(r)>-1:r==e)}}var n={},i=e.group;i&&"object"==typeof i||(i={name:i}),n.name=i.name,n.checkPull=t(i.pull,!0),n.checkPut=t(i.put),n.revertClone=i.revertClone,e.group=n};e.prototype={constructor:e,_onTapStart:function(e){var t,i=this,r=this.el,o=this.options,s=o.preventOnFilter,a=e.type,l=e.touches&&e.touches[0],c=(l||e).target,d=e.target.shadowRoot&&e.path[0]||c,h=o.filter;if(w(r),!C&&!("mousedown"===a&&0!==e.button||o.disabled)&&(c=n(c,o.draggable,r))&&k!==c){if(t=m(c,o.draggable),"function"==typeof h){if(h.call(this,e,c,this))return u(i,d,"filter",c,r,t),void(s&&e.preventDefault())}else if(h&&(h=h.split(",").some(function(e){if(e=n(d,e.trim(),r))return u(i,e,"filter",c,r,t),!0})))return void(s&&e.preventDefault());o.handle&&!n(d,o.handle,r)||this._prepareDragStart(e,l,c,t)}},_prepareDragStart:function(e,t,n,i){var r,s=this,l=s.el,d=s.options,p=l.ownerDocument;n&&!C&&n.parentNode===l&&(R=e,x=l,D=(C=n).parentNode,S=C.nextSibling,k=n,M=d.group,L=i,this._lastX=(t||e).clientX,this._lastY=(t||e).clientY,C.style["will-change"]="transform",r=function(){s._disableDelayedDrag(),C.draggable=s.nativeDraggable,a(C,d.chosenClass,!0),s._triggerDragStart(e,t),u(s,x,"choose",C,x,L)},d.ignore.split(",").forEach(function(e){c(C,e.trim(),h)}),o(p,"mouseup",s._onDrop),o(p,"touchend",s._onDrop),o(p,"touchcancel",s._onDrop),o(p,"pointercancel",s._onDrop),o(p,"selectstart",s),d.delay?(o(p,"mouseup",s._disableDelayedDrag),o(p,"touchend",s._disableDelayedDrag),o(p,"touchcancel",s._disableDelayedDrag),o(p,"mousemove",s._disableDelayedDrag),o(p,"touchmove",s._disableDelayedDrag),o(p,"pointermove",s._disableDelayedDrag),s._dragStartTimer=setTimeout(r,d.delay)):r())},_disableDelayedDrag:function(){var e=this.el.ownerDocument;clearTimeout(this._dragStartTimer),s(e,"mouseup",this._disableDelayedDrag),s(e,"touchend",this._disableDelayedDrag),s(e,"touchcancel",this._disableDelayedDrag),s(e,"mousemove",this._disableDelayedDrag),s(e,"touchmove",this._disableDelayedDrag),s(e,"pointermove",this._disableDelayedDrag)},_triggerDragStart:function(e,t){(t=t||("touch"==e.pointerType?e:null))?(R={target:C,clientX:t.clientX,clientY:t.clientY},this._onDragStart(R,"touch")):this.nativeDraggable?(o(C,"dragend",this),o(x,"dragstart",this._onDragStart)):this._onDragStart(R,!0);try{K.selection?setTimeout(function(){K.selection.empty()}):window.getSelection().removeAllRanges()}catch(e){}},_dragStarted:function(){if(x&&C){var t=this.options;a(C,t.ghostClass,!0),a(C,t.dragClass,!1),e.active=this,u(this,x,"start",C,x,L)}else this._nulling()},_emulateDragOver:function(){if(j){if(this._lastX===j.clientX&&this._lastY===j.clientY)return;this._lastX=j.clientX,this._lastY=j.clientY,Z||l(T,"display","none");var e=K.elementFromPoint(j.clientX,j.clientY),t=e,n=re.length;if(t)do{if(t[q]){for(;n--;)re[n]({clientX:j.clientX,clientY:j.clientY,target:e,rootEl:t});break}e=t}while(t=t.parentNode);Z||l(T,"display","")}},_onTouchMove:function(t){if(R){var n=this.options,i=n.fallbackTolerance,r=n.fallbackOffset,o=t.touches?t.touches[0]:t,s=o.clientX-R.clientX+r.x,a=o.clientY-R.clientY+r.y,c=t.touches?"translate3d("+s+"px,"+a+"px,0)":"translate("+s+"px,"+a+"px)";if(!e.active){if(i&&ne(te(o.clientX-this._lastX),te(o.clientY-this._lastY))<i)return;this._dragStarted()}this._appendGhost(),W=!0,j=o,l(T,"webkitTransform",c),l(T,"mozTransform",c),l(T,"msTransform",c),l(T,"transform",c),t.preventDefault()}},_appendGhost:function(){if(!T){var e,t=C.getBoundingClientRect(),n=l(C),i=this.options;a(T=C.cloneNode(!0),i.ghostClass,!1),a(T,i.fallbackClass,!0),a(T,i.dragClass,!0),l(T,"top",t.top-Y(n.marginTop,10)),l(T,"left",t.left-Y(n.marginLeft,10)),l(T,"width",t.width),l(T,"height",t.height),l(T,"opacity","0.8"),l(T,"position","fixed"),l(T,"zIndex","100000"),l(T,"pointerEvents","none"),i.fallbackOnBody&&K.body.appendChild(T)||x.appendChild(T),e=T.getBoundingClientRect(),l(T,"width",2*t.width-e.width),l(T,"height",2*t.height-e.height)}},_onDragStart:function(e,t){var n=e.dataTransfer,i=this.options;this._offUpEvents(),M.checkPull(this,this,C,e)&&((E=_(C)).draggable=!1,E.style["will-change"]="",l(E,"display","none"),a(E,this.options.chosenClass,!1),x.insertBefore(E,C),u(this,x,"clone",C)),a(C,i.dragClass,!0),t?("touch"===t?(o(K,"touchmove",this._onTouchMove),o(K,"touchend",this._onDrop),o(K,"touchcancel",this._onDrop),o(K,"pointermove",this._onTouchMove),o(K,"pointerup",this._onDrop)):(o(K,"mousemove",this._onTouchMove),o(K,"mouseup",this._onDrop)),this._loopId=setInterval(this._emulateDragOver,50)):(n&&(n.effectAllowed="move",i.setData&&i.setData.call(this,n,C)),o(K,"drop",this),setTimeout(this._dragStarted,0))},_onDragOver:function(i){var r,o,s,a,c=this.el,u=this.options,h=u.group,g=e.active,m=M===h,v=!1,y=u.sort;if(void 0!==i.preventDefault&&(i.preventDefault(),!u.dragoverBubble&&i.stopPropagation()),!C.animated&&(W=!0,g&&!u.disabled&&(m?y||(a=!x.contains(C)):F===this||(g.lastPullMode=M.checkPull(this,g,C,i))&&h.checkPut(this,g,C,i))&&(void 0===i.rootEl||i.rootEl===this.el))){if(oe(i,u,this.el),ee)return;if(r=n(i.target,u.draggable,c),o=C.getBoundingClientRect(),F!==this&&(F=this,v=!0),a)return t(g,!0),D=x,void(E||S?x.insertBefore(C,E||S):y||x.appendChild(C));if(0===c.children.length||c.children[0]===T||c===i.target&&f(c,i)){if(0!==c.children.length&&c.children[0]!==T&&c===i.target&&(r=c.lastElementChild),r){if(r.animated)return;s=r.getBoundingClientRect()}t(g,m),!1!==d(x,c,C,o,r,s,i)&&(C.contains(c)||(c.appendChild(C),D=c),this._animate(o,C),r&&this._animate(s,r))}else if(r&&!r.animated&&r!==C&&void 0!==r.parentNode[q]){N!==r&&(N=r,H=l(r),P=l(r.parentNode));var b=(s=r.getBoundingClientRect()).right-s.left,_=s.bottom-s.top,w=U.test(H.cssFloat+H.display)||"flex"==P.display&&0===P["flex-direction"].indexOf("row"),k=r.offsetWidth>C.offsetWidth,O=r.offsetHeight>C.offsetHeight,A=(w?(i.clientX-s.left)/b:(i.clientY-s.top)/_)>.5,I=r.nextElementSibling,L=!1;if(w){var $=C.offsetTop,R=r.offsetTop;L=$===R?r.previousElementSibling===C&&!k||A&&k:r.previousElementSibling===C||C.previousElementSibling===r?(i.clientY-s.top)/_>.5:R>$}else v||(L=I!==C&&!O||A&&O);var j=d(x,c,C,o,r,s,i,L);!1!==j&&(1!==j&&-1!==j||(L=1===j),ee=!0,setTimeout(p,30),t(g,m),C.contains(c)||(L&&!I?c.appendChild(C):r.parentNode.insertBefore(C,L?I:r)),D=C.parentNode,this._animate(o,C),this._animate(s,r))}}},_animate:function(e,t){var n=this.options.animation;if(n){var i=t.getBoundingClientRect();1===e.nodeType&&(e=e.getBoundingClientRect()),l(t,"transition","none"),l(t,"transform","translate3d("+(e.left-i.left)+"px,"+(e.top-i.top)+"px,0)"),t.offsetWidth,l(t,"transition","all "+n+"ms"),l(t,"transform","translate3d(0,0,0)"),clearTimeout(t.animated),t.animated=setTimeout(function(){l(t,"transition",""),l(t,"transform",""),t.animated=!1},n)}},_offUpEvents:function(){var e=this.el.ownerDocument;s(K,"touchmove",this._onTouchMove),s(K,"pointermove",this._onTouchMove),s(e,"mouseup",this._onDrop),s(e,"touchend",this._onDrop),s(e,"pointerup",this._onDrop),s(e,"touchcancel",this._onDrop),s(e,"pointercancel",this._onDrop),s(e,"selectstart",this)},_onDrop:function(t){var n=this.el,i=this.options;clearInterval(this._loopId),clearInterval(B.pid),clearTimeout(this._dragStartTimer),s(K,"mousemove",this._onTouchMove),this.nativeDraggable&&(s(K,"drop",this),s(n,"dragstart",this._onDragStart)),this._offUpEvents(),t&&(W&&(t.preventDefault(),!i.dropBubble&&t.stopPropagation()),T&&T.parentNode&&T.parentNode.removeChild(T),x!==D&&"clone"===e.active.lastPullMode||E&&E.parentNode&&E.parentNode.removeChild(E),C&&(this.nativeDraggable&&s(C,"dragend",this),h(C),C.style["will-change"]="",a(C,this.options.ghostClass,!1),a(C,this.options.chosenClass,!1),u(this,x,"unchoose",C,x,L),x!==D?($=m(C,i.draggable))>=0&&(u(null,D,"add",C,x,L,$),u(this,x,"remove",C,x,L,$),u(null,D,"sort",C,x,L,$),u(this,x,"sort",C,x,L,$)):C.nextSibling!==S&&($=m(C,i.draggable))>=0&&(u(this,x,"update",C,x,L,$),u(this,x,"sort",C,x,L,$)),e.active&&(null!=$&&-1!==$||($=L),u(this,x,"end",C,x,L,$),this.save()))),this._nulling()},_nulling:function(){x=C=D=T=S=E=k=O=A=R=j=W=$=N=H=F=M=e.active=null,ie.forEach(function(e){e.checked=!0}),ie.length=0},handleEvent:function(e){switch(e.type){case"drop":case"dragend":this._onDrop(e);break;case"dragover":case"dragenter":C&&(this._onDragOver(e),r(e));break;case"selectstart":e.preventDefault()}},toArray:function(){for(var e,t=[],i=this.el.children,r=0,o=i.length,s=this.options;r<o;r++)n(e=i[r],s.draggable,this.el)&&t.push(e.getAttribute(s.dataIdAttr)||g(e));return t},sort:function(e){var t={},i=this.el;this.toArray().forEach(function(e,r){var o=i.children[r];n(o,this.options.draggable,i)&&(t[e]=o)},this),e.forEach(function(e){t[e]&&(i.removeChild(t[e]),i.appendChild(t[e]))})},save:function(){var e=this.options.store;e&&e.set(this)},closest:function(e,t){return n(e,t||this.options.draggable,this.el)},option:function(e,t){var n=this.options;if(void 0===t)return n[e];n[e]=t,"group"===e&&se(n)},destroy:function(){var e=this.el;e[q]=null,s(e,"mousedown",this._onTapStart),s(e,"touchstart",this._onTapStart),s(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(s(e,"dragover",this),s(e,"dragenter",this)),Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),function(e){e.removeAttribute("draggable")}),re.splice(re.indexOf(this._onDragOver),1),this._onDrop(),this.el=e=null}},o(K,"touchmove",function(t){e.active&&t.preventDefault()});try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){X={capture:!1,passive:!1}}}))}catch(e){}return e.utils={on:o,off:s,css:l,find:c,is:function(e,t){return!!n(e,t,e)},extend:b,throttle:y,closest:n,toggleClass:a,clone:_,index:m},e.create=function(t,n){return new e(t,n)},e.version="1.6.0",e}),window.arctic={},window.arctic.utils={getCookie:function(e){var t=null;if(document.cookie&&""!==document.cookie)for(var n=document.cookie.split(";"),i=0;i<n.length;i++){var r=jQuery.trim(n[i]);if(r.substring(0,e.length+1)===e+"="){t=decodeURIComponent(r.substring(e.length+1));break}}return t},growl:function(e,t,n){var i='<div class="growl '+e+'">             <h6>'+t+"</h6>             <p>"+n+"</p>         </div>",i=$(i);return $("body").append(i),i},slugify:function(e){return e.toLowerCase().replace(/[^\w ]+/g,"").replace(/ +/g,"-")}},function(e){function t(t){if(!(t instanceof jQuery||"id"==t.attr("id")))throw new Error("Expecting a jQuery object with an ID attribute");this.form=t.closest("form"),this.state=0,this.element=t,this.id=t.attr("id"),this.value=t.val(),this.checkbox=e('<input type="checkbox" id="'+this.id+'_toggler" />'),this.setup(),this.init()}t.prototype.setup=function(){this.element.parent().addClass("is-conditional-field"),this.value&&this.value.length?(this.state=1,this.checkbox=this.checkbox.attr("checked","checked")):setTimeout(function(){this.hidden()}.bind(this),0),this.element.before(this.checkbox),this.checkbox.wrap('<div class="input-group-label"></div>'),this.element.wrap('<div class="input-group-field"></div>')},t.prototype.init=function(){var e=this;this.value?this.visible():this.hidden(),this.checkbox.change(function(){this.checked?e.visible():e.hidden()}),this.form.on("submit",function(t){t.preventDefault(),0===e.state&&e.empty(e),this.submit()})},t.prototype.hidden=function(){this.element.parent().hide(),this.state=0},t.prototype.visible=function(){this.element.parent().show(),this.state=1},t.prototype.empty=function(e){e.element.val("")},e(document).ready(function(){new t(e("#id_shops"))})}(jQuery),function(){var e=$("input[data-to-slugify]"),t=$(e.data("to-slugify")),n=e.val(),i=t.val();if(e.length&&t.length){var r=i;t.on("keyup",function(){var n=t.val();r!=n&&(r=n,e.val(arctic.utils.slugify(t.val())))}),""==e.val()&&""==t.val()||e.closest("form").on("submit",function(){arctic.utils.slugify(t.val());if(n!=e.val()||i!=t.val()){var r;if(r="Slug is aangepast",!confirm(r))return!1}})}}(),function(e){"use strict";var t={};t.element='<div class="modal fade" id="revealModal" tabindex="-1" role="dialog" aria-labelledby="revealModalLabel" aria-hidden="true"><div class="modal-dialog" style="top:10%" role="document"><iframe frameborder="0" allowfullscreen></iframe></div></div>',t.element=e(t.element),t.parameter="dialog=1",t.size=null,t.url=null,t.ready=!1;var n={init:function(e){var t=this;if(!e instanceof jQuery)throw new Error("$triggers is not a jQuery object");t.listeners(e)},listeners:function(n){n.on("click",function(n){n.preventDefault();var i=e(this);t.url=i.data("url"),t.size=i.data("size"),t.minHeight=i.data("min-height"),t.open(t.url,t.size,t.minHeight)}),t.element.on("hidden.bs.modal",function(){t.close()})}},i={init:function(e){var t=this;t.setup(e),t.listeners(e)},setup:function(e){this.linksToDialog(e)},linksToDialog:function(n){var i=n.find("a");if(i.length)for(var r=0;r<i.length;r++){var o=e(i[r]),s=o.attr("href");void 0!=s&&s.length&&(s=s.match(/\?./)?s+"&"+t.parameter:s+"?"+t.parameter,o.attr("href",s))}},isUrlParameter:function(e,t){return-1!=e.indexOf("?"+t+"=")||-1!=e.indexOf("&"+t+"=")},listeners:function(t){var n=this;t.data("refresh-parent")&&window.parent.location.reload(),window.parent===window?n.dialog=e("body").find(".modal"):n.dialog=window.parent.$(window.parent.document).find(".modal"),t.data("auto-close")&&n.dialog.modal("hide");var i=t.find("[data-go-back-dialog]");i.on("click",function(e){if(document.referrer.length){var t=document.referrer;if(n.isUrlParameter(t,"dialog"))return void history.back()}e.preventDefault(),n.dialog.modal("hide"),i.off("click")});var r=t.find("[data-close-dialog]");r.on("click",function(e){e.preventDefault(),n.dialog.modal("hide"),r.off("click")})}};e.extend(t,{addDialog:function(){var t=this;0==e("body").find(t.dialog).length&&(t.dialog=t.element,e("body").find(t.dialog),setTimeout(function(){t.dialog.modal("show")},0))},open:function(e,n,i){var r=this;r.addDialog(),t.ready=!1,r.setDialogSize(n),r.setIframeSrc(e,r.setIframeDimensions,i)},setDialogSize:function(e){var t=this;void 0!==e&&e.length&&t.dialog.addClass(e)},setIframeSrc:function(e,n,i){var r=this,o=r.dialog.find("iframe");o.on("load",function(){t.ready||(t.ready=!0,n(r,i))}),o.attr("src",e)},setIframeDimensions:function(t,n){var i=t.dialog.find("iframe");n?(i.css("height",n),t.repositionIframe(i)):setTimeout(function(){var e=i.contents().find(".js--dialog-scrol-size")[0].scrollHeight;i.css("height",e),t.repositionIframe(i)},0),e(window).trigger("resize")},repositionIframe:function(e){var t=e.height(),n=(window.innerHeight-t)/2;e.parent().css("top",n)},close:function(){var e=this;e.disableAreYouSure(),e.removeIframeMarkUp(),e.removeDialogSizes()},disableAreYouSure:function(){var e=this.dialog.find("iframe").contents().find(".dirty-check");e.removeClass("dirty"),e.areYouSure({silent:!0})},removeIframeMarkUp:function(){this.dialog.find("iframe").removeAttr("style").removeAttr("src")},removeDialogSizes:function(){for(var e=this,t=["tiny","small","large","full"],n=0;n<t.length;n++)e.dialog.removeClass(t[n])},destroy:function(e){var t=this;if(t.dialog.remove(),t.dialog.off("shown.bs.modal"),t.dialog.off("hidden.bs.modal"),e.length){if(!e instanceof jQuery)throw new Error("$triggers is not a jQuery object");e.off("click")}}}),window.arctic.utils.revealInIframe={open:function(e,n){t.open(e,n),t.element.modal("show")},close:function(){t.close()}},e(document).ready(function(){var t=e("body.dialog"),r=e("[data-target][data-url]");r.length?n.init(r):t.length&&i.init(t)})}(jQuery),function(e){e(".arctic_toggle_form_button").each(function(){var t=e(this).data("popover_content_container"),n=e(t).contents();e(this).data("form",n)}).popover({content:function(){return e(this).data("form")},html:!0});var t=function(e){return e.attr("class").indexOf("datepicker")>-1};e(".arctic_toggle_form_button").on("show.bs.popover",function(){e("body").on("click.popover",function(n){var i=n.target;e(i).is(".popover")||e(i).parents().is(".popover")||e(i).is(".arctic_toggle_form_button")||e(i).parents().is(".arctic_toggle_form_button")||t(e(i))||(e("body").off("click.popover"),e(".arctic_toggle_form_button").popover("hide"))})})}(jQuery),$(document).ready(function(){$("[js-selectize]").each(function(e){$(this).selectize({allowEmptyOption:!0,highlight:!1,plugins:["remove_button"]})}),$("[js-selectize-multiple]").each(function(e){$(this).selectize({delimiter:",",persist:!1,plugins:["remove_button"],onDropdownOpen:function(e){$("form").hasClass("float-label")&&e.parent().next("label").css({top:".3rem",fontSize:"75%"})},onDropdownClose:function(e){$("form").hasClass("float-label")&&0==$(".float-label .selectize-input").find(".item").length&&e.parent().next("label").css({top:".75rem",fontSize:"100%"})},create:function(e){return{value:e,text:e}}})}),$("[js-selectize-autocomplete]").each(function(e){var t=$(this).attr("data-url");$(this).selectize({valueField:"value",labelField:"label",searchField:"label",create:!1,load:function(e,n){if(!e.length)return n();$.ajax({url:t+encodeURIComponent(e),type:"GET",error:function(){n()},success:function(e){n(e.options)}})},onDropdownOpen:function(e){e.parent().next("label").css({top:".3rem",fontSize:"75%"})},onDropdownClose:function(e){0==$(".float-label .selectize-input").find(".item").length&&e.parent().next("label").css({top:".75rem",fontSize:"100%"})}})}),$("[js-datepicker]").each(function(e){var t="Invalid Date"==new Date($(this).attr("data-date"))?new Date:new Date($(this).attr("data-date"));$(this).datepicker({todayButton:!0,language:"en",startDate:t,dateFormat:django2datepicker(DATE_FORMAT)}).data("datepicker").selectDate(t)}),$("[js-timepicker]").each(function(e){var t="Invalid Date"==new Date($(this).attr("data-time"))?new Date:new Date($(this).attr("data-time"));$(this).datepicker({onlyTimepicker:!0,language:"en",startDate:t,timeFormat:django2datepicker(TIME_FORMAT),timepicker:!0}).data("datepicker").selectDate(t)}),$("[js-datetimepicker]").each(function(e){var t="Invalid Date"==new Date($(this).attr("data-datetime"))?new Date:new Date($(this).attr("data-datetime"));$(this).datepicker({language:"en",todayButton:!0,startDate:t,dateFormat:django2datepicker(DATE_FORMAT),timeFormat:django2datepicker(TIME_FORMAT),timepicker:!0}).data("datepicker").selectDate(t)}),$("[data-sorting-url]").each(function(e){var t=$(this).attr("data-sorting-url"),n=new Object;Sortable.create(this,{handle:".drag-handle",animation:100,onUpdate:function(e){var i=1;$(e.to).find(".drag-handle i").each(function(e){var t=$(this).attr("data-sorting-key"),r=$(this).attr("data-sorting-value");parseInt(r)!=i&&(n[t]=i,$(this).attr("data-sorting-value",i)),i+=1}),$.post(t,JSON.stringify(n)).done(function(){}).fail(function(){console.error("Unable to post reordering to backend")})}})})}),function(e,t){"use strict";function n(t){this.element=e("[data-sortable]"),this.rowClass="",this.row="",this.sortHandle="",this.deleteHandle="",this.deletePlaceholder="",this.init()}n.prototype.init=function(){var e=this;if(e.element.length){if(e.rowClass=e.element.data("row"),e.row=e.element.find(e.rowClass),!e.row.length)return void console.log("Sortable: data-to-sort not valid or empty");e.deleteHandle=e.row.find(e.element.data("delete-handle")),e.deleteHandle.length&&e.deleteHandle.on("click",function(t){e.remove(this,e)}),e.sorting()}},n.prototype.sorting=function(){var e=this,n=e.element.get(0),i={animation:200,onUpdate:function(t){e.recalc()}};e.sortHandle=e.element.data("sort-handle"),void 0!=e.sortHandle&&(i.handle=e.sortHandle);t.create(n,i)},n.prototype.recalc=function(){var t=this,n=e(t.rowClass);n.each(function(i,r){var o=e(r),s=parseInt(n.index(o)),a=o.data("sort-placeholder");(a=o.find(a)).length||(a=e(t.sortPlaceholder)),a.length&&a.val(s)})},n.prototype.remove=function(t,n){var i=e(t).closest(n.rowClass),r=i.parent();n.deletePlaceholderClass=n.element.data("delete-placeholder"),n.deletePlaceholder=i.find(n.deletePlaceholderClass),n.deletePlaceholder.length&&n.deletePlaceholder.prop("checked",!0),i.addClass("removed").appendTo(r),n.recalc()},new n}(jQuery,Sortable),function(e,t){t("#menu-button").click(function(e){t(this).toggleClass("is-active"),t(".row-offcanvas").toggleClass("active"),e.preventDefault()});for(var n=document.querySelectorAll("[js--collapse-menu]"),i=0;i<n.length;i++)n[i].addEventListener("click",function(e){e.preventDefault();var t=this.querySelector("[js--collapse-menu-arrow]");this.classList.toggle("active"),t.classList.contains("fa-angle-down")?(t.classList.remove("fa-angle-down"),t.classList.add("fa-angle-left")):(t.classList.add("fa-angle-down"),t.classList.remove("fa-angle-left")),this.nextSibling.nextSibling.classList.toggle("active")})}(window,$),$(function(){$('[data-toggle="tooltip"]').tooltip()}),$(".float-label input").keyup(function(){$(this).val().length>0&&($(this).css({paddingTop:"1.2rem",paddingBottom:".4rem"}),$(this).next("label").css({top:".3rem",fontSize:"75%"}))}),$(document).ready(function(){$(".float-label .selectize-input").find(".item").length>0&&$(".selectize-input").parent().next("label").css({top:".3rem",fontSize:"75%"});var e=$("form.dirty-check");e.length&&!window.parent!=window&&(e.areYouSure(),$("form").on("dirty.areYouSure",function(){var e=$(".tabs-title.is-active a")[0];e&&"●"!=e.text[0]&&(e.text="● "+e.text),document.title="● "+document.title}),$("form").on("clean.areYouSure",function(){var e=$(".tabs-title.is-active a")[0];e&&(e.text=e.text.slice(2)),document.title=document.title.slice(2)})),$("[js-search-submit]").on("click",function(){$("form").submit()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
